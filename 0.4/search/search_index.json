{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Copyright and other protections apply. Please see the accompanying LICENSE file for rights and restrictions governing use of this software. All rights not expressly waived or licensed are reserved. If that file is missing or appears to be modified from its original, then please contact the author before viewing or using this software in any capacity. anydyce \u2013 visualization tools for dyce anydyce exposes an interactive interface to dyce (the dice mechanic modeling library) in Jupyter similar to AnyDice . anydyce is licensed under the MIT License . See the accompanying LICENSE file for details. Non-experimental features should be considered stable. See the release notes for a summary of version-to-version changes. Source code is available on GitHub . If you find it lacking in any way, please don\u2019t hesitate to bring it to my attention . Design philosophy anydyce (currently) targets Matplotlib (both alone and within Jupyter). Support for additional visualization tools may be added in the future. It is intended as a convenience layer for those who benefit from simple interfaces with reasonable defaults and limited configurability. If you find they are too restrictive, or have any requests or ideas for improvements, let me know ! 1 If used within Jupyter, anydyce provides a high-level, interactive interface with functionality that echos AnyDice. Comparison to AnyDice Feature anydyce AnyDice Shareable session URLs \u26a0\ufe0f Via third party 2 \u2705 Yes Modeling language \ud83d\udc0d Python Proprietary Computation time limit \u2705 No limit \u274c 5 seconds Configurable plots (including \u201cburst\u201d graphs) \u2705 Yes \u274c No Install and use third party libraries \u2705 Yes \u274c No Open source (install, run, and modify locally) \u2705 Yes \u274c No Advanced language features (memoization, nested functions, etc.) \u2705 Yes \u274c No Interactive quick start Probably the easiest way to start tinkering with anydyce is with JupyterLite : The quickstart-local.sh script will create a local virtual environment to bootstrap a local Jupyter server with anydyce installed and open a web browser to the introduction notebook . Binder is another great resource that you can use to share notebooks from your Git repositories (including Gists ): JupyterLite and Binder may not save your work! JupyterLite attempts to make use of your browser\u2019s local storage for saving notebook changes. Browser environments vary, including how long local storage is persisted. Further, Binder loses all state once its instances shut down after a period of inactivity. Be careful to download any notebooks you wish to keep. When creating your own notebooks, including and running the following will bootstrap anydyce if it is not already installed: 1 2 3 4 5 6 7 8 9 10 11 12 13 # Install additional requirements if necessary import warnings with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) try : import anydyce except ( ImportError , ModuleNotFoundError ): requirements = [ \"anydyce~=0.2\" ] try : import piplite ; await piplite . install ( requirements ) except ImportError : import pip ; pip . main ([ \"install\" ] + requirements ) import anydyce Installation and use anydyce is available as a PyPI package and as source . anydyce.viz provides some rudimentary conveniences such as \u201cburst\u201d charts ( anydyce \u2019s take on donut charts). 1 2 3 4 5 6 >>> import matplotlib.pyplot >>> from dyce import H >>> from anydyce.viz import plot_burst >>> ax = matplotlib . pyplot . axes () >>> plot_burst ( ax , 2 @H ( 6 )) >>> matplotlib . pyplot . show () # doctest: +SKIP Source: plot_burst_1.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # ====================================================================================== # Copyright and other protections apply. Please see the accompanying LICENSE file for # rights and restrictions governing use of this software. All rights not expressly # waived or licensed are reserved. If that file is missing or appears to be modified # from its original, then please contact the author before viewing or using this # software in any capacity. # ====================================================================================== from __future__ import annotations from dyce import H from anydyce.viz import plot_burst def do_it ( style : str ) -> None : import matplotlib.pyplot ax = matplotlib . pyplot . axes () text_color = \"white\" if style == \"dark\" else \"black\" plot_burst ( ax , 2 @ H ( 6 ), text_color = text_color ) The outer ring can also be used to compare two histograms directly. Ever been curious how your four shiny new fudge dice stack up against your trusty ol\u2019 double six-siders? Well wonder no more! anydyce abides. 1 2 3 4 5 6 7 8 9 10 >>> df_4 = 4 @H (( - 1 , 0 , 1 )) >>> d6_2 = 2 @H ( 6 ) >>> ax = matplotlib . pyplot . axes () >>> plot_burst ( ... ax , ... df_4 , d6_2 , ... inner_cmap = \"turbo\" , ... alpha = 1.0 , ... ) >>> matplotlib . pyplot . show () # doctest: +SKIP Source: plot_burst_2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # ====================================================================================== # Copyright and other protections apply. Please see the accompanying LICENSE file for # rights and restrictions governing use of this software. All rights not expressly # waived or licensed are reserved. If that file is missing or appears to be modified # from its original, then please contact the author before viewing or using this # software in any capacity. # ====================================================================================== from __future__ import annotations from dyce import H from anydyce.viz import plot_burst def do_it ( style : str ) -> None : import matplotlib.pyplot df_4 = 4 @ H (( - 1 , 0 , 1 )) d6_2 = 2 @ H ( 6 ) ax = matplotlib . pyplot . axes () text_color = \"white\" if style == \"dark\" else \"black\" plot_burst ( ax , df_4 , d6_2 , inner_cmap = \"turbo\" , text_color = text_color , ) Labels can even be overridden for interesting, at-a-glance displays. Overrides apply counter-clockwise, starting from the 12 o\u2019clock position. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 >>> def d20formatter ( outcome , probability , h ) -> str : ... vals = { ... - 2 : \"crit. fail.\" , ... - 1 : \"fail.\" , ... 1 : \"succ.\" , ... 2 : \"crit. succ.\" , ... } ... return vals [ outcome ] >>> d20 = H ( 20 ) >>> ax = matplotlib . pyplot . axes () >>> plot_burst ( ax , h_inner = d20 , h_outer = H ({ ... - 2 : d20 . le ( 1 )[ 1 ], ... - 1 : d20 . within ( 2 , 14 )[ 0 ], ... 1 : d20 . within ( 15 , 19 )[ 0 ], ... 2 : d20 . ge ( 20 )[ 1 ], ... }), inner_cmap = \"RdYlBu_r\" , outer_formatter = d20formatter ) >>> matplotlib . pyplot . show () # doctest: +SKIP Source: plot_burst_3.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 # ====================================================================================== # Copyright and other protections apply. Please see the accompanying LICENSE file for # rights and restrictions governing use of this software. All rights not expressly # waived or licensed are reserved. If that file is missing or appears to be modified # from its original, then please contact the author before viewing or using this # software in any capacity. # ====================================================================================== from __future__ import annotations from fractions import Fraction from typing import Dict from dyce import H from numerary import RealLike from anydyce.viz import plot_burst def do_it ( style : str ) -> None : import matplotlib.pyplot def d20formatter ( outcome : RealLike , probability : Fraction , h : H ) -> str : vals : Dict [ RealLike , str ] = { - 2 : \"crit. fail.\" , - 1 : \"fail.\" , 1 : \"succ.\" , 2 : \"crit. succ.\" , } return vals [ outcome ] d20 = H ( 20 ) ax = matplotlib . pyplot . axes () text_color = \"white\" if style == \"dark\" else \"black\" plot_burst ( ax , h_inner = d20 , h_outer = H ( { - 2 : d20 . le ( 1 )[ 1 ], - 1 : d20 . within ( 2 , 14 )[ 0 ], 1 : d20 . within ( 15 , 19 )[ 0 ], 2 : d20 . ge ( 20 )[ 1 ], } ), inner_cmap = \"RdYlBu_r\" , outer_formatter = d20formatter , text_color = text_color , ) Requirements anydyce requires a relatively modern version of Python: CPython (3.8+) PyPy (CPython 3.8+ compatible) It has the following runtime dependencies: dyce for dice mechanic modeling ipywidgets for interactivity in Jupyter matplotlib for visualizing histograms and pools anydyce (and dyce ) leverage numerary for its opportunistic use of beartype . If you use beartype for type checking your code, but don\u2019t want anydyce , dyce , or numerary to use it internally, disable it with numerary \u2019s NUMERARY_BEARTYPE environment variable . See the hacking quick-start for additional development and testing dependencies. License anydyce is licensed under the MIT License . See the included LICENSE file for details. Source code is available on GitHub . Customers This could be you ! \ud83d\udc4b Do you have a project that uses dyce ? Let me know , and I\u2019ll promote it here! And don\u2019t forget to do your part in perpetuating gratuitous badge-ification! 1 2 3 4 <!-- Markdown --> As of version 1.1, HighRollin is [ ![dyce-powered ]( https://raw.githubusercontent.com/posita/dyce/latest/docs/dyce-powered.svg )][dyce-powered]! [ dyce-powered ]: https://posita.github.io/dyce/ \"dyce-powered!\" 1 2 3 4 5 6 7 8 9 .. reStructuredText - see https://docutils.sourceforge.io/docs/ref/rst/directives.html#image As of version 1.1, HighRollin is |dyce-powered|! .. |dyce-powered| image :: https://raw.githubusercontent.com/posita/dyce/latest/docs/dyce-powered.svg :align: top :target: https://posita.github.io/dyce/ :alt: dyce-powered 1 2 3 4 5 <!-- HTML --> As of version 1.1, HighRollin is < a href = \"https://posita.github.io/dyce/\" >< img src = \"https://raw.githubusercontent.com/posita/dyce/latest/docs/dyce-powered.svg\" alt = \"dyce-powered\" style = \"vertical-align: middle;\" ></ a > ! At some point this devolves into an exercise in chasing a diversity of very specific preferences. If you have a very specific need, dyce is fairly low level and should be able to integrate directly with whatever visualization context or package you prefer. That being said, I am always on the lookout for more intuitive or accessible visualizations and will eagerly explore ideas with you . \u21a9 Relies on external depedencies such as Binder or JupyterLite . (See Interactive quick start .) However, edits are not persisted. Notebooks can also be downloaded and shared as .ipynb files. \u21a9","title":"Introduction"},{"location":"#anydyce-visualization-tools-for-dyce","text":"anydyce exposes an interactive interface to dyce (the dice mechanic modeling library) in Jupyter similar to AnyDice . anydyce is licensed under the MIT License . See the accompanying LICENSE file for details. Non-experimental features should be considered stable. See the release notes for a summary of version-to-version changes. Source code is available on GitHub . If you find it lacking in any way, please don\u2019t hesitate to bring it to my attention .","title":"anydyce \u2013 visualization tools for dyce"},{"location":"#design-philosophy","text":"anydyce (currently) targets Matplotlib (both alone and within Jupyter). Support for additional visualization tools may be added in the future. It is intended as a convenience layer for those who benefit from simple interfaces with reasonable defaults and limited configurability. If you find they are too restrictive, or have any requests or ideas for improvements, let me know ! 1 If used within Jupyter, anydyce provides a high-level, interactive interface with functionality that echos AnyDice.","title":"Design philosophy"},{"location":"#comparison-to-anydice","text":"Feature anydyce AnyDice Shareable session URLs \u26a0\ufe0f Via third party 2 \u2705 Yes Modeling language \ud83d\udc0d Python Proprietary Computation time limit \u2705 No limit \u274c 5 seconds Configurable plots (including \u201cburst\u201d graphs) \u2705 Yes \u274c No Install and use third party libraries \u2705 Yes \u274c No Open source (install, run, and modify locally) \u2705 Yes \u274c No Advanced language features (memoization, nested functions, etc.) \u2705 Yes \u274c No","title":"Comparison to AnyDice"},{"location":"#interactive-quick-start","text":"Probably the easiest way to start tinkering with anydyce is with JupyterLite : The quickstart-local.sh script will create a local virtual environment to bootstrap a local Jupyter server with anydyce installed and open a web browser to the introduction notebook . Binder is another great resource that you can use to share notebooks from your Git repositories (including Gists ): JupyterLite and Binder may not save your work! JupyterLite attempts to make use of your browser\u2019s local storage for saving notebook changes. Browser environments vary, including how long local storage is persisted. Further, Binder loses all state once its instances shut down after a period of inactivity. Be careful to download any notebooks you wish to keep. When creating your own notebooks, including and running the following will bootstrap anydyce if it is not already installed: 1 2 3 4 5 6 7 8 9 10 11 12 13 # Install additional requirements if necessary import warnings with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) try : import anydyce except ( ImportError , ModuleNotFoundError ): requirements = [ \"anydyce~=0.2\" ] try : import piplite ; await piplite . install ( requirements ) except ImportError : import pip ; pip . main ([ \"install\" ] + requirements ) import anydyce","title":"Interactive quick start"},{"location":"#installation-and-use","text":"anydyce is available as a PyPI package and as source . anydyce.viz provides some rudimentary conveniences such as \u201cburst\u201d charts ( anydyce \u2019s take on donut charts). 1 2 3 4 5 6 >>> import matplotlib.pyplot >>> from dyce import H >>> from anydyce.viz import plot_burst >>> ax = matplotlib . pyplot . axes () >>> plot_burst ( ax , 2 @H ( 6 )) >>> matplotlib . pyplot . show () # doctest: +SKIP Source: plot_burst_1.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # ====================================================================================== # Copyright and other protections apply. Please see the accompanying LICENSE file for # rights and restrictions governing use of this software. All rights not expressly # waived or licensed are reserved. If that file is missing or appears to be modified # from its original, then please contact the author before viewing or using this # software in any capacity. # ====================================================================================== from __future__ import annotations from dyce import H from anydyce.viz import plot_burst def do_it ( style : str ) -> None : import matplotlib.pyplot ax = matplotlib . pyplot . axes () text_color = \"white\" if style == \"dark\" else \"black\" plot_burst ( ax , 2 @ H ( 6 ), text_color = text_color ) The outer ring can also be used to compare two histograms directly. Ever been curious how your four shiny new fudge dice stack up against your trusty ol\u2019 double six-siders? Well wonder no more! anydyce abides. 1 2 3 4 5 6 7 8 9 10 >>> df_4 = 4 @H (( - 1 , 0 , 1 )) >>> d6_2 = 2 @H ( 6 ) >>> ax = matplotlib . pyplot . axes () >>> plot_burst ( ... ax , ... df_4 , d6_2 , ... inner_cmap = \"turbo\" , ... alpha = 1.0 , ... ) >>> matplotlib . pyplot . show () # doctest: +SKIP Source: plot_burst_2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # ====================================================================================== # Copyright and other protections apply. Please see the accompanying LICENSE file for # rights and restrictions governing use of this software. All rights not expressly # waived or licensed are reserved. If that file is missing or appears to be modified # from its original, then please contact the author before viewing or using this # software in any capacity. # ====================================================================================== from __future__ import annotations from dyce import H from anydyce.viz import plot_burst def do_it ( style : str ) -> None : import matplotlib.pyplot df_4 = 4 @ H (( - 1 , 0 , 1 )) d6_2 = 2 @ H ( 6 ) ax = matplotlib . pyplot . axes () text_color = \"white\" if style == \"dark\" else \"black\" plot_burst ( ax , df_4 , d6_2 , inner_cmap = \"turbo\" , text_color = text_color , ) Labels can even be overridden for interesting, at-a-glance displays. Overrides apply counter-clockwise, starting from the 12 o\u2019clock position. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 >>> def d20formatter ( outcome , probability , h ) -> str : ... vals = { ... - 2 : \"crit. fail.\" , ... - 1 : \"fail.\" , ... 1 : \"succ.\" , ... 2 : \"crit. succ.\" , ... } ... return vals [ outcome ] >>> d20 = H ( 20 ) >>> ax = matplotlib . pyplot . axes () >>> plot_burst ( ax , h_inner = d20 , h_outer = H ({ ... - 2 : d20 . le ( 1 )[ 1 ], ... - 1 : d20 . within ( 2 , 14 )[ 0 ], ... 1 : d20 . within ( 15 , 19 )[ 0 ], ... 2 : d20 . ge ( 20 )[ 1 ], ... }), inner_cmap = \"RdYlBu_r\" , outer_formatter = d20formatter ) >>> matplotlib . pyplot . show () # doctest: +SKIP Source: plot_burst_3.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 # ====================================================================================== # Copyright and other protections apply. Please see the accompanying LICENSE file for # rights and restrictions governing use of this software. All rights not expressly # waived or licensed are reserved. If that file is missing or appears to be modified # from its original, then please contact the author before viewing or using this # software in any capacity. # ====================================================================================== from __future__ import annotations from fractions import Fraction from typing import Dict from dyce import H from numerary import RealLike from anydyce.viz import plot_burst def do_it ( style : str ) -> None : import matplotlib.pyplot def d20formatter ( outcome : RealLike , probability : Fraction , h : H ) -> str : vals : Dict [ RealLike , str ] = { - 2 : \"crit. fail.\" , - 1 : \"fail.\" , 1 : \"succ.\" , 2 : \"crit. succ.\" , } return vals [ outcome ] d20 = H ( 20 ) ax = matplotlib . pyplot . axes () text_color = \"white\" if style == \"dark\" else \"black\" plot_burst ( ax , h_inner = d20 , h_outer = H ( { - 2 : d20 . le ( 1 )[ 1 ], - 1 : d20 . within ( 2 , 14 )[ 0 ], 1 : d20 . within ( 15 , 19 )[ 0 ], 2 : d20 . ge ( 20 )[ 1 ], } ), inner_cmap = \"RdYlBu_r\" , outer_formatter = d20formatter , text_color = text_color , )","title":"Installation and use"},{"location":"#requirements","text":"anydyce requires a relatively modern version of Python: CPython (3.8+) PyPy (CPython 3.8+ compatible) It has the following runtime dependencies: dyce for dice mechanic modeling ipywidgets for interactivity in Jupyter matplotlib for visualizing histograms and pools anydyce (and dyce ) leverage numerary for its opportunistic use of beartype . If you use beartype for type checking your code, but don\u2019t want anydyce , dyce , or numerary to use it internally, disable it with numerary \u2019s NUMERARY_BEARTYPE environment variable . See the hacking quick-start for additional development and testing dependencies.","title":"Requirements"},{"location":"#license","text":"anydyce is licensed under the MIT License . See the included LICENSE file for details. Source code is available on GitHub .","title":"License"},{"location":"#customers","text":"This could be you ! \ud83d\udc4b Do you have a project that uses dyce ? Let me know , and I\u2019ll promote it here! And don\u2019t forget to do your part in perpetuating gratuitous badge-ification! 1 2 3 4 <!-- Markdown --> As of version 1.1, HighRollin is [ ![dyce-powered ]( https://raw.githubusercontent.com/posita/dyce/latest/docs/dyce-powered.svg )][dyce-powered]! [ dyce-powered ]: https://posita.github.io/dyce/ \"dyce-powered!\" 1 2 3 4 5 6 7 8 9 .. reStructuredText - see https://docutils.sourceforge.io/docs/ref/rst/directives.html#image As of version 1.1, HighRollin is |dyce-powered|! .. |dyce-powered| image :: https://raw.githubusercontent.com/posita/dyce/latest/docs/dyce-powered.svg :align: top :target: https://posita.github.io/dyce/ :alt: dyce-powered 1 2 3 4 5 <!-- HTML --> As of version 1.1, HighRollin is < a href = \"https://posita.github.io/dyce/\" >< img src = \"https://raw.githubusercontent.com/posita/dyce/latest/docs/dyce-powered.svg\" alt = \"dyce-powered\" style = \"vertical-align: middle;\" ></ a > ! At some point this devolves into an exercise in chasing a diversity of very specific preferences. If you have a very specific need, dyce is fairly low level and should be able to integrate directly with whatever visualization context or package you prefer. That being said, I am always on the lookout for more intuitive or accessible visualizations and will eagerly explore ideas with you . \u21a9 Relies on external depedencies such as Binder or JupyterLite . (See Interactive quick start .) However, edits are not persisted. Notebooks can also be downloaded and shared as .ipynb files. \u21a9","title":"Customers"},{"location":"anydyce/","text":"anydyce package reference HPlotterChooser Experimental This class should be considered experimental and may change or disappear in future versions. A controller for coordinating the display of a histogram data set and selection of one or more plotters as well as triggering updates in response to either control or data changes. All parameters for the initializer are optional. histogram_specs is the histogram data set which defaults to an empty tuple. The histogram data set can also be replaced vi the update_hs method. Plotter controls (including the selection tabs) are contained within an accordion interface. If controls_expanded is True , the accordion is initially expanded for the user. If it is False , it is initially collapsed. plot_widgets allows object creators to customize the available control widgets, including their initial values. It defaults to None which results in a fresh PlotWidgets object being created during construction. plotters_or_factories allows overriding which plotters are available. The default is to provide factories for all plotters currently available in anydyce . selected_name is the name of the plotter to be displayed initially. It must match the HPlotter.NAME property of an available plotter provided by the plotters_or_factories parameter. Source code in anydyce/viz.py 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 class HPlotterChooser : r \"\"\" !!! warning \"Experimental\" This class should be considered experimental and may change or disappear in future versions. A controller for coordinating the display of a histogram data set and selection of one or more plotters as well as triggering updates in response to either control or data changes. All parameters for the [initializer][anydyce.viz.HPlotterChooser.__init__] are optional. *histogram_specs* is the histogram data set which defaults to an empty tuple. The histogram data set can also be replaced vi the [``update_hs``][anydyce.viz.HPlotterChooser.update_hs] method. Plotter controls (including the selection tabs) are contained within an accordion interface. If *controls_expanded* is ``#!python True``, the accordion is initially expanded for the user. If it is ``#!python False``, it is initially collapsed. *plot_widgets* allows object creators to customize the available control widgets, including their initial values. It defaults to ``#!python None`` which results in a fresh [``PlotWidgets``][anydyce.viz.PlotWidgets] object being created during construction. *plotters_or_factories* allows overriding which plotters are available. The default is to provide factories for all plotters currently available in ``anydyce``. *selected_name* is the name of the plotter to be displayed initially. It must match the [``HPlotter.NAME`` property][anydyce.viz.HPlotter.NAME] of an available plotter provided by the *plotters_or_factories* parameter. \"\"\" @beartype def __init__ ( self , histogram_specs : Iterable [ Union [ HLikeT , Tuple [ str , HLikeT ], Tuple [ str , HLikeT , Optional [ HLikeT ]]] ] = (), * , controls_expanded : bool = False , plot_widgets : Optional [ PlotWidgets ] = None , plotters_or_factories : Iterable [ Union [ HPlotter , HPlotterFactoryT ]] = ( BurstHPlotter , LineHPlotter , BarHPlotter , ScatterHPlotter , HorizontalBarHPlotter , ), selected_name : Optional [ str ] = None , ): plotters = tuple ( plotter if isinstance ( plotter , HPlotter ) else plotter () for plotter in plotters_or_factories ) if not plotters : raise ValueError ( \"must provide at least one plotter\" ) self . _plotters_by_name : Mapping [ str , HPlotter ] = { plotter . NAME : plotter for plotter in plotters } assert self . _plotters_by_name if selected_name is None : selected_name = next ( iter ( self . _plotters_by_name )) if selected_name is not None and selected_name not in self . _plotters_by_name : raise ValueError ( f \"selected_name { selected_name !r} does not match any plotter\" ) if len ( self . _plotters_by_name ) < len ( plotters ): duplicate_names = \", \" . join ( repr ( plotter_name ) for plotter_name , count in Counter ( plotter . NAME for plotter in plotters ) . items () if count > 1 ) warnings . warn ( f \"ignoring redundant plotters with duplicate names { duplicate_names } \" , category = RuntimeWarning , ) if plot_widgets is None : plot_widgets = PlotWidgets () self . _plot_widgets = plot_widgets self . _layouts_by_name : Mapping [ str , widgets . Widget ] = {} for plotter_name , plotter in self . _plotters_by_name . items (): self . _layouts_by_name [ plotter_name ] = plotter . layout ( plot_widgets ) self . _hs : Tuple [ Tuple [ str , H , Optional [ H ]], ... ] = () self . _hs_culled : Tuple [ Tuple [ str , H , Optional [ H ]], ... ] = () self . _cutoff : Optional [ float ] = None self . _csv_download_link = HTML () self . update_hs ( histogram_specs ) self . _selected_plotter : Optional [ HPlotter ] tab_names = tuple ( self . _plotters_by_name . keys ()) chooser_tab = widgets . Tab ( children = tuple ( self . _layouts_by_name . values ()), selected_index = 0 if selected_name is None else tab_names . index ( selected_name ), titles = tab_names , ) def _handle_tab ( change ) -> None : assert change [ \"name\" ] == \"selected_index\" self . _selected_plotter = next ( islice ( self . _plotters_by_name . values (), change [ \"new\" ], None ) ) self . _trigger_update () chooser_tab . observe ( _handle_tab , names = \"selected_index\" ) self . _selected_plotter = next ( islice ( self . _plotters_by_name . values (), chooser_tab . selected_index , None ) ) self . _out = widgets . VBox ( [ widgets . Accordion ( children = [ chooser_tab ], titles = [ \"Plot Controls\" ], selected_index = 0 if controls_expanded else None , ), widgets . interactive_output ( self . plot , self . _plot_widgets . asdict ()), ] ) @beartype def interact ( self ) -> None : r \"\"\" Displays the container responsible for selecting which plotter is used. \"\"\" display ( self . _out ) @beartype # @debounce def plot ( self , ** settings ) -> None : r \"\"\" Callback for updating the visualization in response to configuration or data changes. *settings* are the current values from all control widgets. (See [``PlotWidgets``][anydyce.viz.PlotWidgets].) \"\"\" cutoff = ( self . _plot_widgets . cutoff . value if self . _plot_widgets . enable_cutoff . value else None ) if self . _cutoff != cutoff : self . _cutoff = cutoff self . _cull_data () display ( self . _csv_download_link ) matplotlib . rcParams . update ( matplotlib . rcParamsDefault ) with matplotlib . style . context ( settings [ \"plot_style\" ]): fig = matplotlib . pyplot . figure ( figsize = ( settings [ \"scale\" ], settings [ \"scale\" ] / 16 * 9 ) ) if self . _selected_plotter is not None : self . _selected_plotter . plot ( fig , self . _hs_culled , cast ( SettingsDict , settings ) ) matplotlib . pyplot . show () @beartype def update_hs ( self , histogram_specs : Iterable [ Union [ HLikeT , Tuple [ str , HLikeT ], Tuple [ str , HLikeT , Optional [ HLikeT ]]] ], ) -> None : r \"\"\" Triggers an update to the histogram data. *histogram_specs* is an iterable of either a single [``HLikeT``][anydyce.viz.HLikeT] object, a two-tuple of a name and a primary ``HLikeT`` object, or a three-tuple of a name, a primary ``HLikeT`` object, and an optional secondary ``HLikeT`` object (``#!python None`` if omitted). \"\"\" self . _hs = _histogram_specs_to_h_tuples ( histogram_specs , cutoff = None ) self . _csv_download_link = _csv_download_link ( self . _hs ) self . _plot_widgets . burst_swap . disabled = all ( h_outer is None or h_inner == h_outer for _ , h_inner , h_outer in self . _hs ) self . _cull_data () self . _trigger_update () @beartype def _cull_data ( self ) -> None : self . _hs_culled = _histogram_specs_to_h_tuples ( self . _hs , self . _cutoff ) @beartype def _trigger_update ( self ) -> None : self . _plot_widgets . _rev_no . value += 1 __init__ ( histogram_specs : Iterable [ Union [ HLikeT , Tuple [ str , HLikeT ], Tuple [ str , HLikeT , Optional [ HLikeT ]]]] = (), * , controls_expanded : bool = False , plot_widgets : Optional [ PlotWidgets ] = None , plotters_or_factories : Iterable [ Union [ HPlotter , HPlotterFactoryT ]] = ( BurstHPlotter , LineHPlotter , BarHPlotter , ScatterHPlotter , HorizontalBarHPlotter ), selected_name : Optional [ str ] = None ) Source code in anydyce/viz.py 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 @beartype def __init__ ( self , histogram_specs : Iterable [ Union [ HLikeT , Tuple [ str , HLikeT ], Tuple [ str , HLikeT , Optional [ HLikeT ]]] ] = (), * , controls_expanded : bool = False , plot_widgets : Optional [ PlotWidgets ] = None , plotters_or_factories : Iterable [ Union [ HPlotter , HPlotterFactoryT ]] = ( BurstHPlotter , LineHPlotter , BarHPlotter , ScatterHPlotter , HorizontalBarHPlotter , ), selected_name : Optional [ str ] = None , ): plotters = tuple ( plotter if isinstance ( plotter , HPlotter ) else plotter () for plotter in plotters_or_factories ) if not plotters : raise ValueError ( \"must provide at least one plotter\" ) self . _plotters_by_name : Mapping [ str , HPlotter ] = { plotter . NAME : plotter for plotter in plotters } assert self . _plotters_by_name if selected_name is None : selected_name = next ( iter ( self . _plotters_by_name )) if selected_name is not None and selected_name not in self . _plotters_by_name : raise ValueError ( f \"selected_name { selected_name !r} does not match any plotter\" ) if len ( self . _plotters_by_name ) < len ( plotters ): duplicate_names = \", \" . join ( repr ( plotter_name ) for plotter_name , count in Counter ( plotter . NAME for plotter in plotters ) . items () if count > 1 ) warnings . warn ( f \"ignoring redundant plotters with duplicate names { duplicate_names } \" , category = RuntimeWarning , ) if plot_widgets is None : plot_widgets = PlotWidgets () self . _plot_widgets = plot_widgets self . _layouts_by_name : Mapping [ str , widgets . Widget ] = {} for plotter_name , plotter in self . _plotters_by_name . items (): self . _layouts_by_name [ plotter_name ] = plotter . layout ( plot_widgets ) self . _hs : Tuple [ Tuple [ str , H , Optional [ H ]], ... ] = () self . _hs_culled : Tuple [ Tuple [ str , H , Optional [ H ]], ... ] = () self . _cutoff : Optional [ float ] = None self . _csv_download_link = HTML () self . update_hs ( histogram_specs ) self . _selected_plotter : Optional [ HPlotter ] tab_names = tuple ( self . _plotters_by_name . keys ()) chooser_tab = widgets . Tab ( children = tuple ( self . _layouts_by_name . values ()), selected_index = 0 if selected_name is None else tab_names . index ( selected_name ), titles = tab_names , ) def _handle_tab ( change ) -> None : assert change [ \"name\" ] == \"selected_index\" self . _selected_plotter = next ( islice ( self . _plotters_by_name . values (), change [ \"new\" ], None ) ) self . _trigger_update () chooser_tab . observe ( _handle_tab , names = \"selected_index\" ) self . _selected_plotter = next ( islice ( self . _plotters_by_name . values (), chooser_tab . selected_index , None ) ) self . _out = widgets . VBox ( [ widgets . Accordion ( children = [ chooser_tab ], titles = [ \"Plot Controls\" ], selected_index = 0 if controls_expanded else None , ), widgets . interactive_output ( self . plot , self . _plot_widgets . asdict ()), ] ) interact () -> None Displays the container responsible for selecting which plotter is used. Source code in anydyce/viz.py 1011 1012 1013 1014 1015 1016 @beartype def interact ( self ) -> None : r \"\"\" Displays the container responsible for selecting which plotter is used. \"\"\" display ( self . _out ) plot ( ** settings ) -> None Callback for updating the visualization in response to configuration or data changes. settings are the current values from all control widgets. (See PlotWidgets .) Source code in anydyce/viz.py 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 @beartype # @debounce def plot ( self , ** settings ) -> None : r \"\"\" Callback for updating the visualization in response to configuration or data changes. *settings* are the current values from all control widgets. (See [``PlotWidgets``][anydyce.viz.PlotWidgets].) \"\"\" cutoff = ( self . _plot_widgets . cutoff . value if self . _plot_widgets . enable_cutoff . value else None ) if self . _cutoff != cutoff : self . _cutoff = cutoff self . _cull_data () display ( self . _csv_download_link ) matplotlib . rcParams . update ( matplotlib . rcParamsDefault ) with matplotlib . style . context ( settings [ \"plot_style\" ]): fig = matplotlib . pyplot . figure ( figsize = ( settings [ \"scale\" ], settings [ \"scale\" ] / 16 * 9 ) ) if self . _selected_plotter is not None : self . _selected_plotter . plot ( fig , self . _hs_culled , cast ( SettingsDict , settings ) ) matplotlib . pyplot . show () update_hs ( histogram_specs : Iterable [ Union [ HLikeT , Tuple [ str , HLikeT ], Tuple [ str , HLikeT , Optional [ HLikeT ]]]]) -> None Triggers an update to the histogram data. histogram_specs is an iterable of either a single HLikeT object, a two-tuple of a name and a primary HLikeT object, or a three-tuple of a name, a primary HLikeT object, and an optional secondary HLikeT object ( None if omitted). Source code in anydyce/viz.py 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 @beartype def update_hs ( self , histogram_specs : Iterable [ Union [ HLikeT , Tuple [ str , HLikeT ], Tuple [ str , HLikeT , Optional [ HLikeT ]]] ], ) -> None : r \"\"\" Triggers an update to the histogram data. *histogram_specs* is an iterable of either a single [``HLikeT``][anydyce.viz.HLikeT] object, a two-tuple of a name and a primary ``HLikeT`` object, or a three-tuple of a name, a primary ``HLikeT`` object, and an optional secondary ``HLikeT`` object (``#!python None`` if omitted). \"\"\" self . _hs = _histogram_specs_to_h_tuples ( histogram_specs , cutoff = None ) self . _csv_download_link = _csv_download_link ( self . _hs ) self . _plot_widgets . burst_swap . disabled = all ( h_outer is None or h_inner == h_outer for _ , h_inner , h_outer in self . _hs ) self . _cull_data () self . _trigger_update () jupyter_visualize ( histogram_specs : Iterable [ Union [ HLikeT , Tuple [ str , HLikeT ], Tuple [ str , HLikeT , Optional [ HLikeT ]]]], * , controls_expanded : bool = True , initial_alpha : float = DEFAULT_ALPHA , initial_burst_cmap_inner : str = DEFAULT_CMAP_BURST_INNER , initial_burst_cmap_link : bool = True , initial_burst_cmap_outer : str = DEFAULT_CMAP_BURST_OUTER , initial_burst_color_bg : str = 'white' , initial_burst_color_text : str = DEFAULT_COLOR_TEXT , initial_burst_swap : bool = False , initial_burst_zero_fill_normalize : bool = False , initial_enable_cutoff : bool = False , initial_graph_type : TraditionalPlotType = TraditionalPlotType . NORMAL , initial_markers : str = 'oX^v><dP' , initial_plot_style : str = 'bmh' , initial_show_shadow : bool = False , selected_name : Optional [ str ] = None ) Experimental This function should be considered experimental and may change or disappear in future versions. Takes a list of one or more histogram_specs and produces an interactive visualization reminiscent of AnyDice , but with some extra goodies. Each item in histogram_specs can be a dyce . H object, a 2-tuple, or a 3-tuple. 2-tuples are in the format ( str , H ) , where str is a name or description that will be used to identify the accompanying H object where it appears in the visualization. 3-tuples are in the format ( str , H , H ) . The second H object is used for the interior ring in \u201cburst\u201d break-out graphs, but otherwise ignored. The \u201cPowered by the Apocalypse (PbtA)\u201d example in the introduction notebook should give an idea of the effect. (See Interactive quick start .) Parameters have the same meanings as with HPlotterChooser and PlotWidgets . Source code in anydyce/viz.py 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 @experimental @beartype def jupyter_visualize ( histogram_specs : Iterable [ Union [ HLikeT , Tuple [ str , HLikeT ], Tuple [ str , HLikeT , Optional [ HLikeT ]]] ], * , controls_expanded : bool = True , initial_alpha : float = DEFAULT_ALPHA , initial_burst_cmap_inner : str = DEFAULT_CMAP_BURST_INNER , initial_burst_cmap_link : bool = True , initial_burst_cmap_outer : str = DEFAULT_CMAP_BURST_OUTER , initial_burst_color_bg : str = \"white\" , initial_burst_color_text : str = DEFAULT_COLOR_TEXT , initial_burst_swap : bool = False , initial_burst_zero_fill_normalize : bool = False , initial_enable_cutoff : bool = False , initial_graph_type : TraditionalPlotType = TraditionalPlotType . NORMAL , initial_markers : str = \"oX^v><dP\" , initial_plot_style : str = \"bmh\" , initial_show_shadow : bool = False , selected_name : Optional [ str ] = None , ): r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Takes a list of one or more *histogram_specs* and produces an interactive visualization reminiscent of [AnyDice](https://anydice.com/), but with some extra goodies. Each item in *histogram_specs* can be a ``#!python dyce.H`` object, a 2-tuple, or a 3-tuple. 2-tuples are in the format ``#!python (str, H)``, where ``#!python str`` is a name or description that will be used to identify the accompanying ``#!python H`` object where it appears in the visualization. 3-tuples are in the format ``#!python (str, H, H)``. The second ``#!python H`` object is used for the interior ring in \u201cburst\u201d break-out graphs, but otherwise ignored. The \u201cPowered by the _Apocalypse_ (PbtA)\u201d example in the introduction notebook should give an idea of the effect. (See [Interactive quick start](index.md#interactive-quick-start).) Parameters have the same meanings as with [``HPlotterChooser``][anydyce.viz.HPlotterChooser] and [``PlotWidgets``][anydyce.viz.PlotWidgets]. \"\"\" plotter_chooser = HPlotterChooser ( histogram_specs , plot_widgets = PlotWidgets ( initial_alpha = initial_alpha , initial_burst_cmap_inner = initial_burst_cmap_inner , initial_burst_cmap_link = initial_burst_cmap_link , initial_burst_cmap_outer = initial_burst_cmap_outer , initial_burst_color_bg = initial_burst_color_bg , initial_burst_color_text = initial_burst_color_text , initial_burst_swap = initial_burst_swap , initial_burst_zero_fill_normalize = initial_burst_zero_fill_normalize , initial_enable_cutoff = initial_enable_cutoff , initial_graph_type = initial_graph_type , initial_markers = initial_markers , initial_plot_style = initial_plot_style , initial_show_shadow = initial_show_shadow , ), selected_name = selected_name , ) plotter_chooser . interact ()","title":"<tt>anydyce</tt>"},{"location":"anydyce/#anydyce-package-reference","text":"","title":"anydyce package reference"},{"location":"anydyce/#anydyce.viz.HPlotterChooser","text":"Experimental This class should be considered experimental and may change or disappear in future versions. A controller for coordinating the display of a histogram data set and selection of one or more plotters as well as triggering updates in response to either control or data changes. All parameters for the initializer are optional. histogram_specs is the histogram data set which defaults to an empty tuple. The histogram data set can also be replaced vi the update_hs method. Plotter controls (including the selection tabs) are contained within an accordion interface. If controls_expanded is True , the accordion is initially expanded for the user. If it is False , it is initially collapsed. plot_widgets allows object creators to customize the available control widgets, including their initial values. It defaults to None which results in a fresh PlotWidgets object being created during construction. plotters_or_factories allows overriding which plotters are available. The default is to provide factories for all plotters currently available in anydyce . selected_name is the name of the plotter to be displayed initially. It must match the HPlotter.NAME property of an available plotter provided by the plotters_or_factories parameter. Source code in anydyce/viz.py 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 class HPlotterChooser : r \"\"\" !!! warning \"Experimental\" This class should be considered experimental and may change or disappear in future versions. A controller for coordinating the display of a histogram data set and selection of one or more plotters as well as triggering updates in response to either control or data changes. All parameters for the [initializer][anydyce.viz.HPlotterChooser.__init__] are optional. *histogram_specs* is the histogram data set which defaults to an empty tuple. The histogram data set can also be replaced vi the [``update_hs``][anydyce.viz.HPlotterChooser.update_hs] method. Plotter controls (including the selection tabs) are contained within an accordion interface. If *controls_expanded* is ``#!python True``, the accordion is initially expanded for the user. If it is ``#!python False``, it is initially collapsed. *plot_widgets* allows object creators to customize the available control widgets, including their initial values. It defaults to ``#!python None`` which results in a fresh [``PlotWidgets``][anydyce.viz.PlotWidgets] object being created during construction. *plotters_or_factories* allows overriding which plotters are available. The default is to provide factories for all plotters currently available in ``anydyce``. *selected_name* is the name of the plotter to be displayed initially. It must match the [``HPlotter.NAME`` property][anydyce.viz.HPlotter.NAME] of an available plotter provided by the *plotters_or_factories* parameter. \"\"\" @beartype def __init__ ( self , histogram_specs : Iterable [ Union [ HLikeT , Tuple [ str , HLikeT ], Tuple [ str , HLikeT , Optional [ HLikeT ]]] ] = (), * , controls_expanded : bool = False , plot_widgets : Optional [ PlotWidgets ] = None , plotters_or_factories : Iterable [ Union [ HPlotter , HPlotterFactoryT ]] = ( BurstHPlotter , LineHPlotter , BarHPlotter , ScatterHPlotter , HorizontalBarHPlotter , ), selected_name : Optional [ str ] = None , ): plotters = tuple ( plotter if isinstance ( plotter , HPlotter ) else plotter () for plotter in plotters_or_factories ) if not plotters : raise ValueError ( \"must provide at least one plotter\" ) self . _plotters_by_name : Mapping [ str , HPlotter ] = { plotter . NAME : plotter for plotter in plotters } assert self . _plotters_by_name if selected_name is None : selected_name = next ( iter ( self . _plotters_by_name )) if selected_name is not None and selected_name not in self . _plotters_by_name : raise ValueError ( f \"selected_name { selected_name !r} does not match any plotter\" ) if len ( self . _plotters_by_name ) < len ( plotters ): duplicate_names = \", \" . join ( repr ( plotter_name ) for plotter_name , count in Counter ( plotter . NAME for plotter in plotters ) . items () if count > 1 ) warnings . warn ( f \"ignoring redundant plotters with duplicate names { duplicate_names } \" , category = RuntimeWarning , ) if plot_widgets is None : plot_widgets = PlotWidgets () self . _plot_widgets = plot_widgets self . _layouts_by_name : Mapping [ str , widgets . Widget ] = {} for plotter_name , plotter in self . _plotters_by_name . items (): self . _layouts_by_name [ plotter_name ] = plotter . layout ( plot_widgets ) self . _hs : Tuple [ Tuple [ str , H , Optional [ H ]], ... ] = () self . _hs_culled : Tuple [ Tuple [ str , H , Optional [ H ]], ... ] = () self . _cutoff : Optional [ float ] = None self . _csv_download_link = HTML () self . update_hs ( histogram_specs ) self . _selected_plotter : Optional [ HPlotter ] tab_names = tuple ( self . _plotters_by_name . keys ()) chooser_tab = widgets . Tab ( children = tuple ( self . _layouts_by_name . values ()), selected_index = 0 if selected_name is None else tab_names . index ( selected_name ), titles = tab_names , ) def _handle_tab ( change ) -> None : assert change [ \"name\" ] == \"selected_index\" self . _selected_plotter = next ( islice ( self . _plotters_by_name . values (), change [ \"new\" ], None ) ) self . _trigger_update () chooser_tab . observe ( _handle_tab , names = \"selected_index\" ) self . _selected_plotter = next ( islice ( self . _plotters_by_name . values (), chooser_tab . selected_index , None ) ) self . _out = widgets . VBox ( [ widgets . Accordion ( children = [ chooser_tab ], titles = [ \"Plot Controls\" ], selected_index = 0 if controls_expanded else None , ), widgets . interactive_output ( self . plot , self . _plot_widgets . asdict ()), ] ) @beartype def interact ( self ) -> None : r \"\"\" Displays the container responsible for selecting which plotter is used. \"\"\" display ( self . _out ) @beartype # @debounce def plot ( self , ** settings ) -> None : r \"\"\" Callback for updating the visualization in response to configuration or data changes. *settings* are the current values from all control widgets. (See [``PlotWidgets``][anydyce.viz.PlotWidgets].) \"\"\" cutoff = ( self . _plot_widgets . cutoff . value if self . _plot_widgets . enable_cutoff . value else None ) if self . _cutoff != cutoff : self . _cutoff = cutoff self . _cull_data () display ( self . _csv_download_link ) matplotlib . rcParams . update ( matplotlib . rcParamsDefault ) with matplotlib . style . context ( settings [ \"plot_style\" ]): fig = matplotlib . pyplot . figure ( figsize = ( settings [ \"scale\" ], settings [ \"scale\" ] / 16 * 9 ) ) if self . _selected_plotter is not None : self . _selected_plotter . plot ( fig , self . _hs_culled , cast ( SettingsDict , settings ) ) matplotlib . pyplot . show () @beartype def update_hs ( self , histogram_specs : Iterable [ Union [ HLikeT , Tuple [ str , HLikeT ], Tuple [ str , HLikeT , Optional [ HLikeT ]]] ], ) -> None : r \"\"\" Triggers an update to the histogram data. *histogram_specs* is an iterable of either a single [``HLikeT``][anydyce.viz.HLikeT] object, a two-tuple of a name and a primary ``HLikeT`` object, or a three-tuple of a name, a primary ``HLikeT`` object, and an optional secondary ``HLikeT`` object (``#!python None`` if omitted). \"\"\" self . _hs = _histogram_specs_to_h_tuples ( histogram_specs , cutoff = None ) self . _csv_download_link = _csv_download_link ( self . _hs ) self . _plot_widgets . burst_swap . disabled = all ( h_outer is None or h_inner == h_outer for _ , h_inner , h_outer in self . _hs ) self . _cull_data () self . _trigger_update () @beartype def _cull_data ( self ) -> None : self . _hs_culled = _histogram_specs_to_h_tuples ( self . _hs , self . _cutoff ) @beartype def _trigger_update ( self ) -> None : self . _plot_widgets . _rev_no . value += 1","title":"HPlotterChooser"},{"location":"anydyce/#anydyce.viz.HPlotterChooser.__init__","text":"Source code in anydyce/viz.py 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 @beartype def __init__ ( self , histogram_specs : Iterable [ Union [ HLikeT , Tuple [ str , HLikeT ], Tuple [ str , HLikeT , Optional [ HLikeT ]]] ] = (), * , controls_expanded : bool = False , plot_widgets : Optional [ PlotWidgets ] = None , plotters_or_factories : Iterable [ Union [ HPlotter , HPlotterFactoryT ]] = ( BurstHPlotter , LineHPlotter , BarHPlotter , ScatterHPlotter , HorizontalBarHPlotter , ), selected_name : Optional [ str ] = None , ): plotters = tuple ( plotter if isinstance ( plotter , HPlotter ) else plotter () for plotter in plotters_or_factories ) if not plotters : raise ValueError ( \"must provide at least one plotter\" ) self . _plotters_by_name : Mapping [ str , HPlotter ] = { plotter . NAME : plotter for plotter in plotters } assert self . _plotters_by_name if selected_name is None : selected_name = next ( iter ( self . _plotters_by_name )) if selected_name is not None and selected_name not in self . _plotters_by_name : raise ValueError ( f \"selected_name { selected_name !r} does not match any plotter\" ) if len ( self . _plotters_by_name ) < len ( plotters ): duplicate_names = \", \" . join ( repr ( plotter_name ) for plotter_name , count in Counter ( plotter . NAME for plotter in plotters ) . items () if count > 1 ) warnings . warn ( f \"ignoring redundant plotters with duplicate names { duplicate_names } \" , category = RuntimeWarning , ) if plot_widgets is None : plot_widgets = PlotWidgets () self . _plot_widgets = plot_widgets self . _layouts_by_name : Mapping [ str , widgets . Widget ] = {} for plotter_name , plotter in self . _plotters_by_name . items (): self . _layouts_by_name [ plotter_name ] = plotter . layout ( plot_widgets ) self . _hs : Tuple [ Tuple [ str , H , Optional [ H ]], ... ] = () self . _hs_culled : Tuple [ Tuple [ str , H , Optional [ H ]], ... ] = () self . _cutoff : Optional [ float ] = None self . _csv_download_link = HTML () self . update_hs ( histogram_specs ) self . _selected_plotter : Optional [ HPlotter ] tab_names = tuple ( self . _plotters_by_name . keys ()) chooser_tab = widgets . Tab ( children = tuple ( self . _layouts_by_name . values ()), selected_index = 0 if selected_name is None else tab_names . index ( selected_name ), titles = tab_names , ) def _handle_tab ( change ) -> None : assert change [ \"name\" ] == \"selected_index\" self . _selected_plotter = next ( islice ( self . _plotters_by_name . values (), change [ \"new\" ], None ) ) self . _trigger_update () chooser_tab . observe ( _handle_tab , names = \"selected_index\" ) self . _selected_plotter = next ( islice ( self . _plotters_by_name . values (), chooser_tab . selected_index , None ) ) self . _out = widgets . VBox ( [ widgets . Accordion ( children = [ chooser_tab ], titles = [ \"Plot Controls\" ], selected_index = 0 if controls_expanded else None , ), widgets . interactive_output ( self . plot , self . _plot_widgets . asdict ()), ] )","title":"__init__()"},{"location":"anydyce/#anydyce.viz.HPlotterChooser.interact","text":"Displays the container responsible for selecting which plotter is used. Source code in anydyce/viz.py 1011 1012 1013 1014 1015 1016 @beartype def interact ( self ) -> None : r \"\"\" Displays the container responsible for selecting which plotter is used. \"\"\" display ( self . _out )","title":"interact()"},{"location":"anydyce/#anydyce.viz.HPlotterChooser.plot","text":"Callback for updating the visualization in response to configuration or data changes. settings are the current values from all control widgets. (See PlotWidgets .) Source code in anydyce/viz.py 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 @beartype # @debounce def plot ( self , ** settings ) -> None : r \"\"\" Callback for updating the visualization in response to configuration or data changes. *settings* are the current values from all control widgets. (See [``PlotWidgets``][anydyce.viz.PlotWidgets].) \"\"\" cutoff = ( self . _plot_widgets . cutoff . value if self . _plot_widgets . enable_cutoff . value else None ) if self . _cutoff != cutoff : self . _cutoff = cutoff self . _cull_data () display ( self . _csv_download_link ) matplotlib . rcParams . update ( matplotlib . rcParamsDefault ) with matplotlib . style . context ( settings [ \"plot_style\" ]): fig = matplotlib . pyplot . figure ( figsize = ( settings [ \"scale\" ], settings [ \"scale\" ] / 16 * 9 ) ) if self . _selected_plotter is not None : self . _selected_plotter . plot ( fig , self . _hs_culled , cast ( SettingsDict , settings ) ) matplotlib . pyplot . show ()","title":"plot()"},{"location":"anydyce/#anydyce.viz.HPlotterChooser.update_hs","text":"Triggers an update to the histogram data. histogram_specs is an iterable of either a single HLikeT object, a two-tuple of a name and a primary HLikeT object, or a three-tuple of a name, a primary HLikeT object, and an optional secondary HLikeT object ( None if omitted). Source code in anydyce/viz.py 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 @beartype def update_hs ( self , histogram_specs : Iterable [ Union [ HLikeT , Tuple [ str , HLikeT ], Tuple [ str , HLikeT , Optional [ HLikeT ]]] ], ) -> None : r \"\"\" Triggers an update to the histogram data. *histogram_specs* is an iterable of either a single [``HLikeT``][anydyce.viz.HLikeT] object, a two-tuple of a name and a primary ``HLikeT`` object, or a three-tuple of a name, a primary ``HLikeT`` object, and an optional secondary ``HLikeT`` object (``#!python None`` if omitted). \"\"\" self . _hs = _histogram_specs_to_h_tuples ( histogram_specs , cutoff = None ) self . _csv_download_link = _csv_download_link ( self . _hs ) self . _plot_widgets . burst_swap . disabled = all ( h_outer is None or h_inner == h_outer for _ , h_inner , h_outer in self . _hs ) self . _cull_data () self . _trigger_update ()","title":"update_hs()"},{"location":"anydyce/#anydyce.viz.jupyter_visualize","text":"Experimental This function should be considered experimental and may change or disappear in future versions. Takes a list of one or more histogram_specs and produces an interactive visualization reminiscent of AnyDice , but with some extra goodies. Each item in histogram_specs can be a dyce . H object, a 2-tuple, or a 3-tuple. 2-tuples are in the format ( str , H ) , where str is a name or description that will be used to identify the accompanying H object where it appears in the visualization. 3-tuples are in the format ( str , H , H ) . The second H object is used for the interior ring in \u201cburst\u201d break-out graphs, but otherwise ignored. The \u201cPowered by the Apocalypse (PbtA)\u201d example in the introduction notebook should give an idea of the effect. (See Interactive quick start .) Parameters have the same meanings as with HPlotterChooser and PlotWidgets . Source code in anydyce/viz.py 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 @experimental @beartype def jupyter_visualize ( histogram_specs : Iterable [ Union [ HLikeT , Tuple [ str , HLikeT ], Tuple [ str , HLikeT , Optional [ HLikeT ]]] ], * , controls_expanded : bool = True , initial_alpha : float = DEFAULT_ALPHA , initial_burst_cmap_inner : str = DEFAULT_CMAP_BURST_INNER , initial_burst_cmap_link : bool = True , initial_burst_cmap_outer : str = DEFAULT_CMAP_BURST_OUTER , initial_burst_color_bg : str = \"white\" , initial_burst_color_text : str = DEFAULT_COLOR_TEXT , initial_burst_swap : bool = False , initial_burst_zero_fill_normalize : bool = False , initial_enable_cutoff : bool = False , initial_graph_type : TraditionalPlotType = TraditionalPlotType . NORMAL , initial_markers : str = \"oX^v><dP\" , initial_plot_style : str = \"bmh\" , initial_show_shadow : bool = False , selected_name : Optional [ str ] = None , ): r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Takes a list of one or more *histogram_specs* and produces an interactive visualization reminiscent of [AnyDice](https://anydice.com/), but with some extra goodies. Each item in *histogram_specs* can be a ``#!python dyce.H`` object, a 2-tuple, or a 3-tuple. 2-tuples are in the format ``#!python (str, H)``, where ``#!python str`` is a name or description that will be used to identify the accompanying ``#!python H`` object where it appears in the visualization. 3-tuples are in the format ``#!python (str, H, H)``. The second ``#!python H`` object is used for the interior ring in \u201cburst\u201d break-out graphs, but otherwise ignored. The \u201cPowered by the _Apocalypse_ (PbtA)\u201d example in the introduction notebook should give an idea of the effect. (See [Interactive quick start](index.md#interactive-quick-start).) Parameters have the same meanings as with [``HPlotterChooser``][anydyce.viz.HPlotterChooser] and [``PlotWidgets``][anydyce.viz.PlotWidgets]. \"\"\" plotter_chooser = HPlotterChooser ( histogram_specs , plot_widgets = PlotWidgets ( initial_alpha = initial_alpha , initial_burst_cmap_inner = initial_burst_cmap_inner , initial_burst_cmap_link = initial_burst_cmap_link , initial_burst_cmap_outer = initial_burst_cmap_outer , initial_burst_color_bg = initial_burst_color_bg , initial_burst_color_text = initial_burst_color_text , initial_burst_swap = initial_burst_swap , initial_burst_zero_fill_normalize = initial_burst_zero_fill_normalize , initial_enable_cutoff = initial_enable_cutoff , initial_graph_type = initial_graph_type , initial_markers = initial_markers , initial_plot_style = initial_plot_style , initial_show_shadow = initial_show_shadow , ), selected_name = selected_name , ) plotter_chooser . interact ()","title":"jupyter_visualize()"},{"location":"anydyce.viz/","text":"anydyce . viz package reference Experimental This package is an attempt to explore conveniences for integration with Matplotlib . It is an explicit departure from RFC 1925, \u00a7 2.2 and should be considered experimental. Be warned that future release may introduce incompatibilities or remove this package altogether. Feedback, suggestions, and contributions are welcome and appreciated. HLikeT = Union [ H , HableT ] module-attribute HPlotter Experimental This class should be considered experimental and may change or disappear in future versions. A plotter responsible for laying out control widgets and visualizing data provided by primary and optional secondary histograms. (See the plot method .) Source code in anydyce/viz.py 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 class HPlotter : r \"\"\" !!! warning \"Experimental\" This class should be considered experimental and may change or disappear in future versions. A plotter responsible for laying out control widgets and visualizing data provided by primary and optional secondary histograms. (See the [*plot* method][anydyce.viz.HPlotter.plot].) \"\"\" @abstractproperty def NAME ( self ) -> str : r \"\"\" The display name of the plotter. \"\"\" raise NotImplementedError @beartype def layout ( self , plot_widgets : PlotWidgets ) -> widgets . Widget : r \"\"\" Takes a set of widgets (*plot_widgets*) and returns a container (layout) widget selecting those needed by the plotter. \"\"\" return widgets . VBox ( [ plot_widgets . scale , plot_widgets . enable_cutoff , plot_widgets . cutoff , ] ) @abstractmethod def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ): r \"\"\" Creates and displays a visualization of the provided histograms. *fig* is the [``#!python matplotlib.figure.Figure``](https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure) in which the visualization should be constructed. *hs* is a sequence of three-tuples, a name, a primary histogram, and an optional secondary histogram (``#!python None`` if omitted). Plotters should implement this function to display at least the primary histogram and visually associate it with the name. \"\"\" raise NotImplementedError NAME () -> str The display name of the plotter. Source code in anydyce/viz.py 476 477 478 479 480 481 @abstractproperty def NAME ( self ) -> str : r \"\"\" The display name of the plotter. \"\"\" raise NotImplementedError layout ( plot_widgets : PlotWidgets ) -> widgets . Widget Takes a set of widgets ( plot_widgets ) and returns a container (layout) widget selecting those needed by the plotter. Source code in anydyce/viz.py 483 484 485 486 487 488 489 490 491 492 493 494 495 @beartype def layout ( self , plot_widgets : PlotWidgets ) -> widgets . Widget : r \"\"\" Takes a set of widgets (*plot_widgets*) and returns a container (layout) widget selecting those needed by the plotter. \"\"\" return widgets . VBox ( [ plot_widgets . scale , plot_widgets . enable_cutoff , plot_widgets . cutoff , ] ) plot ( fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict ) abstractmethod Creates and displays a visualization of the provided histograms. fig is the matplotlib . figure . Figure in which the visualization should be constructed. hs is a sequence of three-tuples, a name, a primary histogram, and an optional secondary histogram ( None if omitted). Plotters should implement this function to display at least the primary histogram and visually associate it with the name. Source code in anydyce/viz.py 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 @abstractmethod def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ): r \"\"\" Creates and displays a visualization of the provided histograms. *fig* is the [``#!python matplotlib.figure.Figure``](https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure) in which the visualization should be constructed. *hs* is a sequence of three-tuples, a name, a primary histogram, and an optional secondary histogram (``#!python None`` if omitted). Plotters should implement this function to display at least the primary histogram and visually associate it with the name. \"\"\" raise NotImplementedError BarHPlotter Bases: HPlotter Experimental This class should be considered experimental and may change or disappear in future versions. A plotter for creating a single vertical bar plot visualizing all primary histograms. Secondary histograms are ignored. Source code in anydyce/viz.py 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 class BarHPlotter ( HPlotter ): r \"\"\" !!! warning \"Experimental\" This class should be considered experimental and may change or disappear in future versions. A plotter for creating a single vertical bar plot visualizing all primary histograms. Secondary histograms are ignored. \"\"\" NAME = \"Bar Plot\" @beartype def layout ( self , plot_widgets : PlotWidgets ) -> widgets . Widget : cutoff_layout_widget = super () . layout ( plot_widgets ) return widgets . VBox ( [ widgets . HBox ( [ cutoff_layout_widget , plot_widgets . graph_type , widgets . VBox ( [ plot_widgets . alpha , plot_widgets . plot_style , plot_widgets . show_shadow , ] ), ] ), ] ) @beartype def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ) -> None : xmin , ymin , dx , dy = 0 , 0 , 1 , 1 ax = fig . add_axes (( xmin , ymin , dx , dy )) plot_bar ( ax , tuple (( label , h ) for label , h , _ in hs ), alpha = settings [ \"alpha\" ], graph_type = settings [ \"graph_type\" ], shadow = settings [ \"show_shadow\" ], ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) ax . legend () NAME = 'Bar Plot' class-attribute layout ( plot_widgets : PlotWidgets ) -> widgets . Widget Source code in anydyce/viz.py 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 @beartype def layout ( self , plot_widgets : PlotWidgets ) -> widgets . Widget : cutoff_layout_widget = super () . layout ( plot_widgets ) return widgets . VBox ( [ widgets . HBox ( [ cutoff_layout_widget , plot_widgets . graph_type , widgets . VBox ( [ plot_widgets . alpha , plot_widgets . plot_style , plot_widgets . show_shadow , ] ), ] ), ] ) plot ( fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict ) -> None Source code in anydyce/viz.py 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 @beartype def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ) -> None : xmin , ymin , dx , dy = 0 , 0 , 1 , 1 ax = fig . add_axes (( xmin , ymin , dx , dy )) plot_bar ( ax , tuple (( label , h ) for label , h , _ in hs ), alpha = settings [ \"alpha\" ], graph_type = settings [ \"graph_type\" ], shadow = settings [ \"show_shadow\" ], ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) ax . legend () BurstHPlotter Bases: HPlotter Experimental This class should be considered experimental and may change or disappear in future versions. A plotter for creating one burst plot per primary histogram. If provided, associated secondary histograms are used for the outer rings. Source code in anydyce/viz.py 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 class BurstHPlotter ( HPlotter ): r \"\"\" !!! warning \"Experimental\" This class should be considered experimental and may change or disappear in future versions. A plotter for creating one burst plot per primary histogram. If provided, associated secondary histograms are used for the outer rings. \"\"\" NAME = \"Burst Plots\" @beartype def layout ( self , plot_widgets : PlotWidgets ) -> widgets . Widget : cutoff_layout_widget = super () . layout ( plot_widgets ) return widgets . VBox ( [ widgets . HBox ( [ widgets . VBox ( [ cutoff_layout_widget , plot_widgets . burst_swap , plot_widgets . burst_zero_fill_normalize , ] ), widgets . VBox ( [ plot_widgets . burst_cmap_inner , plot_widgets . burst_cmap_outer , plot_widgets . burst_cmap_link , ] ), widgets . VBox ( [ plot_widgets . alpha , plot_widgets . burst_color_text , plot_widgets . burst_color_bg , ] ), ] ), ] ) @beartype def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ) -> None : cols = 3 logical_rows = len ( hs ) // cols + ( len ( hs ) % cols != 0 ) # Height of row gaps in relation to height of figs gap_size_ratio = Fraction ( 2 , 5 ) total_gaps = max ( 0 , logical_rows - 1 ) fig . set_figwidth ( settings [ \"scale\" ]) fig . set_figheight ( settings [ \"scale\" ] / 16 * 5 * ( logical_rows + total_gaps * gap_size_ratio ) ) fig . set_facecolor ( settings [ \"burst_color_bg\" ]) actual_rows_per_fig = gap_size_ratio . denominator ** 2 actual_rows_per_gap = gap_size_ratio . numerator * gap_size_ratio . denominator total_actual_rows = ( logical_rows * actual_rows_per_fig + total_gaps * actual_rows_per_gap ) def _zero_fill_normalize (): unique_outcomes : Set [ RealLike ] = set () for i , ( _ , first_h , second_h ) in enumerate ( hs ): unique_outcomes . update ( first_h ) if second_h : unique_outcomes . update ( second_h ) for i , ( label , first_h , second_h ) in enumerate ( hs ): yield ( label , first_h . zero_fill ( unique_outcomes ), None if second_h is None else second_h . zero_fill ( unique_outcomes ), ) if settings [ \"burst_zero_fill_normalize\" ]: hs = tuple ( _zero_fill_normalize ()) for i , ( label , h_inner , h_outer ) in enumerate ( hs ): plot_burst_kw : Dict [ str , Any ] = dict ( title = label , inner_cmap = settings [ \"burst_cmap_inner\" ], outer_cmap = settings [ \"burst_cmap_outer\" ] if not settings [ \"burst_cmap_link\" ] else settings [ \"burst_cmap_inner\" ], text_color = settings [ \"burst_color_text\" ], alpha = settings [ \"alpha\" ], ) if h_outer is not None : if settings [ \"burst_swap\" ]: h_inner , h_outer = h_outer , h_inner logical_row = i // cols actual_fig_row_start = logical_row * ( actual_rows_per_gap + actual_rows_per_fig ) ax = matplotlib . pyplot . subplot2grid ( ( total_actual_rows , cols ), ( actual_fig_row_start , i % cols ), rowspan = actual_rows_per_fig , ) plot_burst ( ax , h_inner , h_outer , ** plot_burst_kw , ) NAME = 'Burst Plots' class-attribute layout ( plot_widgets : PlotWidgets ) -> widgets . Widget Source code in anydyce/viz.py 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 @beartype def layout ( self , plot_widgets : PlotWidgets ) -> widgets . Widget : cutoff_layout_widget = super () . layout ( plot_widgets ) return widgets . VBox ( [ widgets . HBox ( [ widgets . VBox ( [ cutoff_layout_widget , plot_widgets . burst_swap , plot_widgets . burst_zero_fill_normalize , ] ), widgets . VBox ( [ plot_widgets . burst_cmap_inner , plot_widgets . burst_cmap_outer , plot_widgets . burst_cmap_link , ] ), widgets . VBox ( [ plot_widgets . alpha , plot_widgets . burst_color_text , plot_widgets . burst_color_bg , ] ), ] ), ] ) plot ( fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict ) -> None Source code in anydyce/viz.py 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 @beartype def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ) -> None : cols = 3 logical_rows = len ( hs ) // cols + ( len ( hs ) % cols != 0 ) # Height of row gaps in relation to height of figs gap_size_ratio = Fraction ( 2 , 5 ) total_gaps = max ( 0 , logical_rows - 1 ) fig . set_figwidth ( settings [ \"scale\" ]) fig . set_figheight ( settings [ \"scale\" ] / 16 * 5 * ( logical_rows + total_gaps * gap_size_ratio ) ) fig . set_facecolor ( settings [ \"burst_color_bg\" ]) actual_rows_per_fig = gap_size_ratio . denominator ** 2 actual_rows_per_gap = gap_size_ratio . numerator * gap_size_ratio . denominator total_actual_rows = ( logical_rows * actual_rows_per_fig + total_gaps * actual_rows_per_gap ) def _zero_fill_normalize (): unique_outcomes : Set [ RealLike ] = set () for i , ( _ , first_h , second_h ) in enumerate ( hs ): unique_outcomes . update ( first_h ) if second_h : unique_outcomes . update ( second_h ) for i , ( label , first_h , second_h ) in enumerate ( hs ): yield ( label , first_h . zero_fill ( unique_outcomes ), None if second_h is None else second_h . zero_fill ( unique_outcomes ), ) if settings [ \"burst_zero_fill_normalize\" ]: hs = tuple ( _zero_fill_normalize ()) for i , ( label , h_inner , h_outer ) in enumerate ( hs ): plot_burst_kw : Dict [ str , Any ] = dict ( title = label , inner_cmap = settings [ \"burst_cmap_inner\" ], outer_cmap = settings [ \"burst_cmap_outer\" ] if not settings [ \"burst_cmap_link\" ] else settings [ \"burst_cmap_inner\" ], text_color = settings [ \"burst_color_text\" ], alpha = settings [ \"alpha\" ], ) if h_outer is not None : if settings [ \"burst_swap\" ]: h_inner , h_outer = h_outer , h_inner logical_row = i // cols actual_fig_row_start = logical_row * ( actual_rows_per_gap + actual_rows_per_fig ) ax = matplotlib . pyplot . subplot2grid ( ( total_actual_rows , cols ), ( actual_fig_row_start , i % cols ), rowspan = actual_rows_per_fig , ) plot_burst ( ax , h_inner , h_outer , ** plot_burst_kw , ) HorizontalBarHPlotter Bases: BarHPlotter Experimental This class should be considered experimental and may change or disappear in future versions. A plotter for creating one horizontal bar plot per primary histogram. Secondary histograms are ignored. Source code in anydyce/viz.py 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 class HorizontalBarHPlotter ( BarHPlotter ): r \"\"\" !!! warning \"Experimental\" This class should be considered experimental and may change or disappear in future versions. A plotter for creating one horizontal bar plot per primary histogram. Secondary histograms are ignored. \"\"\" NAME = \"Horizontal Bar Plots\" @beartype def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ) -> None : total_outcomes = sum ( 1 for _ in chain . from_iterable ( h . outcomes () for _ , h , _ in hs ) ) total_height = total_outcomes + 1 # one extra to accommodate the axis inches_per_height_unit = settings [ \"scale\" ] / 64 fig . set_figwidth ( settings [ \"scale\" ]) fig . set_figheight ( total_height * inches_per_height_unit ) grid = ( total_height , 1 ) top = 0 ax = first_ax = None barh_kw : Dict [ str , Any ] = dict ( alpha = settings [ \"alpha\" ]) if settings [ \"show_shadow\" ]: barh_kw . update ( dict ( path_effects = [ matplotlib . patheffects . withSimplePatchShadow (), matplotlib . patheffects . Normal (), ] ) ) plot_style = settings [ \"plot_style\" ] if ( plot_style in matplotlib . style . library and \"axes.prop_cycle\" in matplotlib . style . library [ plot_style ] and \"color\" in matplotlib . style . library [ plot_style ][ \"axes.prop_cycle\" ] ): # Our current style has a cycler with colors, so use it cycler = matplotlib . style . library [ plot_style ][ \"axes.prop_cycle\" ] else : # Revert to the global default cycler = matplotlib . rcParams [ \"axes.prop_cycle\" ] color_iter = cycle ( cycler . by_key () . get ( \"color\" , ( None ,))) for i , ( label , h , _ ) in enumerate ( hs ): outcomes , values = values_xy_for_graph_type ( h , settings [ \"graph_type\" ]) loc = ( top , 0 ) rowspan = len ( outcomes ) top += rowspan if first_ax is None : first_ax = ax = matplotlib . pyplot . subplot2grid ( grid , loc , rowspan = rowspan ) else : ax = matplotlib . pyplot . subplot2grid ( grid , loc , rowspan = rowspan , sharex = first_ax ) ax . set_yticks ( outcomes ) ax . tick_params ( labelbottom = False ) ax . set_ylim (( max ( outcomes ) + 0.5 , min ( outcomes ) - 0.5 )) ax . barh ( outcomes , values , color = next ( color_iter ), label = label , ** barh_kw ) ax . legend ( loc = \"upper right\" ) if ax is not None : ax . tick_params ( labelbottom = True ) ax . xaxis . set_major_formatter ( matplotlib . ticker . PercentFormatter ( xmax = 1 )) NAME = 'Horizontal Bar Plots' class-attribute plot ( fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict ) -> None Source code in anydyce/viz.py 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 @beartype def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ) -> None : total_outcomes = sum ( 1 for _ in chain . from_iterable ( h . outcomes () for _ , h , _ in hs ) ) total_height = total_outcomes + 1 # one extra to accommodate the axis inches_per_height_unit = settings [ \"scale\" ] / 64 fig . set_figwidth ( settings [ \"scale\" ]) fig . set_figheight ( total_height * inches_per_height_unit ) grid = ( total_height , 1 ) top = 0 ax = first_ax = None barh_kw : Dict [ str , Any ] = dict ( alpha = settings [ \"alpha\" ]) if settings [ \"show_shadow\" ]: barh_kw . update ( dict ( path_effects = [ matplotlib . patheffects . withSimplePatchShadow (), matplotlib . patheffects . Normal (), ] ) ) plot_style = settings [ \"plot_style\" ] if ( plot_style in matplotlib . style . library and \"axes.prop_cycle\" in matplotlib . style . library [ plot_style ] and \"color\" in matplotlib . style . library [ plot_style ][ \"axes.prop_cycle\" ] ): # Our current style has a cycler with colors, so use it cycler = matplotlib . style . library [ plot_style ][ \"axes.prop_cycle\" ] else : # Revert to the global default cycler = matplotlib . rcParams [ \"axes.prop_cycle\" ] color_iter = cycle ( cycler . by_key () . get ( \"color\" , ( None ,))) for i , ( label , h , _ ) in enumerate ( hs ): outcomes , values = values_xy_for_graph_type ( h , settings [ \"graph_type\" ]) loc = ( top , 0 ) rowspan = len ( outcomes ) top += rowspan if first_ax is None : first_ax = ax = matplotlib . pyplot . subplot2grid ( grid , loc , rowspan = rowspan ) else : ax = matplotlib . pyplot . subplot2grid ( grid , loc , rowspan = rowspan , sharex = first_ax ) ax . set_yticks ( outcomes ) ax . tick_params ( labelbottom = False ) ax . set_ylim (( max ( outcomes ) + 0.5 , min ( outcomes ) - 0.5 )) ax . barh ( outcomes , values , color = next ( color_iter ), label = label , ** barh_kw ) ax . legend ( loc = \"upper right\" ) if ax is not None : ax . tick_params ( labelbottom = True ) ax . xaxis . set_major_formatter ( matplotlib . ticker . PercentFormatter ( xmax = 1 )) LineHPlotter Bases: HPlotter Experimental This class should be considered experimental and may change or disappear in future versions. A plotter for creating a single line plot visualizing all primary histograms. Secondary histograms are ignored. Source code in anydyce/viz.py 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 class LineHPlotter ( HPlotter ): r \"\"\" !!! warning \"Experimental\" This class should be considered experimental and may change or disappear in future versions. A plotter for creating a single line plot visualizing all primary histograms. Secondary histograms are ignored. \"\"\" NAME = \"Line Plot\" @beartype def layout ( self , plot_widgets : PlotWidgets ) -> widgets . Widget : cutoff_layout_widget = super () . layout ( plot_widgets ) return widgets . VBox ( [ widgets . HBox ( [ cutoff_layout_widget , plot_widgets . graph_type , widgets . VBox ( [ plot_widgets . alpha , plot_widgets . plot_style , plot_widgets . show_shadow , plot_widgets . markers , ] ), ] ), ] ) @beartype def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ) -> None : xmin , ymin , dx , dy = 0 , 0 , 1 , 1 ax = fig . add_axes (( xmin , ymin , dx , dy )) plot_line ( ax , tuple (( label , h ) for label , h , _ in hs ), alpha = settings [ \"alpha\" ], graph_type = settings [ \"graph_type\" ], markers = settings [ \"markers\" ], shadow = settings [ \"show_shadow\" ], ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) ax . legend () NAME = 'Line Plot' class-attribute layout ( plot_widgets : PlotWidgets ) -> widgets . Widget Source code in anydyce/viz.py 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 @beartype def layout ( self , plot_widgets : PlotWidgets ) -> widgets . Widget : cutoff_layout_widget = super () . layout ( plot_widgets ) return widgets . VBox ( [ widgets . HBox ( [ cutoff_layout_widget , plot_widgets . graph_type , widgets . VBox ( [ plot_widgets . alpha , plot_widgets . plot_style , plot_widgets . show_shadow , plot_widgets . markers , ] ), ] ), ] ) plot ( fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict ) -> None Source code in anydyce/viz.py 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 @beartype def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ) -> None : xmin , ymin , dx , dy = 0 , 0 , 1 , 1 ax = fig . add_axes (( xmin , ymin , dx , dy )) plot_line ( ax , tuple (( label , h ) for label , h , _ in hs ), alpha = settings [ \"alpha\" ], graph_type = settings [ \"graph_type\" ], markers = settings [ \"markers\" ], shadow = settings [ \"show_shadow\" ], ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) ax . legend () ScatterHPlotter Bases: LineHPlotter Experimental This class should be considered experimental and may change or disappear in future versions. A plotter for creating a single scatter plot visualizing all primary histograms. Secondary histograms are ignored. Source code in anydyce/viz.py 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 class ScatterHPlotter ( LineHPlotter ): r \"\"\" !!! warning \"Experimental\" This class should be considered experimental and may change or disappear in future versions. A plotter for creating a single scatter plot visualizing all primary histograms. Secondary histograms are ignored. \"\"\" NAME = \"Scatter Plot\" @beartype def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ) -> None : xmin , ymin , dx , dy = 0 , 0 , 1 , 1 ax = fig . add_axes (( xmin , ymin , dx , dy )) plot_scatter ( ax , tuple (( label , h ) for label , h , _ in hs ), alpha = settings [ \"alpha\" ], graph_type = settings [ \"graph_type\" ], markers = settings [ \"markers\" ], shadow = settings [ \"show_shadow\" ], ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) ax . legend () NAME = 'Scatter Plot' class-attribute plot ( fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict ) -> None Source code in anydyce/viz.py 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 @beartype def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ) -> None : xmin , ymin , dx , dy = 0 , 0 , 1 , 1 ax = fig . add_axes (( xmin , ymin , dx , dy )) plot_scatter ( ax , tuple (( label , h ) for label , h , _ in hs ), alpha = settings [ \"alpha\" ], graph_type = settings [ \"graph_type\" ], markers = settings [ \"markers\" ], shadow = settings [ \"show_shadow\" ], ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) ax . legend () PlotWidgets Bases: _PlotWidgetsDataclass Experimental This class should be considered experimental and may change or disappear in future versions. Source code in anydyce/viz.py 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 class PlotWidgets ( _PlotWidgetsDataclass ): r \"\"\" !!! warning \"Experimental\" This class should be considered experimental and may change or disappear in future versions. \"\"\" def __init__ ( self , * , initial_alpha : float = DEFAULT_ALPHA , initial_burst_cmap_inner : str = DEFAULT_CMAP_BURST_INNER , initial_burst_cmap_link : bool = True , initial_burst_cmap_outer : str = DEFAULT_CMAP_BURST_OUTER , initial_burst_color_bg : str = \"white\" , initial_burst_color_text : str = DEFAULT_COLOR_TEXT , initial_burst_swap : bool = False , initial_burst_zero_fill_normalize : bool = False , initial_enable_cutoff : bool = False , initial_graph_type : TraditionalPlotType = TraditionalPlotType . NORMAL , initial_markers : str = \"oX^v><dP\" , initial_plot_style : str = \"bmh\" , initial_show_shadow : bool = False , ): super () . __init__ () if initial_plot_style not in matplotlib . style . available : warnings . warn ( f \"unrecognized plot style { initial_plot_style !r} ; reverting to 'default'\" , category = RuntimeWarning , ) initial_plot_style = \"default\" self . alpha . value = initial_alpha self . burst_cmap_inner . value = initial_burst_cmap_inner self . burst_cmap_link . value = initial_burst_cmap_link self . burst_cmap_outer . disabled = initial_burst_cmap_link self . burst_cmap_outer . value = initial_burst_cmap_outer self . burst_color_bg . value = initial_burst_color_bg self . burst_color_text . value = initial_burst_color_text self . burst_swap . value = initial_burst_swap self . burst_zero_fill_normalize . value = initial_burst_zero_fill_normalize self . cutoff . disabled = not initial_enable_cutoff self . enable_cutoff . value = initial_enable_cutoff self . graph_type . value = initial_graph_type self . markers . value = initial_markers self . plot_style . value = initial_plot_style self . show_shadow . value = initial_show_shadow def _handle_burst_cmap_link ( change ) -> None : self . burst_cmap_outer . disabled = change [ \"new\" ] self . burst_cmap_link . observe ( _handle_burst_cmap_link , names = \"value\" ) def _handle_cutoff ( change ) -> None : self . cutoff . disabled = not change [ \"new\" ] self . enable_cutoff . observe ( _handle_cutoff , names = \"value\" ) def asdict ( self ) -> Dict [ str , Any ]: return dict (( field . name , getattr ( self , field . name )) for field in fields ( self )) __init__ ( * , initial_alpha : float = DEFAULT_ALPHA , initial_burst_cmap_inner : str = DEFAULT_CMAP_BURST_INNER , initial_burst_cmap_link : bool = True , initial_burst_cmap_outer : str = DEFAULT_CMAP_BURST_OUTER , initial_burst_color_bg : str = 'white' , initial_burst_color_text : str = DEFAULT_COLOR_TEXT , initial_burst_swap : bool = False , initial_burst_zero_fill_normalize : bool = False , initial_enable_cutoff : bool = False , initial_graph_type : TraditionalPlotType = TraditionalPlotType . NORMAL , initial_markers : str = 'oX^v><dP' , initial_plot_style : str = 'bmh' , initial_show_shadow : bool = False ) Source code in anydyce/viz.py 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 def __init__ ( self , * , initial_alpha : float = DEFAULT_ALPHA , initial_burst_cmap_inner : str = DEFAULT_CMAP_BURST_INNER , initial_burst_cmap_link : bool = True , initial_burst_cmap_outer : str = DEFAULT_CMAP_BURST_OUTER , initial_burst_color_bg : str = \"white\" , initial_burst_color_text : str = DEFAULT_COLOR_TEXT , initial_burst_swap : bool = False , initial_burst_zero_fill_normalize : bool = False , initial_enable_cutoff : bool = False , initial_graph_type : TraditionalPlotType = TraditionalPlotType . NORMAL , initial_markers : str = \"oX^v><dP\" , initial_plot_style : str = \"bmh\" , initial_show_shadow : bool = False , ): super () . __init__ () if initial_plot_style not in matplotlib . style . available : warnings . warn ( f \"unrecognized plot style { initial_plot_style !r} ; reverting to 'default'\" , category = RuntimeWarning , ) initial_plot_style = \"default\" self . alpha . value = initial_alpha self . burst_cmap_inner . value = initial_burst_cmap_inner self . burst_cmap_link . value = initial_burst_cmap_link self . burst_cmap_outer . disabled = initial_burst_cmap_link self . burst_cmap_outer . value = initial_burst_cmap_outer self . burst_color_bg . value = initial_burst_color_bg self . burst_color_text . value = initial_burst_color_text self . burst_swap . value = initial_burst_swap self . burst_zero_fill_normalize . value = initial_burst_zero_fill_normalize self . cutoff . disabled = not initial_enable_cutoff self . enable_cutoff . value = initial_enable_cutoff self . graph_type . value = initial_graph_type self . markers . value = initial_markers self . plot_style . value = initial_plot_style self . show_shadow . value = initial_show_shadow def _handle_burst_cmap_link ( change ) -> None : self . burst_cmap_outer . disabled = change [ \"new\" ] self . burst_cmap_link . observe ( _handle_burst_cmap_link , names = \"value\" ) def _handle_cutoff ( change ) -> None : self . cutoff . disabled = not change [ \"new\" ] self . enable_cutoff . observe ( _handle_cutoff , names = \"value\" ) asdict () -> Dict [ str , Any ] Source code in anydyce/viz.py 460 461 def asdict ( self ) -> Dict [ str , Any ]: return dict (( field . name , getattr ( self , field . name )) for field in fields ( self )) cumulative_probability_formatter ( outcome : RealLike , probability : Fraction , h : H ) -> str Experimental This function should be considered experimental and may change or disappear in future versions. Formatter for use with plot_burst to inefficiently (i.e., \\(O \\left( {n} ^ {2} \\right)\\) ) calculate and format cumulative probability pairs for outcome in h . Source code in anydyce/viz.py 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 @experimental @beartype def cumulative_probability_formatter ( outcome : RealLike , probability : Fraction , h : H , ) -> str : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Formatter for use with [``plot_burst``][anydyce.viz.plot_burst] to inefficiently (i.e., $O \\left( {n} ^ {2} \\right)$) calculate and format cumulative probability pairs for *outcome* in *h*. \"\"\" le_total , ge_total = Fraction ( 0 ), Fraction ( 1 ) for h_outcome , h_probability in h . distribution (): le_total += h_probability if math . isclose ( h_outcome , outcome ): return f \" { outcome } { float ( probability ) : .2% } ; \u2265 { float ( le_total ) : .2% } ; \u2264 { float ( ge_total ) : .2% } \" ge_total -= h_probability return f \" { outcome } { float ( probability ) : .2% } \" outcome_name_formatter ( outcome : RealLike , _ , __ ) -> str Experimental This function should be considered experimental and may change or disappear in future versions. Formatter for use with plot_burst to format each outcome . If outcome has a name attribute (e.g., as with an Enum ), that is used. Otherwise outcome is passed to str and the result is used. Source code in anydyce/viz.py 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 @experimental @beartype def outcome_name_formatter ( outcome : RealLike , _ , __ ) -> str : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Formatter for use with [``plot_burst``][anydyce.viz.plot_burst] to format each *outcome*. If *outcome* has a *name* attribute (e.g., as with an ``#!python Enum``), that is used. Otherwise *outcome* is passed to ``#!pythonn str`` and the result is used. \"\"\" if hasattr ( outcome , \"name\" ): return f \" { outcome . name } \" # type: ignore [attr-defined] else : return f \" { str ( outcome ) } \" outcome_name_probability_formatter ( outcome : RealLike , probability : Fraction , __ ) -> str Experimental This function should be considered experimental and may change or disappear in future versions. Formatter for use with plot_burst to display each outcome and probability (separated by a newline). If outcome has a name attribute (e.g., as with an Enum ), that is used. Otherwise outcome is passed to str and the result is used. probability is passed to float and formatted to two decimal places. Source code in anydyce/viz.py 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 @experimental @beartype def outcome_name_probability_formatter ( outcome : RealLike , probability : Fraction , __ ) -> str : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Formatter for use with [``plot_burst``][anydyce.viz.plot_burst] to display each outcome and probability (separated by a newline). If *outcome* has a *name* attribute (e.g., as with an ``#!python Enum``), that is used. Otherwise *outcome* is passed to ``#!pythonn str`` and the result is used. *probability* is passed to ``#!python float`` and formatted to two decimal places. \"\"\" if hasattr ( outcome , \"name\" ): return f \" { outcome . name } \\n { float ( probability ) : .2% } \" # type: ignore [attr-defined] else : return f \" { str ( outcome ) } \\n { float ( probability ) : .2% } \" limit_for_display ( h : H , cutoff ) -> H Experimental This function should be considered experimental and may change or disappear in future versions. Discards outcomes in h , starting with the smallest counts as long as the total discarded in proportion to h . total does not exceed cutoff . This can be useful in speeding up plots where there are large number of negligible probabilities. 1 2 3 4 5 6 7 8 9 10 >>> from anydyce.viz import limit_for_display >>> from dyce import H >>> from fractions import Fraction >>> h = H ({ 1 : 1 , 2 : 2 , 3 : 3 , 4 : 4 , 5 : 5 , 6 : 6 }) >>> h . total 21 >>> limit_for_display ( h , cutoff = Fraction ( 5 , 21 )) H ({ 3 : 3 , 4 : 4 , 5 : 5 , 6 : 6 }) >>> limit_for_display ( h , cutoff = Fraction ( 6 , 21 )) H ({ 4 : 4 , 5 : 5 , 6 : 6 }) Source code in anydyce/viz.py 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 @experimental @beartype def limit_for_display ( h : H , cutoff ) -> H : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Discards outcomes in *h*, starting with the smallest counts as long as the total discarded in proportion to ``#!python h.total`` does not exceed *cutoff*. This can be useful in speeding up plots where there are large number of negligible probabilities. ``` python >>> from anydyce.viz import limit_for_display >>> from dyce import H >>> from fractions import Fraction >>> h = H({1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6}) >>> h.total 21 >>> limit_for_display(h, cutoff=Fraction(5, 21)) H({3: 3, 4: 4, 5: 5, 6: 6}) >>> limit_for_display(h, cutoff=Fraction(6, 21)) H({4: 4, 5: 5, 6: 6}) ``` \"\"\" if cutoff < 0 or cutoff > 1 : raise ValueError ( f \"cutoff ( { cutoff } ) must be between zero and one, inclusive\" ) cutoff_count = int ( cutoff * h . total ) if cutoff_count == 0 : return h def _cull () -> Iterator [ Tuple [ RealLike , int ]]: so_far = 0 for outcome , count in sorted ( h . items (), key = itemgetter ( 1 )): so_far += count if so_far > cutoff_count : yield outcome , count return H ( _cull ()) probability_formatter ( _ , probability : Fraction , __ ) -> str Experimental This function should be considered experimental and may change or disappear in future versions. Formatter for use with plot_burst to display the probability for each outcome (but not the outcome itself). probability is passed to float and formatted to two decimal places. Source code in anydyce/viz.py 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 @experimental @beartype def probability_formatter ( _ , probability : Fraction , __ ) -> str : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Formatter for use with [``plot_burst``][anydyce.viz.plot_burst] to display the probability for each outcome (but not the outcome itself). *probability* is passed to ``#!python float`` and formatted to two decimal places. \"\"\" return f \" { float ( probability ) : .2% } \" values_xy_for_graph_type ( h : H , graph_type : TraditionalPlotType ) -> Tuple [ Tuple [ RealLike , ... ], Tuple [ float , ... ]] Source code in anydyce/viz.py 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 @experimental @beartype def values_xy_for_graph_type ( h : H , graph_type : TraditionalPlotType ) -> Tuple [ Tuple [ RealLike , ... ], Tuple [ float , ... ]]: outcomes , probabilities = h . distribution_xy () if graph_type is TraditionalPlotType . AT_LEAST : probabilities = tuple ( accumulate ( probabilities , __sub__ , initial = 1.0 ))[: - 1 ] elif graph_type is TraditionalPlotType . AT_MOST : probabilities = tuple ( accumulate ( probabilities , __add__ , initial = 0.0 ))[ 1 :] elif graph_type is TraditionalPlotType . NORMAL : pass else : assert False , f \"unrecognized graph type { graph_type } \" return outcomes , probabilities plot_bar ( ax : Axes , hs : Sequence [ Tuple [ str , H ]], graph_type : TraditionalPlotType = TraditionalPlotType . NORMAL , alpha : float = DEFAULT_ALPHA , shadow : bool = False ) -> None Experimental This function should be considered experimental and may change or disappear in future versions. Plots a bar graph of hs using ax with alpha and shadow . hs is a sequence of two-tuples (pairs) of strings (labels) and H objects. Bars are interleaved and non-overlapping, so this is best suited to plots where hs contains a small number of histograms. Source code in anydyce/viz.py 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 @experimental @beartype def plot_bar ( ax : Axes , hs : Sequence [ Tuple [ str , H ]], graph_type : TraditionalPlotType = TraditionalPlotType . NORMAL , alpha : float = DEFAULT_ALPHA , shadow : bool = False , ) -> None : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Plots a bar graph of *hs* using [*ax*](https://matplotlib.org/stable/api/axes_api.html#the-axes-class) with *alpha* and *shadow*. *hs* is a sequence of two-tuples (pairs) of strings (labels) and ``H`` objects. Bars are interleaved and non-overlapping, so this is best suited to plots where *hs* contains a small number of histograms. \"\"\" ax . yaxis . set_major_formatter ( matplotlib . ticker . PercentFormatter ( xmax = 1 )) width = 0.8 bar_kw : Dict [ str , Any ] = dict ( alpha = alpha ) if hs : bar_kw . update ( dict ( width = width / len ( hs ))) if shadow : bar_kw . update ( dict ( path_effects = [ matplotlib . patheffects . withSimplePatchShadow (), matplotlib . patheffects . Normal (), ] ) ) unique_outcomes = sorted ( set ( chain . from_iterable ( h . outcomes () for _ , h in hs ))) if hs : ax . set_xticks ( unique_outcomes ) ax . set_xlim (( min ( unique_outcomes ) - 1.0 , max ( unique_outcomes ) + 1.0 )) for i , ( label , h ) in enumerate ( hs ): # Orient to the middle of each bar ((i + 0.5) ... ) whose width is an even share # of the total width (... * width / len(hs) ...) and center the whole cluster of # bars around the data point (... - width / 2) adj = ( i + 0.5 ) * width / len ( hs ) - width / 2 outcomes , values = values_xy_for_graph_type ( h , graph_type ) ax . bar ( [ outcome + adj for outcome in outcomes ], values , label = label , ** bar_kw , ) plot_line ( ax : Axes , hs : Sequence [ Tuple [ str , H ]], graph_type : TraditionalPlotType = TraditionalPlotType . NORMAL , alpha : float = DEFAULT_ALPHA , shadow : bool = False , markers : str = 'o' ) -> None Experimental This function should be considered experimental and may change or disappear in future versions. Plots a line graph of hs using ax with alpha and shadow . hs is a sequence of two-tuples (pairs) of strings (labels) and dyce . H objects. markers is cycled through when creating each line. For example, if markers is \"o+\" , the first histogram in hs will be plotted with a circle, the second will be plotted with a plus, the third will be plotted with a circle, the fourth will be plotted with a plus, and so on. Source code in anydyce/viz.py 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 @experimental @beartype def plot_line ( ax : Axes , hs : Sequence [ Tuple [ str , H ]], graph_type : TraditionalPlotType = TraditionalPlotType . NORMAL , alpha : float = DEFAULT_ALPHA , shadow : bool = False , markers : str = \"o\" , ) -> None : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Plots a line graph of *hs* using [*ax*](https://matplotlib.org/stable/api/axes_api.html#the-axes-class) with *alpha* and *shadow*. *hs* is a sequence of two-tuples (pairs) of strings (labels) and ``#!python dyce.H`` objects. *markers* is cycled through when creating each line. For example, if *markers* is ``#!python \"o+\"``, the first histogram in *hs* will be plotted with a circle, the second will be plotted with a plus, the third will be plotted with a circle, the fourth will be plotted with a plus, and so on. \"\"\" ax . yaxis . set_major_formatter ( matplotlib . ticker . PercentFormatter ( xmax = 1 )) plot_kw : Dict [ str , Any ] = dict ( alpha = alpha ) if shadow : plot_kw . update ( dict ( path_effects = [ matplotlib . patheffects . SimpleLineShadow (), matplotlib . patheffects . Normal (), ] ) ) unique_outcomes = sorted ( set ( chain . from_iterable ( h . outcomes () for _ , h in hs ))) if hs : ax . set_xticks ( unique_outcomes ) ax . set_xlim (( min ( unique_outcomes ) - 0.5 , max ( unique_outcomes ) + 0.5 )) for ( label , h ), marker in zip ( hs , cycle ( markers if markers else \" \" )): outcomes , values = values_xy_for_graph_type ( h , graph_type ) ax . plot ( outcomes , values , label = label , marker = marker , ** plot_kw ) plot_scatter ( ax : Axes , hs : Sequence [ Tuple [ str , H ]], graph_type : TraditionalPlotType = TraditionalPlotType . NORMAL , alpha : float = DEFAULT_ALPHA , shadow : bool = False , markers : str = '<>v^dPXo' ) -> None Experimental This function should be considered experimental and may change or disappear in future versions. Plots a scatter graph of hs using ax with alpha and shadow . hs is a sequence of two-tuples (pairs) of strings (labels) and dyce.H objects. markers is cycled through when creating each line. For example, if markers is \"o+\" , the first histogram in hs will be plotted with a circle, the second will be plotted with a plus, the third will be plotted with a circle, the fourth will be plotted with a plus, and so on. Source code in anydyce/viz.py 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 @experimental @beartype def plot_scatter ( ax : Axes , hs : Sequence [ Tuple [ str , H ]], graph_type : TraditionalPlotType = TraditionalPlotType . NORMAL , alpha : float = DEFAULT_ALPHA , shadow : bool = False , markers : str = \"<>v^dPXo\" , ) -> None : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Plots a scatter graph of *hs* using [*ax*](https://matplotlib.org/stable/api/axes_api.html#the-axes-class) with *alpha* and *shadow*. *hs* is a sequence of two-tuples (pairs) of strings (labels) and ``dyce.H`` objects. *markers* is cycled through when creating each line. For example, if *markers* is ``#!python \"o+\"``, the first histogram in *hs* will be plotted with a circle, the second will be plotted with a plus, the third will be plotted with a circle, the fourth will be plotted with a plus, and so on. \"\"\" ax . yaxis . set_major_formatter ( matplotlib . ticker . PercentFormatter ( xmax = 1 )) scatter_kw : Dict [ str , Any ] = dict ( alpha = alpha ) if shadow : scatter_kw . update ( dict ( path_effects = [ matplotlib . patheffects . SimpleLineShadow (), matplotlib . patheffects . Normal (), ] ) ) unique_outcomes = sorted ( set ( chain . from_iterable ( h . outcomes () for _ , h in hs ))) if hs : ax . set_xticks ( unique_outcomes ) ax . set_xlim (( min ( unique_outcomes ) - 0.5 , max ( unique_outcomes ) + 0.5 )) for ( label , h ), marker in zip ( hs , cycle ( markers if markers else \" \" )): outcomes , values = values_xy_for_graph_type ( h , graph_type ) ax . scatter ( outcomes , values , label = label , marker = marker , ** scatter_kw ) plot_burst ( ax : Axes , h_inner : H , h_outer : Optional [ H ] = None , title : Optional [ str ] = None , inner_formatter : HFormatterT = outcome_name_formatter , inner_cmap : Union [ str , matplotlib . colors . Colormap ] = DEFAULT_CMAP_BURST_INNER , outer_formatter : Optional [ HFormatterT ] = None , outer_cmap : Union [ str , matplotlib . colors . Colormap , None ] = None , text_color : str = DEFAULT_COLOR_TEXT , alpha : float = DEFAULT_ALPHA ) -> None Experimental This function should be considered experimental and may change or disappear in future versions. Creates a dual, overlapping, cocentric pie chart in ax , which can be useful for visualizing relative probability distributions. Examples can be found in Additional interfaces . Source code in anydyce/viz.py 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 @experimental @beartype def plot_burst ( ax : Axes , h_inner : H , h_outer : Optional [ H ] = None , title : Optional [ str ] = None , inner_formatter : HFormatterT = outcome_name_formatter , inner_cmap : Union [ str , matplotlib . colors . Colormap ] = DEFAULT_CMAP_BURST_INNER , outer_formatter : Optional [ HFormatterT ] = None , outer_cmap : Union [ str , matplotlib . colors . Colormap , None ] = None , text_color : str = DEFAULT_COLOR_TEXT , alpha : float = DEFAULT_ALPHA , ) -> None : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Creates a dual, overlapping, cocentric pie chart in [*ax*](https://matplotlib.org/stable/api/axes_api.html#the-axes-class), which can be useful for visualizing relative probability distributions. Examples can be found in [Additional interfaces](index.md#additional-interfaces). \"\"\" h_outer = h_inner if h_outer is None else h_outer if outer_formatter is None : if h_outer == h_inner : outer_formatter = probability_formatter else : outer_formatter = inner_formatter outer_cmap = inner_cmap if outer_cmap is None else outer_cmap inner = ( ( inner_formatter ( outcome , probability , h_inner ) if probability >= _LABEL_LIM else \"\" , probability , ) for outcome , probability in ( h_inner . distribution ()) ) inner_labels , inner_values = list ( zip ( * inner )) inner_colors = graph_colors ( inner_cmap , inner_values , alpha ) outer = ( ( outer_formatter ( outcome , probability , h_outer ) if probability >= _LABEL_LIM else \"\" , probability , ) for outcome , probability in ( h_outer . distribution ()) ) outer_labels , outer_values = list ( zip ( * outer )) outer_colors = graph_colors ( outer_cmap , outer_values , alpha ) if title : ax . set_title ( title , fontdict = { \"fontweight\" : \"bold\" , \"color\" : text_color }, pad = 24.0 , ) ax . pie ( outer_values , labels = outer_labels , radius = 1.0 , labeldistance = 1.15 , startangle = 90 , colors = outer_colors , textprops = dict ( color = text_color ), wedgeprops = dict ( width = 0.8 , edgecolor = text_color ), ) ax . pie ( inner_values , labels = inner_labels , radius = 0.85 , labeldistance = 0.7 , startangle = 90 , colors = inner_colors , textprops = dict ( color = text_color ), wedgeprops = dict ( width = 0.5 , edgecolor = text_color ), ) ax . set ( aspect = \"equal\" ) plot_burst_subplot ( h_inner : H , h_outer : Optional [ H ] = None , title : Optional [ str ] = None , inner_formatter : HFormatterT = outcome_name_formatter , inner_cmap : Union [ str , matplotlib . colors . Colormap ] = DEFAULT_CMAP_BURST_INNER , outer_formatter : Optional [ HFormatterT ] = None , outer_cmap : Union [ str , matplotlib . colors . Colormap , None ] = None , text_color : str = DEFAULT_COLOR_TEXT , alpha : float = DEFAULT_ALPHA ) -> Tuple [ Figure , Axes ] Experimental This function should be considered experimental and may change or disappear in future versions. Wrapper around plot_burst that creates a figure, axis pair, calls matplotlib.pyplot.tight_layout , and returns the pair. Source code in anydyce/viz.py 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 @experimental @beartype def plot_burst_subplot ( h_inner : H , h_outer : Optional [ H ] = None , title : Optional [ str ] = None , inner_formatter : HFormatterT = outcome_name_formatter , inner_cmap : Union [ str , matplotlib . colors . Colormap ] = DEFAULT_CMAP_BURST_INNER , outer_formatter : Optional [ HFormatterT ] = None , outer_cmap : Union [ str , matplotlib . colors . Colormap , None ] = None , text_color : str = DEFAULT_COLOR_TEXT , alpha : float = DEFAULT_ALPHA , ) -> Tuple [ Figure , Axes ]: r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Wrapper around [``plot_burst``][anydyce.viz.plot_burst] that creates a figure, axis pair, calls [``matplotlib.pyplot.tight_layout``](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.tight_layout.html), and returns the pair. \"\"\" fig , ax = matplotlib . pyplot . subplots () plot_burst ( ax , h_inner , h_outer , title , inner_formatter , inner_cmap , outer_formatter , outer_cmap , text_color , alpha , ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) matplotlib . pyplot . tight_layout () return fig , ax","title":"<tt>anydyce.viz</tt>"},{"location":"anydyce.viz/#anydyceviz-package-reference","text":"Experimental This package is an attempt to explore conveniences for integration with Matplotlib . It is an explicit departure from RFC 1925, \u00a7 2.2 and should be considered experimental. Be warned that future release may introduce incompatibilities or remove this package altogether. Feedback, suggestions, and contributions are welcome and appreciated.","title":"anydyce.viz package reference"},{"location":"anydyce.viz/#anydyce.viz.HLikeT","text":"","title":"HLikeT"},{"location":"anydyce.viz/#anydyce.viz.HPlotter","text":"Experimental This class should be considered experimental and may change or disappear in future versions. A plotter responsible for laying out control widgets and visualizing data provided by primary and optional secondary histograms. (See the plot method .) Source code in anydyce/viz.py 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 class HPlotter : r \"\"\" !!! warning \"Experimental\" This class should be considered experimental and may change or disappear in future versions. A plotter responsible for laying out control widgets and visualizing data provided by primary and optional secondary histograms. (See the [*plot* method][anydyce.viz.HPlotter.plot].) \"\"\" @abstractproperty def NAME ( self ) -> str : r \"\"\" The display name of the plotter. \"\"\" raise NotImplementedError @beartype def layout ( self , plot_widgets : PlotWidgets ) -> widgets . Widget : r \"\"\" Takes a set of widgets (*plot_widgets*) and returns a container (layout) widget selecting those needed by the plotter. \"\"\" return widgets . VBox ( [ plot_widgets . scale , plot_widgets . enable_cutoff , plot_widgets . cutoff , ] ) @abstractmethod def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ): r \"\"\" Creates and displays a visualization of the provided histograms. *fig* is the [``#!python matplotlib.figure.Figure``](https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure) in which the visualization should be constructed. *hs* is a sequence of three-tuples, a name, a primary histogram, and an optional secondary histogram (``#!python None`` if omitted). Plotters should implement this function to display at least the primary histogram and visually associate it with the name. \"\"\" raise NotImplementedError","title":"HPlotter"},{"location":"anydyce.viz/#anydyce.viz.HPlotter.NAME","text":"The display name of the plotter. Source code in anydyce/viz.py 476 477 478 479 480 481 @abstractproperty def NAME ( self ) -> str : r \"\"\" The display name of the plotter. \"\"\" raise NotImplementedError","title":"NAME()"},{"location":"anydyce.viz/#anydyce.viz.HPlotter.layout","text":"Takes a set of widgets ( plot_widgets ) and returns a container (layout) widget selecting those needed by the plotter. Source code in anydyce/viz.py 483 484 485 486 487 488 489 490 491 492 493 494 495 @beartype def layout ( self , plot_widgets : PlotWidgets ) -> widgets . Widget : r \"\"\" Takes a set of widgets (*plot_widgets*) and returns a container (layout) widget selecting those needed by the plotter. \"\"\" return widgets . VBox ( [ plot_widgets . scale , plot_widgets . enable_cutoff , plot_widgets . cutoff , ] )","title":"layout()"},{"location":"anydyce.viz/#anydyce.viz.HPlotter.plot","text":"Creates and displays a visualization of the provided histograms. fig is the matplotlib . figure . Figure in which the visualization should be constructed. hs is a sequence of three-tuples, a name, a primary histogram, and an optional secondary histogram ( None if omitted). Plotters should implement this function to display at least the primary histogram and visually associate it with the name. Source code in anydyce/viz.py 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 @abstractmethod def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ): r \"\"\" Creates and displays a visualization of the provided histograms. *fig* is the [``#!python matplotlib.figure.Figure``](https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure) in which the visualization should be constructed. *hs* is a sequence of three-tuples, a name, a primary histogram, and an optional secondary histogram (``#!python None`` if omitted). Plotters should implement this function to display at least the primary histogram and visually associate it with the name. \"\"\" raise NotImplementedError","title":"plot()"},{"location":"anydyce.viz/#anydyce.viz.BarHPlotter","text":"Bases: HPlotter Experimental This class should be considered experimental and may change or disappear in future versions. A plotter for creating a single vertical bar plot visualizing all primary histograms. Secondary histograms are ignored. Source code in anydyce/viz.py 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 class BarHPlotter ( HPlotter ): r \"\"\" !!! warning \"Experimental\" This class should be considered experimental and may change or disappear in future versions. A plotter for creating a single vertical bar plot visualizing all primary histograms. Secondary histograms are ignored. \"\"\" NAME = \"Bar Plot\" @beartype def layout ( self , plot_widgets : PlotWidgets ) -> widgets . Widget : cutoff_layout_widget = super () . layout ( plot_widgets ) return widgets . VBox ( [ widgets . HBox ( [ cutoff_layout_widget , plot_widgets . graph_type , widgets . VBox ( [ plot_widgets . alpha , plot_widgets . plot_style , plot_widgets . show_shadow , ] ), ] ), ] ) @beartype def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ) -> None : xmin , ymin , dx , dy = 0 , 0 , 1 , 1 ax = fig . add_axes (( xmin , ymin , dx , dy )) plot_bar ( ax , tuple (( label , h ) for label , h , _ in hs ), alpha = settings [ \"alpha\" ], graph_type = settings [ \"graph_type\" ], shadow = settings [ \"show_shadow\" ], ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) ax . legend ()","title":"BarHPlotter"},{"location":"anydyce.viz/#anydyce.viz.BarHPlotter.NAME","text":"","title":"NAME"},{"location":"anydyce.viz/#anydyce.viz.BarHPlotter.layout","text":"Source code in anydyce/viz.py 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 @beartype def layout ( self , plot_widgets : PlotWidgets ) -> widgets . Widget : cutoff_layout_widget = super () . layout ( plot_widgets ) return widgets . VBox ( [ widgets . HBox ( [ cutoff_layout_widget , plot_widgets . graph_type , widgets . VBox ( [ plot_widgets . alpha , plot_widgets . plot_style , plot_widgets . show_shadow , ] ), ] ), ] )","title":"layout()"},{"location":"anydyce.viz/#anydyce.viz.BarHPlotter.plot","text":"Source code in anydyce/viz.py 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 @beartype def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ) -> None : xmin , ymin , dx , dy = 0 , 0 , 1 , 1 ax = fig . add_axes (( xmin , ymin , dx , dy )) plot_bar ( ax , tuple (( label , h ) for label , h , _ in hs ), alpha = settings [ \"alpha\" ], graph_type = settings [ \"graph_type\" ], shadow = settings [ \"show_shadow\" ], ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) ax . legend ()","title":"plot()"},{"location":"anydyce.viz/#anydyce.viz.BurstHPlotter","text":"Bases: HPlotter Experimental This class should be considered experimental and may change or disappear in future versions. A plotter for creating one burst plot per primary histogram. If provided, associated secondary histograms are used for the outer rings. Source code in anydyce/viz.py 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 class BurstHPlotter ( HPlotter ): r \"\"\" !!! warning \"Experimental\" This class should be considered experimental and may change or disappear in future versions. A plotter for creating one burst plot per primary histogram. If provided, associated secondary histograms are used for the outer rings. \"\"\" NAME = \"Burst Plots\" @beartype def layout ( self , plot_widgets : PlotWidgets ) -> widgets . Widget : cutoff_layout_widget = super () . layout ( plot_widgets ) return widgets . VBox ( [ widgets . HBox ( [ widgets . VBox ( [ cutoff_layout_widget , plot_widgets . burst_swap , plot_widgets . burst_zero_fill_normalize , ] ), widgets . VBox ( [ plot_widgets . burst_cmap_inner , plot_widgets . burst_cmap_outer , plot_widgets . burst_cmap_link , ] ), widgets . VBox ( [ plot_widgets . alpha , plot_widgets . burst_color_text , plot_widgets . burst_color_bg , ] ), ] ), ] ) @beartype def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ) -> None : cols = 3 logical_rows = len ( hs ) // cols + ( len ( hs ) % cols != 0 ) # Height of row gaps in relation to height of figs gap_size_ratio = Fraction ( 2 , 5 ) total_gaps = max ( 0 , logical_rows - 1 ) fig . set_figwidth ( settings [ \"scale\" ]) fig . set_figheight ( settings [ \"scale\" ] / 16 * 5 * ( logical_rows + total_gaps * gap_size_ratio ) ) fig . set_facecolor ( settings [ \"burst_color_bg\" ]) actual_rows_per_fig = gap_size_ratio . denominator ** 2 actual_rows_per_gap = gap_size_ratio . numerator * gap_size_ratio . denominator total_actual_rows = ( logical_rows * actual_rows_per_fig + total_gaps * actual_rows_per_gap ) def _zero_fill_normalize (): unique_outcomes : Set [ RealLike ] = set () for i , ( _ , first_h , second_h ) in enumerate ( hs ): unique_outcomes . update ( first_h ) if second_h : unique_outcomes . update ( second_h ) for i , ( label , first_h , second_h ) in enumerate ( hs ): yield ( label , first_h . zero_fill ( unique_outcomes ), None if second_h is None else second_h . zero_fill ( unique_outcomes ), ) if settings [ \"burst_zero_fill_normalize\" ]: hs = tuple ( _zero_fill_normalize ()) for i , ( label , h_inner , h_outer ) in enumerate ( hs ): plot_burst_kw : Dict [ str , Any ] = dict ( title = label , inner_cmap = settings [ \"burst_cmap_inner\" ], outer_cmap = settings [ \"burst_cmap_outer\" ] if not settings [ \"burst_cmap_link\" ] else settings [ \"burst_cmap_inner\" ], text_color = settings [ \"burst_color_text\" ], alpha = settings [ \"alpha\" ], ) if h_outer is not None : if settings [ \"burst_swap\" ]: h_inner , h_outer = h_outer , h_inner logical_row = i // cols actual_fig_row_start = logical_row * ( actual_rows_per_gap + actual_rows_per_fig ) ax = matplotlib . pyplot . subplot2grid ( ( total_actual_rows , cols ), ( actual_fig_row_start , i % cols ), rowspan = actual_rows_per_fig , ) plot_burst ( ax , h_inner , h_outer , ** plot_burst_kw , )","title":"BurstHPlotter"},{"location":"anydyce.viz/#anydyce.viz.BurstHPlotter.NAME","text":"","title":"NAME"},{"location":"anydyce.viz/#anydyce.viz.BurstHPlotter.layout","text":"Source code in anydyce/viz.py 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 @beartype def layout ( self , plot_widgets : PlotWidgets ) -> widgets . Widget : cutoff_layout_widget = super () . layout ( plot_widgets ) return widgets . VBox ( [ widgets . HBox ( [ widgets . VBox ( [ cutoff_layout_widget , plot_widgets . burst_swap , plot_widgets . burst_zero_fill_normalize , ] ), widgets . VBox ( [ plot_widgets . burst_cmap_inner , plot_widgets . burst_cmap_outer , plot_widgets . burst_cmap_link , ] ), widgets . VBox ( [ plot_widgets . alpha , plot_widgets . burst_color_text , plot_widgets . burst_color_bg , ] ), ] ), ] )","title":"layout()"},{"location":"anydyce.viz/#anydyce.viz.BurstHPlotter.plot","text":"Source code in anydyce/viz.py 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 @beartype def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ) -> None : cols = 3 logical_rows = len ( hs ) // cols + ( len ( hs ) % cols != 0 ) # Height of row gaps in relation to height of figs gap_size_ratio = Fraction ( 2 , 5 ) total_gaps = max ( 0 , logical_rows - 1 ) fig . set_figwidth ( settings [ \"scale\" ]) fig . set_figheight ( settings [ \"scale\" ] / 16 * 5 * ( logical_rows + total_gaps * gap_size_ratio ) ) fig . set_facecolor ( settings [ \"burst_color_bg\" ]) actual_rows_per_fig = gap_size_ratio . denominator ** 2 actual_rows_per_gap = gap_size_ratio . numerator * gap_size_ratio . denominator total_actual_rows = ( logical_rows * actual_rows_per_fig + total_gaps * actual_rows_per_gap ) def _zero_fill_normalize (): unique_outcomes : Set [ RealLike ] = set () for i , ( _ , first_h , second_h ) in enumerate ( hs ): unique_outcomes . update ( first_h ) if second_h : unique_outcomes . update ( second_h ) for i , ( label , first_h , second_h ) in enumerate ( hs ): yield ( label , first_h . zero_fill ( unique_outcomes ), None if second_h is None else second_h . zero_fill ( unique_outcomes ), ) if settings [ \"burst_zero_fill_normalize\" ]: hs = tuple ( _zero_fill_normalize ()) for i , ( label , h_inner , h_outer ) in enumerate ( hs ): plot_burst_kw : Dict [ str , Any ] = dict ( title = label , inner_cmap = settings [ \"burst_cmap_inner\" ], outer_cmap = settings [ \"burst_cmap_outer\" ] if not settings [ \"burst_cmap_link\" ] else settings [ \"burst_cmap_inner\" ], text_color = settings [ \"burst_color_text\" ], alpha = settings [ \"alpha\" ], ) if h_outer is not None : if settings [ \"burst_swap\" ]: h_inner , h_outer = h_outer , h_inner logical_row = i // cols actual_fig_row_start = logical_row * ( actual_rows_per_gap + actual_rows_per_fig ) ax = matplotlib . pyplot . subplot2grid ( ( total_actual_rows , cols ), ( actual_fig_row_start , i % cols ), rowspan = actual_rows_per_fig , ) plot_burst ( ax , h_inner , h_outer , ** plot_burst_kw , )","title":"plot()"},{"location":"anydyce.viz/#anydyce.viz.HorizontalBarHPlotter","text":"Bases: BarHPlotter Experimental This class should be considered experimental and may change or disappear in future versions. A plotter for creating one horizontal bar plot per primary histogram. Secondary histograms are ignored. Source code in anydyce/viz.py 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 class HorizontalBarHPlotter ( BarHPlotter ): r \"\"\" !!! warning \"Experimental\" This class should be considered experimental and may change or disappear in future versions. A plotter for creating one horizontal bar plot per primary histogram. Secondary histograms are ignored. \"\"\" NAME = \"Horizontal Bar Plots\" @beartype def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ) -> None : total_outcomes = sum ( 1 for _ in chain . from_iterable ( h . outcomes () for _ , h , _ in hs ) ) total_height = total_outcomes + 1 # one extra to accommodate the axis inches_per_height_unit = settings [ \"scale\" ] / 64 fig . set_figwidth ( settings [ \"scale\" ]) fig . set_figheight ( total_height * inches_per_height_unit ) grid = ( total_height , 1 ) top = 0 ax = first_ax = None barh_kw : Dict [ str , Any ] = dict ( alpha = settings [ \"alpha\" ]) if settings [ \"show_shadow\" ]: barh_kw . update ( dict ( path_effects = [ matplotlib . patheffects . withSimplePatchShadow (), matplotlib . patheffects . Normal (), ] ) ) plot_style = settings [ \"plot_style\" ] if ( plot_style in matplotlib . style . library and \"axes.prop_cycle\" in matplotlib . style . library [ plot_style ] and \"color\" in matplotlib . style . library [ plot_style ][ \"axes.prop_cycle\" ] ): # Our current style has a cycler with colors, so use it cycler = matplotlib . style . library [ plot_style ][ \"axes.prop_cycle\" ] else : # Revert to the global default cycler = matplotlib . rcParams [ \"axes.prop_cycle\" ] color_iter = cycle ( cycler . by_key () . get ( \"color\" , ( None ,))) for i , ( label , h , _ ) in enumerate ( hs ): outcomes , values = values_xy_for_graph_type ( h , settings [ \"graph_type\" ]) loc = ( top , 0 ) rowspan = len ( outcomes ) top += rowspan if first_ax is None : first_ax = ax = matplotlib . pyplot . subplot2grid ( grid , loc , rowspan = rowspan ) else : ax = matplotlib . pyplot . subplot2grid ( grid , loc , rowspan = rowspan , sharex = first_ax ) ax . set_yticks ( outcomes ) ax . tick_params ( labelbottom = False ) ax . set_ylim (( max ( outcomes ) + 0.5 , min ( outcomes ) - 0.5 )) ax . barh ( outcomes , values , color = next ( color_iter ), label = label , ** barh_kw ) ax . legend ( loc = \"upper right\" ) if ax is not None : ax . tick_params ( labelbottom = True ) ax . xaxis . set_major_formatter ( matplotlib . ticker . PercentFormatter ( xmax = 1 ))","title":"HorizontalBarHPlotter"},{"location":"anydyce.viz/#anydyce.viz.HorizontalBarHPlotter.NAME","text":"","title":"NAME"},{"location":"anydyce.viz/#anydyce.viz.HorizontalBarHPlotter.plot","text":"Source code in anydyce/viz.py 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 @beartype def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ) -> None : total_outcomes = sum ( 1 for _ in chain . from_iterable ( h . outcomes () for _ , h , _ in hs ) ) total_height = total_outcomes + 1 # one extra to accommodate the axis inches_per_height_unit = settings [ \"scale\" ] / 64 fig . set_figwidth ( settings [ \"scale\" ]) fig . set_figheight ( total_height * inches_per_height_unit ) grid = ( total_height , 1 ) top = 0 ax = first_ax = None barh_kw : Dict [ str , Any ] = dict ( alpha = settings [ \"alpha\" ]) if settings [ \"show_shadow\" ]: barh_kw . update ( dict ( path_effects = [ matplotlib . patheffects . withSimplePatchShadow (), matplotlib . patheffects . Normal (), ] ) ) plot_style = settings [ \"plot_style\" ] if ( plot_style in matplotlib . style . library and \"axes.prop_cycle\" in matplotlib . style . library [ plot_style ] and \"color\" in matplotlib . style . library [ plot_style ][ \"axes.prop_cycle\" ] ): # Our current style has a cycler with colors, so use it cycler = matplotlib . style . library [ plot_style ][ \"axes.prop_cycle\" ] else : # Revert to the global default cycler = matplotlib . rcParams [ \"axes.prop_cycle\" ] color_iter = cycle ( cycler . by_key () . get ( \"color\" , ( None ,))) for i , ( label , h , _ ) in enumerate ( hs ): outcomes , values = values_xy_for_graph_type ( h , settings [ \"graph_type\" ]) loc = ( top , 0 ) rowspan = len ( outcomes ) top += rowspan if first_ax is None : first_ax = ax = matplotlib . pyplot . subplot2grid ( grid , loc , rowspan = rowspan ) else : ax = matplotlib . pyplot . subplot2grid ( grid , loc , rowspan = rowspan , sharex = first_ax ) ax . set_yticks ( outcomes ) ax . tick_params ( labelbottom = False ) ax . set_ylim (( max ( outcomes ) + 0.5 , min ( outcomes ) - 0.5 )) ax . barh ( outcomes , values , color = next ( color_iter ), label = label , ** barh_kw ) ax . legend ( loc = \"upper right\" ) if ax is not None : ax . tick_params ( labelbottom = True ) ax . xaxis . set_major_formatter ( matplotlib . ticker . PercentFormatter ( xmax = 1 ))","title":"plot()"},{"location":"anydyce.viz/#anydyce.viz.LineHPlotter","text":"Bases: HPlotter Experimental This class should be considered experimental and may change or disappear in future versions. A plotter for creating a single line plot visualizing all primary histograms. Secondary histograms are ignored. Source code in anydyce/viz.py 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 class LineHPlotter ( HPlotter ): r \"\"\" !!! warning \"Experimental\" This class should be considered experimental and may change or disappear in future versions. A plotter for creating a single line plot visualizing all primary histograms. Secondary histograms are ignored. \"\"\" NAME = \"Line Plot\" @beartype def layout ( self , plot_widgets : PlotWidgets ) -> widgets . Widget : cutoff_layout_widget = super () . layout ( plot_widgets ) return widgets . VBox ( [ widgets . HBox ( [ cutoff_layout_widget , plot_widgets . graph_type , widgets . VBox ( [ plot_widgets . alpha , plot_widgets . plot_style , plot_widgets . show_shadow , plot_widgets . markers , ] ), ] ), ] ) @beartype def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ) -> None : xmin , ymin , dx , dy = 0 , 0 , 1 , 1 ax = fig . add_axes (( xmin , ymin , dx , dy )) plot_line ( ax , tuple (( label , h ) for label , h , _ in hs ), alpha = settings [ \"alpha\" ], graph_type = settings [ \"graph_type\" ], markers = settings [ \"markers\" ], shadow = settings [ \"show_shadow\" ], ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) ax . legend ()","title":"LineHPlotter"},{"location":"anydyce.viz/#anydyce.viz.LineHPlotter.NAME","text":"","title":"NAME"},{"location":"anydyce.viz/#anydyce.viz.LineHPlotter.layout","text":"Source code in anydyce/viz.py 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 @beartype def layout ( self , plot_widgets : PlotWidgets ) -> widgets . Widget : cutoff_layout_widget = super () . layout ( plot_widgets ) return widgets . VBox ( [ widgets . HBox ( [ cutoff_layout_widget , plot_widgets . graph_type , widgets . VBox ( [ plot_widgets . alpha , plot_widgets . plot_style , plot_widgets . show_shadow , plot_widgets . markers , ] ), ] ), ] )","title":"layout()"},{"location":"anydyce.viz/#anydyce.viz.LineHPlotter.plot","text":"Source code in anydyce/viz.py 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 @beartype def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ) -> None : xmin , ymin , dx , dy = 0 , 0 , 1 , 1 ax = fig . add_axes (( xmin , ymin , dx , dy )) plot_line ( ax , tuple (( label , h ) for label , h , _ in hs ), alpha = settings [ \"alpha\" ], graph_type = settings [ \"graph_type\" ], markers = settings [ \"markers\" ], shadow = settings [ \"show_shadow\" ], ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) ax . legend ()","title":"plot()"},{"location":"anydyce.viz/#anydyce.viz.ScatterHPlotter","text":"Bases: LineHPlotter Experimental This class should be considered experimental and may change or disappear in future versions. A plotter for creating a single scatter plot visualizing all primary histograms. Secondary histograms are ignored. Source code in anydyce/viz.py 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 class ScatterHPlotter ( LineHPlotter ): r \"\"\" !!! warning \"Experimental\" This class should be considered experimental and may change or disappear in future versions. A plotter for creating a single scatter plot visualizing all primary histograms. Secondary histograms are ignored. \"\"\" NAME = \"Scatter Plot\" @beartype def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ) -> None : xmin , ymin , dx , dy = 0 , 0 , 1 , 1 ax = fig . add_axes (( xmin , ymin , dx , dy )) plot_scatter ( ax , tuple (( label , h ) for label , h , _ in hs ), alpha = settings [ \"alpha\" ], graph_type = settings [ \"graph_type\" ], markers = settings [ \"markers\" ], shadow = settings [ \"show_shadow\" ], ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) ax . legend ()","title":"ScatterHPlotter"},{"location":"anydyce.viz/#anydyce.viz.ScatterHPlotter.NAME","text":"","title":"NAME"},{"location":"anydyce.viz/#anydyce.viz.ScatterHPlotter.plot","text":"Source code in anydyce/viz.py 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 @beartype def plot ( self , fig : Figure , hs : Sequence [ Tuple [ str , H , Optional [ H ]]], settings : SettingsDict , ) -> None : xmin , ymin , dx , dy = 0 , 0 , 1 , 1 ax = fig . add_axes (( xmin , ymin , dx , dy )) plot_scatter ( ax , tuple (( label , h ) for label , h , _ in hs ), alpha = settings [ \"alpha\" ], graph_type = settings [ \"graph_type\" ], markers = settings [ \"markers\" ], shadow = settings [ \"show_shadow\" ], ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) ax . legend ()","title":"plot()"},{"location":"anydyce.viz/#anydyce.viz.PlotWidgets","text":"Bases: _PlotWidgetsDataclass Experimental This class should be considered experimental and may change or disappear in future versions. Source code in anydyce/viz.py 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 class PlotWidgets ( _PlotWidgetsDataclass ): r \"\"\" !!! warning \"Experimental\" This class should be considered experimental and may change or disappear in future versions. \"\"\" def __init__ ( self , * , initial_alpha : float = DEFAULT_ALPHA , initial_burst_cmap_inner : str = DEFAULT_CMAP_BURST_INNER , initial_burst_cmap_link : bool = True , initial_burst_cmap_outer : str = DEFAULT_CMAP_BURST_OUTER , initial_burst_color_bg : str = \"white\" , initial_burst_color_text : str = DEFAULT_COLOR_TEXT , initial_burst_swap : bool = False , initial_burst_zero_fill_normalize : bool = False , initial_enable_cutoff : bool = False , initial_graph_type : TraditionalPlotType = TraditionalPlotType . NORMAL , initial_markers : str = \"oX^v><dP\" , initial_plot_style : str = \"bmh\" , initial_show_shadow : bool = False , ): super () . __init__ () if initial_plot_style not in matplotlib . style . available : warnings . warn ( f \"unrecognized plot style { initial_plot_style !r} ; reverting to 'default'\" , category = RuntimeWarning , ) initial_plot_style = \"default\" self . alpha . value = initial_alpha self . burst_cmap_inner . value = initial_burst_cmap_inner self . burst_cmap_link . value = initial_burst_cmap_link self . burst_cmap_outer . disabled = initial_burst_cmap_link self . burst_cmap_outer . value = initial_burst_cmap_outer self . burst_color_bg . value = initial_burst_color_bg self . burst_color_text . value = initial_burst_color_text self . burst_swap . value = initial_burst_swap self . burst_zero_fill_normalize . value = initial_burst_zero_fill_normalize self . cutoff . disabled = not initial_enable_cutoff self . enable_cutoff . value = initial_enable_cutoff self . graph_type . value = initial_graph_type self . markers . value = initial_markers self . plot_style . value = initial_plot_style self . show_shadow . value = initial_show_shadow def _handle_burst_cmap_link ( change ) -> None : self . burst_cmap_outer . disabled = change [ \"new\" ] self . burst_cmap_link . observe ( _handle_burst_cmap_link , names = \"value\" ) def _handle_cutoff ( change ) -> None : self . cutoff . disabled = not change [ \"new\" ] self . enable_cutoff . observe ( _handle_cutoff , names = \"value\" ) def asdict ( self ) -> Dict [ str , Any ]: return dict (( field . name , getattr ( self , field . name )) for field in fields ( self ))","title":"PlotWidgets"},{"location":"anydyce.viz/#anydyce.viz.PlotWidgets.__init__","text":"Source code in anydyce/viz.py 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 def __init__ ( self , * , initial_alpha : float = DEFAULT_ALPHA , initial_burst_cmap_inner : str = DEFAULT_CMAP_BURST_INNER , initial_burst_cmap_link : bool = True , initial_burst_cmap_outer : str = DEFAULT_CMAP_BURST_OUTER , initial_burst_color_bg : str = \"white\" , initial_burst_color_text : str = DEFAULT_COLOR_TEXT , initial_burst_swap : bool = False , initial_burst_zero_fill_normalize : bool = False , initial_enable_cutoff : bool = False , initial_graph_type : TraditionalPlotType = TraditionalPlotType . NORMAL , initial_markers : str = \"oX^v><dP\" , initial_plot_style : str = \"bmh\" , initial_show_shadow : bool = False , ): super () . __init__ () if initial_plot_style not in matplotlib . style . available : warnings . warn ( f \"unrecognized plot style { initial_plot_style !r} ; reverting to 'default'\" , category = RuntimeWarning , ) initial_plot_style = \"default\" self . alpha . value = initial_alpha self . burst_cmap_inner . value = initial_burst_cmap_inner self . burst_cmap_link . value = initial_burst_cmap_link self . burst_cmap_outer . disabled = initial_burst_cmap_link self . burst_cmap_outer . value = initial_burst_cmap_outer self . burst_color_bg . value = initial_burst_color_bg self . burst_color_text . value = initial_burst_color_text self . burst_swap . value = initial_burst_swap self . burst_zero_fill_normalize . value = initial_burst_zero_fill_normalize self . cutoff . disabled = not initial_enable_cutoff self . enable_cutoff . value = initial_enable_cutoff self . graph_type . value = initial_graph_type self . markers . value = initial_markers self . plot_style . value = initial_plot_style self . show_shadow . value = initial_show_shadow def _handle_burst_cmap_link ( change ) -> None : self . burst_cmap_outer . disabled = change [ \"new\" ] self . burst_cmap_link . observe ( _handle_burst_cmap_link , names = \"value\" ) def _handle_cutoff ( change ) -> None : self . cutoff . disabled = not change [ \"new\" ] self . enable_cutoff . observe ( _handle_cutoff , names = \"value\" )","title":"__init__()"},{"location":"anydyce.viz/#anydyce.viz.PlotWidgets.asdict","text":"Source code in anydyce/viz.py 460 461 def asdict ( self ) -> Dict [ str , Any ]: return dict (( field . name , getattr ( self , field . name )) for field in fields ( self ))","title":"asdict()"},{"location":"anydyce.viz/#anydyce.viz.cumulative_probability_formatter","text":"Experimental This function should be considered experimental and may change or disappear in future versions. Formatter for use with plot_burst to inefficiently (i.e., \\(O \\left( {n} ^ {2} \\right)\\) ) calculate and format cumulative probability pairs for outcome in h . Source code in anydyce/viz.py 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 @experimental @beartype def cumulative_probability_formatter ( outcome : RealLike , probability : Fraction , h : H , ) -> str : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Formatter for use with [``plot_burst``][anydyce.viz.plot_burst] to inefficiently (i.e., $O \\left( {n} ^ {2} \\right)$) calculate and format cumulative probability pairs for *outcome* in *h*. \"\"\" le_total , ge_total = Fraction ( 0 ), Fraction ( 1 ) for h_outcome , h_probability in h . distribution (): le_total += h_probability if math . isclose ( h_outcome , outcome ): return f \" { outcome } { float ( probability ) : .2% } ; \u2265 { float ( le_total ) : .2% } ; \u2264 { float ( ge_total ) : .2% } \" ge_total -= h_probability return f \" { outcome } { float ( probability ) : .2% } \"","title":"cumulative_probability_formatter()"},{"location":"anydyce.viz/#anydyce.viz.outcome_name_formatter","text":"Experimental This function should be considered experimental and may change or disappear in future versions. Formatter for use with plot_burst to format each outcome . If outcome has a name attribute (e.g., as with an Enum ), that is used. Otherwise outcome is passed to str and the result is used. Source code in anydyce/viz.py 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 @experimental @beartype def outcome_name_formatter ( outcome : RealLike , _ , __ ) -> str : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Formatter for use with [``plot_burst``][anydyce.viz.plot_burst] to format each *outcome*. If *outcome* has a *name* attribute (e.g., as with an ``#!python Enum``), that is used. Otherwise *outcome* is passed to ``#!pythonn str`` and the result is used. \"\"\" if hasattr ( outcome , \"name\" ): return f \" { outcome . name } \" # type: ignore [attr-defined] else : return f \" { str ( outcome ) } \"","title":"outcome_name_formatter()"},{"location":"anydyce.viz/#anydyce.viz.outcome_name_probability_formatter","text":"Experimental This function should be considered experimental and may change or disappear in future versions. Formatter for use with plot_burst to display each outcome and probability (separated by a newline). If outcome has a name attribute (e.g., as with an Enum ), that is used. Otherwise outcome is passed to str and the result is used. probability is passed to float and formatted to two decimal places. Source code in anydyce/viz.py 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 @experimental @beartype def outcome_name_probability_formatter ( outcome : RealLike , probability : Fraction , __ ) -> str : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Formatter for use with [``plot_burst``][anydyce.viz.plot_burst] to display each outcome and probability (separated by a newline). If *outcome* has a *name* attribute (e.g., as with an ``#!python Enum``), that is used. Otherwise *outcome* is passed to ``#!pythonn str`` and the result is used. *probability* is passed to ``#!python float`` and formatted to two decimal places. \"\"\" if hasattr ( outcome , \"name\" ): return f \" { outcome . name } \\n { float ( probability ) : .2% } \" # type: ignore [attr-defined] else : return f \" { str ( outcome ) } \\n { float ( probability ) : .2% } \"","title":"outcome_name_probability_formatter()"},{"location":"anydyce.viz/#anydyce.viz.limit_for_display","text":"Experimental This function should be considered experimental and may change or disappear in future versions. Discards outcomes in h , starting with the smallest counts as long as the total discarded in proportion to h . total does not exceed cutoff . This can be useful in speeding up plots where there are large number of negligible probabilities. 1 2 3 4 5 6 7 8 9 10 >>> from anydyce.viz import limit_for_display >>> from dyce import H >>> from fractions import Fraction >>> h = H ({ 1 : 1 , 2 : 2 , 3 : 3 , 4 : 4 , 5 : 5 , 6 : 6 }) >>> h . total 21 >>> limit_for_display ( h , cutoff = Fraction ( 5 , 21 )) H ({ 3 : 3 , 4 : 4 , 5 : 5 , 6 : 6 }) >>> limit_for_display ( h , cutoff = Fraction ( 6 , 21 )) H ({ 4 : 4 , 5 : 5 , 6 : 6 }) Source code in anydyce/viz.py 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 @experimental @beartype def limit_for_display ( h : H , cutoff ) -> H : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Discards outcomes in *h*, starting with the smallest counts as long as the total discarded in proportion to ``#!python h.total`` does not exceed *cutoff*. This can be useful in speeding up plots where there are large number of negligible probabilities. ``` python >>> from anydyce.viz import limit_for_display >>> from dyce import H >>> from fractions import Fraction >>> h = H({1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6}) >>> h.total 21 >>> limit_for_display(h, cutoff=Fraction(5, 21)) H({3: 3, 4: 4, 5: 5, 6: 6}) >>> limit_for_display(h, cutoff=Fraction(6, 21)) H({4: 4, 5: 5, 6: 6}) ``` \"\"\" if cutoff < 0 or cutoff > 1 : raise ValueError ( f \"cutoff ( { cutoff } ) must be between zero and one, inclusive\" ) cutoff_count = int ( cutoff * h . total ) if cutoff_count == 0 : return h def _cull () -> Iterator [ Tuple [ RealLike , int ]]: so_far = 0 for outcome , count in sorted ( h . items (), key = itemgetter ( 1 )): so_far += count if so_far > cutoff_count : yield outcome , count return H ( _cull ())","title":"limit_for_display()"},{"location":"anydyce.viz/#anydyce.viz.probability_formatter","text":"Experimental This function should be considered experimental and may change or disappear in future versions. Formatter for use with plot_burst to display the probability for each outcome (but not the outcome itself). probability is passed to float and formatted to two decimal places. Source code in anydyce/viz.py 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 @experimental @beartype def probability_formatter ( _ , probability : Fraction , __ ) -> str : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Formatter for use with [``plot_burst``][anydyce.viz.plot_burst] to display the probability for each outcome (but not the outcome itself). *probability* is passed to ``#!python float`` and formatted to two decimal places. \"\"\" return f \" { float ( probability ) : .2% } \"","title":"probability_formatter()"},{"location":"anydyce.viz/#anydyce.viz.values_xy_for_graph_type","text":"Source code in anydyce/viz.py 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 @experimental @beartype def values_xy_for_graph_type ( h : H , graph_type : TraditionalPlotType ) -> Tuple [ Tuple [ RealLike , ... ], Tuple [ float , ... ]]: outcomes , probabilities = h . distribution_xy () if graph_type is TraditionalPlotType . AT_LEAST : probabilities = tuple ( accumulate ( probabilities , __sub__ , initial = 1.0 ))[: - 1 ] elif graph_type is TraditionalPlotType . AT_MOST : probabilities = tuple ( accumulate ( probabilities , __add__ , initial = 0.0 ))[ 1 :] elif graph_type is TraditionalPlotType . NORMAL : pass else : assert False , f \"unrecognized graph type { graph_type } \" return outcomes , probabilities","title":"values_xy_for_graph_type()"},{"location":"anydyce.viz/#anydyce.viz.plot_bar","text":"Experimental This function should be considered experimental and may change or disappear in future versions. Plots a bar graph of hs using ax with alpha and shadow . hs is a sequence of two-tuples (pairs) of strings (labels) and H objects. Bars are interleaved and non-overlapping, so this is best suited to plots where hs contains a small number of histograms. Source code in anydyce/viz.py 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 @experimental @beartype def plot_bar ( ax : Axes , hs : Sequence [ Tuple [ str , H ]], graph_type : TraditionalPlotType = TraditionalPlotType . NORMAL , alpha : float = DEFAULT_ALPHA , shadow : bool = False , ) -> None : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Plots a bar graph of *hs* using [*ax*](https://matplotlib.org/stable/api/axes_api.html#the-axes-class) with *alpha* and *shadow*. *hs* is a sequence of two-tuples (pairs) of strings (labels) and ``H`` objects. Bars are interleaved and non-overlapping, so this is best suited to plots where *hs* contains a small number of histograms. \"\"\" ax . yaxis . set_major_formatter ( matplotlib . ticker . PercentFormatter ( xmax = 1 )) width = 0.8 bar_kw : Dict [ str , Any ] = dict ( alpha = alpha ) if hs : bar_kw . update ( dict ( width = width / len ( hs ))) if shadow : bar_kw . update ( dict ( path_effects = [ matplotlib . patheffects . withSimplePatchShadow (), matplotlib . patheffects . Normal (), ] ) ) unique_outcomes = sorted ( set ( chain . from_iterable ( h . outcomes () for _ , h in hs ))) if hs : ax . set_xticks ( unique_outcomes ) ax . set_xlim (( min ( unique_outcomes ) - 1.0 , max ( unique_outcomes ) + 1.0 )) for i , ( label , h ) in enumerate ( hs ): # Orient to the middle of each bar ((i + 0.5) ... ) whose width is an even share # of the total width (... * width / len(hs) ...) and center the whole cluster of # bars around the data point (... - width / 2) adj = ( i + 0.5 ) * width / len ( hs ) - width / 2 outcomes , values = values_xy_for_graph_type ( h , graph_type ) ax . bar ( [ outcome + adj for outcome in outcomes ], values , label = label , ** bar_kw , )","title":"plot_bar()"},{"location":"anydyce.viz/#anydyce.viz.plot_line","text":"Experimental This function should be considered experimental and may change or disappear in future versions. Plots a line graph of hs using ax with alpha and shadow . hs is a sequence of two-tuples (pairs) of strings (labels) and dyce . H objects. markers is cycled through when creating each line. For example, if markers is \"o+\" , the first histogram in hs will be plotted with a circle, the second will be plotted with a plus, the third will be plotted with a circle, the fourth will be plotted with a plus, and so on. Source code in anydyce/viz.py 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 @experimental @beartype def plot_line ( ax : Axes , hs : Sequence [ Tuple [ str , H ]], graph_type : TraditionalPlotType = TraditionalPlotType . NORMAL , alpha : float = DEFAULT_ALPHA , shadow : bool = False , markers : str = \"o\" , ) -> None : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Plots a line graph of *hs* using [*ax*](https://matplotlib.org/stable/api/axes_api.html#the-axes-class) with *alpha* and *shadow*. *hs* is a sequence of two-tuples (pairs) of strings (labels) and ``#!python dyce.H`` objects. *markers* is cycled through when creating each line. For example, if *markers* is ``#!python \"o+\"``, the first histogram in *hs* will be plotted with a circle, the second will be plotted with a plus, the third will be plotted with a circle, the fourth will be plotted with a plus, and so on. \"\"\" ax . yaxis . set_major_formatter ( matplotlib . ticker . PercentFormatter ( xmax = 1 )) plot_kw : Dict [ str , Any ] = dict ( alpha = alpha ) if shadow : plot_kw . update ( dict ( path_effects = [ matplotlib . patheffects . SimpleLineShadow (), matplotlib . patheffects . Normal (), ] ) ) unique_outcomes = sorted ( set ( chain . from_iterable ( h . outcomes () for _ , h in hs ))) if hs : ax . set_xticks ( unique_outcomes ) ax . set_xlim (( min ( unique_outcomes ) - 0.5 , max ( unique_outcomes ) + 0.5 )) for ( label , h ), marker in zip ( hs , cycle ( markers if markers else \" \" )): outcomes , values = values_xy_for_graph_type ( h , graph_type ) ax . plot ( outcomes , values , label = label , marker = marker , ** plot_kw )","title":"plot_line()"},{"location":"anydyce.viz/#anydyce.viz.plot_scatter","text":"Experimental This function should be considered experimental and may change or disappear in future versions. Plots a scatter graph of hs using ax with alpha and shadow . hs is a sequence of two-tuples (pairs) of strings (labels) and dyce.H objects. markers is cycled through when creating each line. For example, if markers is \"o+\" , the first histogram in hs will be plotted with a circle, the second will be plotted with a plus, the third will be plotted with a circle, the fourth will be plotted with a plus, and so on. Source code in anydyce/viz.py 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 @experimental @beartype def plot_scatter ( ax : Axes , hs : Sequence [ Tuple [ str , H ]], graph_type : TraditionalPlotType = TraditionalPlotType . NORMAL , alpha : float = DEFAULT_ALPHA , shadow : bool = False , markers : str = \"<>v^dPXo\" , ) -> None : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Plots a scatter graph of *hs* using [*ax*](https://matplotlib.org/stable/api/axes_api.html#the-axes-class) with *alpha* and *shadow*. *hs* is a sequence of two-tuples (pairs) of strings (labels) and ``dyce.H`` objects. *markers* is cycled through when creating each line. For example, if *markers* is ``#!python \"o+\"``, the first histogram in *hs* will be plotted with a circle, the second will be plotted with a plus, the third will be plotted with a circle, the fourth will be plotted with a plus, and so on. \"\"\" ax . yaxis . set_major_formatter ( matplotlib . ticker . PercentFormatter ( xmax = 1 )) scatter_kw : Dict [ str , Any ] = dict ( alpha = alpha ) if shadow : scatter_kw . update ( dict ( path_effects = [ matplotlib . patheffects . SimpleLineShadow (), matplotlib . patheffects . Normal (), ] ) ) unique_outcomes = sorted ( set ( chain . from_iterable ( h . outcomes () for _ , h in hs ))) if hs : ax . set_xticks ( unique_outcomes ) ax . set_xlim (( min ( unique_outcomes ) - 0.5 , max ( unique_outcomes ) + 0.5 )) for ( label , h ), marker in zip ( hs , cycle ( markers if markers else \" \" )): outcomes , values = values_xy_for_graph_type ( h , graph_type ) ax . scatter ( outcomes , values , label = label , marker = marker , ** scatter_kw )","title":"plot_scatter()"},{"location":"anydyce.viz/#anydyce.viz.plot_burst","text":"Experimental This function should be considered experimental and may change or disappear in future versions. Creates a dual, overlapping, cocentric pie chart in ax , which can be useful for visualizing relative probability distributions. Examples can be found in Additional interfaces . Source code in anydyce/viz.py 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 @experimental @beartype def plot_burst ( ax : Axes , h_inner : H , h_outer : Optional [ H ] = None , title : Optional [ str ] = None , inner_formatter : HFormatterT = outcome_name_formatter , inner_cmap : Union [ str , matplotlib . colors . Colormap ] = DEFAULT_CMAP_BURST_INNER , outer_formatter : Optional [ HFormatterT ] = None , outer_cmap : Union [ str , matplotlib . colors . Colormap , None ] = None , text_color : str = DEFAULT_COLOR_TEXT , alpha : float = DEFAULT_ALPHA , ) -> None : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Creates a dual, overlapping, cocentric pie chart in [*ax*](https://matplotlib.org/stable/api/axes_api.html#the-axes-class), which can be useful for visualizing relative probability distributions. Examples can be found in [Additional interfaces](index.md#additional-interfaces). \"\"\" h_outer = h_inner if h_outer is None else h_outer if outer_formatter is None : if h_outer == h_inner : outer_formatter = probability_formatter else : outer_formatter = inner_formatter outer_cmap = inner_cmap if outer_cmap is None else outer_cmap inner = ( ( inner_formatter ( outcome , probability , h_inner ) if probability >= _LABEL_LIM else \"\" , probability , ) for outcome , probability in ( h_inner . distribution ()) ) inner_labels , inner_values = list ( zip ( * inner )) inner_colors = graph_colors ( inner_cmap , inner_values , alpha ) outer = ( ( outer_formatter ( outcome , probability , h_outer ) if probability >= _LABEL_LIM else \"\" , probability , ) for outcome , probability in ( h_outer . distribution ()) ) outer_labels , outer_values = list ( zip ( * outer )) outer_colors = graph_colors ( outer_cmap , outer_values , alpha ) if title : ax . set_title ( title , fontdict = { \"fontweight\" : \"bold\" , \"color\" : text_color }, pad = 24.0 , ) ax . pie ( outer_values , labels = outer_labels , radius = 1.0 , labeldistance = 1.15 , startangle = 90 , colors = outer_colors , textprops = dict ( color = text_color ), wedgeprops = dict ( width = 0.8 , edgecolor = text_color ), ) ax . pie ( inner_values , labels = inner_labels , radius = 0.85 , labeldistance = 0.7 , startangle = 90 , colors = inner_colors , textprops = dict ( color = text_color ), wedgeprops = dict ( width = 0.5 , edgecolor = text_color ), ) ax . set ( aspect = \"equal\" )","title":"plot_burst()"},{"location":"anydyce.viz/#anydyce.viz.plot_burst_subplot","text":"Experimental This function should be considered experimental and may change or disappear in future versions. Wrapper around plot_burst that creates a figure, axis pair, calls matplotlib.pyplot.tight_layout , and returns the pair. Source code in anydyce/viz.py 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 @experimental @beartype def plot_burst_subplot ( h_inner : H , h_outer : Optional [ H ] = None , title : Optional [ str ] = None , inner_formatter : HFormatterT = outcome_name_formatter , inner_cmap : Union [ str , matplotlib . colors . Colormap ] = DEFAULT_CMAP_BURST_INNER , outer_formatter : Optional [ HFormatterT ] = None , outer_cmap : Union [ str , matplotlib . colors . Colormap , None ] = None , text_color : str = DEFAULT_COLOR_TEXT , alpha : float = DEFAULT_ALPHA , ) -> Tuple [ Figure , Axes ]: r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Wrapper around [``plot_burst``][anydyce.viz.plot_burst] that creates a figure, axis pair, calls [``matplotlib.pyplot.tight_layout``](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.tight_layout.html), and returns the pair. \"\"\" fig , ax = matplotlib . pyplot . subplots () plot_burst ( ax , h_inner , h_outer , title , inner_formatter , inner_cmap , outer_formatter , outer_cmap , text_color , alpha , ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) matplotlib . pyplot . tight_layout () return fig , ax","title":"plot_burst_subplot()"},{"location":"contrib/","text":"Contributing to anydyce There are many ways you can contribute. You have only but to try. Starting discussions and filing issues You can file new issues as you find them. Please try to avoid duplicating issues. \u201cWriting Effective Bug Reports\u201d by Elisabeth Hendrickson (PDF) may be helpful. For more free-flow discussions (beefs, rants, ideas, recipes, etc.), consider starting or joining a discussion . Hacking quick-start An easy way to bootstrap an isolated development environment is: 1 2 3 4 5 6 7 8 9 10 % git clone --recurse-submodules https://github.com/posita/anydyce.git \u2026 % cd anydyce % /path/to/python -m venv .venv \u2026 % . .venv/bin/activate % pip install --upgrade --editable '.[dev]' \u2026 % python -m pre_commit install \u2026 Substitute your preferred virtual environment process for venv . The [dev] variant includes additional dependencies necessary for development and testing. See the [options.extras_require] section in setup.cfg . Unit tests are run with pytest via Tox . 1 2 3 4 % cd \u2026/path/to/anydyce % . .venv/bin/activate % tox [ TOX_ARGS... [ -- PYTEST_ARGS... ]] \u2026 Submission guidelines If you are willing and able, consider submitting a pull request with a fix. See the docs if you\u2019re not already familiar with pull requests. anydyce releases from master (although not always immediately), so a lot of these workflows are helpful. There are only a few additional guidelines: If it is not already present, please add your name (and optionally your email, GitHub username, website address, or other contact information) to the LICENSE file. 1 2 3 ... * [ Matt Bogosian ]( mailto:matt@bogosian.net?Subject=anydyce ); GitHub \u2013 [ **@posita** ](https://github.com/posita) ... Use Black to format your changes. Do your best to follow the source conventions as you observe them. If it\u2019s important to you, Existing comments are wrapped at 88 characters per line to match Black\u2019s default. (Don\u2019t spend too much effort on strict conformance, though. I can clean things up later if they really bother me.) Provide tests where feasible and appropriate. At the very least, existing tests should not fail. (There are exceptions, but if there is any doubt, they probably do not apply.) Unit tests live in tests . If you want feedback on a work-in-progress, consider \u201cmentioning\u201d me ( @posita ), and describe specifically how I can help. Consider prefixing your pull request\u2019s title with something like, \u201c NEED FEEDBACK \u2013 \u201d. If your pull request is still in progress, but you are not blocked on anything, consider using the draft feature . Once you are ready for a merge, resolve any conflicts, squash your commits, and provide a useful commit message. ( This and this may be helpful.) If your pull request started out as a draft, promote it by requesting a review. Consider prefixing the pull request\u2019s title to something like, \u201c READY FOR MERGE \u2013 \u201d. I will try to get to it as soon as I can.","title":"Contributing"},{"location":"contrib/#contributing-to-anydyce","text":"There are many ways you can contribute. You have only but to try.","title":"Contributing to anydyce"},{"location":"contrib/#starting-discussions-and-filing-issues","text":"You can file new issues as you find them. Please try to avoid duplicating issues. \u201cWriting Effective Bug Reports\u201d by Elisabeth Hendrickson (PDF) may be helpful. For more free-flow discussions (beefs, rants, ideas, recipes, etc.), consider starting or joining a discussion .","title":"Starting discussions and filing issues"},{"location":"contrib/#hacking-quick-start","text":"An easy way to bootstrap an isolated development environment is: 1 2 3 4 5 6 7 8 9 10 % git clone --recurse-submodules https://github.com/posita/anydyce.git \u2026 % cd anydyce % /path/to/python -m venv .venv \u2026 % . .venv/bin/activate % pip install --upgrade --editable '.[dev]' \u2026 % python -m pre_commit install \u2026 Substitute your preferred virtual environment process for venv . The [dev] variant includes additional dependencies necessary for development and testing. See the [options.extras_require] section in setup.cfg . Unit tests are run with pytest via Tox . 1 2 3 4 % cd \u2026/path/to/anydyce % . .venv/bin/activate % tox [ TOX_ARGS... [ -- PYTEST_ARGS... ]] \u2026","title":"Hacking quick-start"},{"location":"contrib/#submission-guidelines","text":"If you are willing and able, consider submitting a pull request with a fix. See the docs if you\u2019re not already familiar with pull requests. anydyce releases from master (although not always immediately), so a lot of these workflows are helpful. There are only a few additional guidelines: If it is not already present, please add your name (and optionally your email, GitHub username, website address, or other contact information) to the LICENSE file. 1 2 3 ... * [ Matt Bogosian ]( mailto:matt@bogosian.net?Subject=anydyce ); GitHub \u2013 [ **@posita** ](https://github.com/posita) ... Use Black to format your changes. Do your best to follow the source conventions as you observe them. If it\u2019s important to you, Existing comments are wrapped at 88 characters per line to match Black\u2019s default. (Don\u2019t spend too much effort on strict conformance, though. I can clean things up later if they really bother me.) Provide tests where feasible and appropriate. At the very least, existing tests should not fail. (There are exceptions, but if there is any doubt, they probably do not apply.) Unit tests live in tests . If you want feedback on a work-in-progress, consider \u201cmentioning\u201d me ( @posita ), and describe specifically how I can help. Consider prefixing your pull request\u2019s title with something like, \u201c NEED FEEDBACK \u2013 \u201d. If your pull request is still in progress, but you are not blocked on anything, consider using the draft feature . Once you are ready for a merge, resolve any conflicts, squash your commits, and provide a useful commit message. ( This and this may be helpful.) If your pull request started out as a draft, promote it by requesting a review. Consider prefixing the pull request\u2019s title to something like, \u201c READY FOR MERGE \u2013 \u201d. I will try to get to it as soon as I can.","title":"Submission guidelines"},{"location":"license/","text":"License and credits The MIT License (MIT) Copyright \u00a9 2015-2022 Matt Bogosian ( @posita ). Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contributors The following individuals or entities have contributed to this software: Matt Bogosian ; GitHub \u2013 @posita By adding your name to this list, you grant a nonexclusive, perpetual license to your contributions to this software under the same terms as its license, above. Further, you warrant that your contributions to this software are exclusively your own creations and no one else has any superior right or claim to them. Finally, you agree to indemnify and hold harmless this software\u2019s owner against any colorable claim of infringement by a third party for this software\u2019s owner\u2019s otherwise lawful use of your contribution, whether or not such use was contemplated by you at the time you made it.","title":"License"},{"location":"license/#license-and-credits","text":"","title":"License and credits"},{"location":"license/#the-mit-license-mit","text":"Copyright \u00a9 2015-2022 Matt Bogosian ( @posita ). Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"The MIT License (MIT)"},{"location":"license/#contributors","text":"The following individuals or entities have contributed to this software: Matt Bogosian ; GitHub \u2013 @posita By adding your name to this list, you grant a nonexclusive, perpetual license to your contributions to this software under the same terms as its license, above. Further, you warrant that your contributions to this software are exclusively your own creations and no one else has any superior right or claim to them. Finally, you agree to indemnify and hold harmless this software\u2019s owner against any colorable claim of infringement by a third party for this software\u2019s owner\u2019s otherwise lawful use of your contribution, whether or not such use was contemplated by you at the time you made it.","title":"Contributors"},{"location":"notes/","text":"anydyce release notes 0.4.0 Adds HPlotterChooser implementation and substantially refactors jupyter_visualize in terms thereof. 0.3.2 Works around jupyterlite/jupyterlite#838 to fix docs. 0.3.1 Fixes badges in docs. Migrates to jupyterlite==0.1.0b13 . Un-breaks 0.3.0 in JupyterLite. 0.3.0 Migrates to ipywidgets~=8.0 . 0.2.0 Completes update to dyce~=0.6 . Migrates from setuptools_scm to versioningit for more flexible version number formatting. Allows deployments to PyPI from CI based on tags. 0.1.6 ipywidgets and matplotlib are now required dependencies. Minor corrections to required Python version. 0.1.4 Prepares for breaking changes in future release of dyce~=0.6 . Adds experimental values_xy_for_graph_type function and exposes new \u201cat least\u201d and \u201cat most\u201d graph types via jupyter_visualize interface. 0.1.3 Turns data limiting off by default in jupyter_visualize . 0.1.2 Adds limit_for_display and updates jupyter_visualize . 0.1.1 Removes use of numerary . types . \u2026 SCU types. Links to an external (Gist) repository for example notebook. Adds comparison table to AnyDice to README.md . 0.1.0 anydyce goes live! Non-experimental features should be considered stable.","title":"Release notes"},{"location":"notes/#anydyce-release-notes","text":"","title":"anydyce release notes"},{"location":"notes/#040","text":"Adds HPlotterChooser implementation and substantially refactors jupyter_visualize in terms thereof.","title":"0.4.0"},{"location":"notes/#032","text":"Works around jupyterlite/jupyterlite#838 to fix docs.","title":"0.3.2"},{"location":"notes/#031","text":"Fixes badges in docs. Migrates to jupyterlite==0.1.0b13 . Un-breaks 0.3.0 in JupyterLite.","title":"0.3.1"},{"location":"notes/#030","text":"Migrates to ipywidgets~=8.0 .","title":"0.3.0"},{"location":"notes/#020","text":"Completes update to dyce~=0.6 . Migrates from setuptools_scm to versioningit for more flexible version number formatting. Allows deployments to PyPI from CI based on tags.","title":"0.2.0"},{"location":"notes/#016","text":"ipywidgets and matplotlib are now required dependencies. Minor corrections to required Python version.","title":"0.1.6"},{"location":"notes/#014","text":"Prepares for breaking changes in future release of dyce~=0.6 . Adds experimental values_xy_for_graph_type function and exposes new \u201cat least\u201d and \u201cat most\u201d graph types via jupyter_visualize interface.","title":"0.1.4"},{"location":"notes/#013","text":"Turns data limiting off by default in jupyter_visualize .","title":"0.1.3"},{"location":"notes/#012","text":"Adds limit_for_display and updates jupyter_visualize .","title":"0.1.2"},{"location":"notes/#011","text":"Removes use of numerary . types . \u2026 SCU types. Links to an external (Gist) repository for example notebook. Adds comparison table to AnyDice to README.md .","title":"0.1.1"},{"location":"notes/#010","text":"anydyce goes live! Non-experimental features should be considered stable.","title":"0.1.0"}]}