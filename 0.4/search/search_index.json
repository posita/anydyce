{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Copyright and other protections apply. Please see the accompanying <code>LICENSE</code> file for rights and restrictions governing use of this software. All rights not expressly waived or licensed are reserved. If that file is missing or appears to be modified from its original, then please contact the author before viewing or using this software in any capacity.</p> <p> </p>"},{"location":"#anydyce-visualization-tools-for-dyce","title":"<code>anydyce</code> \u2013 visualization tools for <code>dyce</code>","text":"<p><code>anydyce</code> exposes an interactive interface to <code>dyce</code> (the dice mechanic modeling library) in Jupyter similar to AnyDice.</p> <p><code>anydyce</code> is licensed under the MIT License. See the accompanying <code>LICENSE</code> file for details. Non-experimental features should be considered stable. See the release notes for a summary of version-to-version changes. Source code is available on GitHub.</p> <p>If you find it lacking in any way, please don\u2019t hesitate to bring it to my attention.</p>"},{"location":"#design-philosophy","title":"Design philosophy","text":"<p><code>anydyce</code> (currently) targets Matplotlib (both alone and within Jupyter). Support for additional visualization tools may be added in the future. It is intended as a convenience layer for those who benefit from simple interfaces with reasonable defaults and limited configurability. If you find they are too restrictive, or have any requests or ideas for improvements, let me know!1</p> <p>If used within Jupyter, <code>anydyce</code> provides a high-level, interactive interface with functionality that echos AnyDice.</p>"},{"location":"#comparison-to-anydice","title":"Comparison to AnyDice","text":"Feature <code>anydyce</code> AnyDice Shareable session URLs \u26a0\ufe0f Via third party2 \u2705 Yes Modeling language \ud83d\udc0d Python Proprietary Computation time limit \u2705 No limit \u274c 5 seconds Configurable plots(including \u201cburst\u201d graphs) \u2705 Yes \u274c No Install and use third party libraries \u2705 Yes \u274c No Open source(install, run, and modify locally) \u2705 Yes \u274c No Advanced language features(memoization, nested functions, etc.) \u2705 Yes \u274c No"},{"location":"#interactive-quick-start","title":"Interactive quick start","text":"<p>Probably the easiest way to start tinkering with <code>anydyce</code> is with JupyterLite: </p> <p>The <code>quickstart-local.sh</code> script will create a local virtual environment to bootstrap a local Jupyter server with <code>anydyce</code> installed and open a web browser to the introduction notebook.</p> <p>Binder is another great resource that you can use to share notebooks from your Git repositories (including Gists): </p> <p>JupyterLite and Binder may not save your work!</p> <p>JupyterLite attempts to make use of your browser\u2019s local storage for saving notebook changes. Browser environments vary, including how long local storage is persisted. Further, Binder loses all state once its instances shut down after a period of inactivity. Be careful to download any notebooks you wish to keep.</p> <p>When creating your own notebooks, including and running the following will bootstrap <code>anydyce</code> if it is not already installed:</p> <pre><code># Install additional requirements if necessary\nimport warnings\nwith warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\n    try:\n        import anydyce\n    except (ImportError, ModuleNotFoundError):\n        requirements = [\"anydyce~=0.2\"]\n        try:\n            import piplite ; await piplite.install(requirements)\n        except ImportError:\n            import pip ; pip.main([\"install\"] + requirements)\n    import anydyce\n</code></pre>"},{"location":"#installation-and-use","title":"Installation and use","text":"<p><code>anydyce</code> is available as a PyPI package and as source.</p> <p><code>anydyce.viz</code> provides some rudimentary conveniences such as \u201cburst\u201d charts (<code>anydyce</code>\u2019s take on donut charts).</p> <pre><code>&gt;&gt;&gt; import matplotlib.pyplot\n&gt;&gt;&gt; from dyce import H\n&gt;&gt;&gt; from anydyce.viz import plot_burst\n&gt;&gt;&gt; ax = matplotlib.pyplot.axes()\n&gt;&gt;&gt; plot_burst(ax, 2@H(6))\n&gt;&gt;&gt; matplotlib.pyplot.show()  # doctest: +SKIP\n</code></pre> <p> </p> Source: <code>plot_burst_1.py</code> <pre><code># ======================================================================================\n# Copyright and other protections apply. Please see the accompanying LICENSE file for\n# rights and restrictions governing use of this software. All rights not expressly\n# waived or licensed are reserved. If that file is missing or appears to be modified\n# from its original, then please contact the author before viewing or using this\n# software in any capacity.\n# ======================================================================================\n\nfrom dyce import H\n\nfrom anydyce.viz import plot_burst\n\n\ndef do_it(style: str) -&gt; None:\n    import matplotlib.pyplot\n\n    ax = matplotlib.pyplot.axes()\n    text_color = \"white\" if style == \"dark\" else \"black\"\n    plot_burst(ax, 2 @ H(6), text_color=text_color)\n</code></pre> <p>The outer ring can also be used to compare two histograms directly. Ever been curious how your four shiny new fudge dice stack up against your trusty ol\u2019 double six-siders? Well wonder no more! <code>anydyce</code> abides.</p> <pre><code>&gt;&gt;&gt; df_4 = 4@H((-1, 0, 1))\n&gt;&gt;&gt; d6_2 = 2@H(6)\n&gt;&gt;&gt; ax = matplotlib.pyplot.axes()\n&gt;&gt;&gt; plot_burst(\n...   ax,\n...   df_4, d6_2,\n...   inner_cmap=\"turbo\",\n...   alpha=1.0,\n... )\n&gt;&gt;&gt; matplotlib.pyplot.show()  # doctest: +SKIP\n</code></pre> <p> </p> Source: <code>plot_burst_2.py</code> <pre><code># ======================================================================================\n# Copyright and other protections apply. Please see the accompanying LICENSE file for\n# rights and restrictions governing use of this software. All rights not expressly\n# waived or licensed are reserved. If that file is missing or appears to be modified\n# from its original, then please contact the author before viewing or using this\n# software in any capacity.\n# ======================================================================================\n\nfrom dyce import H\n\nfrom anydyce.viz import plot_burst\n\n\ndef do_it(style: str) -&gt; None:\n    import matplotlib.pyplot\n\n    df_4 = 4 @ H((-1, 0, 1))\n    d6_2 = 2 @ H(6)\n\n    ax = matplotlib.pyplot.axes()\n    text_color = \"white\" if style == \"dark\" else \"black\"\n    plot_burst(\n        ax,\n        df_4,\n        d6_2,\n        inner_cmap=\"turbo\",\n        text_color=text_color,\n    )\n</code></pre> <p>Labels can even be overridden for interesting, at-a-glance displays. Overrides apply counter-clockwise, starting from the 12 o\u2019clock position.</p> <pre><code>&gt;&gt;&gt; def d20formatter(outcome, probability, h) -&gt; str:\n...   vals = {\n...     -2: \"crit. fail.\",\n...     -1: \"fail.\",\n...     1: \"succ.\",\n...     2: \"crit. succ.\",\n...   }\n...   return vals[outcome]\n\n&gt;&gt;&gt; d20 = H(20)\n&gt;&gt;&gt; ax = matplotlib.pyplot.axes()\n&gt;&gt;&gt; plot_burst(ax, h_inner=d20, h_outer=H({\n...   -2: d20.le(1)[1],\n...   -1: d20.within(2, 14)[0],\n...   1: d20.within(15, 19)[0],\n...   2: d20.ge(20)[1],\n... }), inner_cmap=\"RdYlBu_r\", outer_formatter=d20formatter)\n&gt;&gt;&gt; matplotlib.pyplot.show()  # doctest: +SKIP\n</code></pre> <p> </p> Source: <code>plot_burst_3.py</code> <pre><code># ======================================================================================\n# Copyright and other protections apply. Please see the accompanying LICENSE file for\n# rights and restrictions governing use of this software. All rights not expressly\n# waived or licensed are reserved. If that file is missing or appears to be modified\n# from its original, then please contact the author before viewing or using this\n# software in any capacity.\n# ======================================================================================\n\nfrom fractions import Fraction\nfrom typing import Dict\n\nfrom dyce import H\nfrom numerary import RealLike\n\nfrom anydyce.viz import plot_burst\n\n\ndef do_it(style: str) -&gt; None:\n    import matplotlib.pyplot\n\n    def d20formatter(outcome: RealLike, probability: Fraction, h: H) -&gt; str:\n        vals: Dict[RealLike, str] = {\n            -2: \"crit. fail.\",\n            -1: \"fail.\",\n            1: \"succ.\",\n            2: \"crit. succ.\",\n        }\n\n        return vals[outcome]\n\n    d20 = H(20)\n\n    ax = matplotlib.pyplot.axes()\n    text_color = \"white\" if style == \"dark\" else \"black\"\n    plot_burst(\n        ax,\n        h_inner=d20,\n        h_outer=H(\n            {\n                -2: d20.le(1)[1],\n                -1: d20.within(2, 14)[0],\n                1: d20.within(15, 19)[0],\n                2: d20.ge(20)[1],\n            }\n        ),\n        inner_cmap=\"RdYlBu_r\",\n        outer_formatter=d20formatter,\n        text_color=text_color,\n    )\n</code></pre>"},{"location":"#requirements","title":"Requirements","text":"<p><code>anydyce</code> requires a relatively modern version of Python:</p> <ul> <li>CPython (3.8+)</li> <li>PyPy (CPython 3.8+ compatible)</li> </ul> <p>It has the following runtime dependencies:</p> <ul> <li><code>dyce</code> for dice mechanic modeling </li> <li><code>ipywidgets</code> for interactivity in Jupyter</li> <li><code>matplotlib</code> for visualizing histograms and pools</li> </ul> <p><code>anydyce</code> (and <code>dyce</code>) leverage <code>numerary</code> for its opportunistic use of <code>beartype</code>. If you use <code>beartype</code> for type checking your code, but don\u2019t want <code>anydyce</code>, <code>dyce</code>, or <code>numerary</code> to use it internally, disable it with <code>numerary</code>\u2019s <code>NUMERARY_BEARTYPE</code> environment variable.</p> <p>See the hacking quick-start for additional development and testing dependencies.</p>"},{"location":"#license","title":"License","text":"<p><code>anydyce</code> is licensed under the MIT License. See the included <code>LICENSE</code> file for details. Source code is available on GitHub.</p>"},{"location":"#customers","title":"Customers","text":"<ul> <li>This could be you! \ud83d\udc4b</li> </ul> <p>Do you have a project that uses <code>dyce</code>? Let me know, and I\u2019ll promote it here!</p> <p>And don\u2019t forget to do your part in perpetuating gratuitous badge-ification!</p> <pre><code>&lt;!-- Markdown --&gt;\nAs of version 1.1, HighRollin is\n[![dyce-powered](https://raw.githubusercontent.com/posita/dyce/latest/docs/dyce-powered.svg)][dyce-powered]!\n[dyce-powered]: https://posita.github.io/dyce/ \"dyce-powered!\"\n</code></pre> <pre><code>..\n    reStructuredText - see https://docutils.sourceforge.io/docs/ref/rst/directives.html#image\n\nAs of version 1.1, HighRollin is |dyce-powered|!\n\n.. |dyce-powered| image:: https://raw.githubusercontent.com/posita/dyce/latest/docs/dyce-powered.svg\n   :align: top\n   :target: https://posita.github.io/dyce/\n   :alt: dyce-powered\n</code></pre> <pre><code>&lt;!-- HTML --&gt;\nAs of version 1.1, HighRollin is &lt;a href=\"https://posita.github.io/dyce/\"&gt;&lt;img\n  src=\"https://raw.githubusercontent.com/posita/dyce/latest/docs/dyce-powered.svg\"\n  alt=\"dyce-powered\"\n  style=\"vertical-align: middle;\"&gt;&lt;/a&gt;!\n</code></pre> <ol> <li> <p>At some point this devolves into an exercise in chasing a diversity of very specific preferences. If you have a very specific need, <code>dyce</code> is fairly low level and should be able to integrate directly with whatever visualization context or package you prefer. That being said, I am always on the lookout for more intuitive or accessible visualizations and will eagerly explore ideas with you.\u00a0\u21a9</p> </li> <li> <p>Relies on external depedencies such as Binder or JupyterLite. (See Interactive quick start.) However, edits are not persisted. Notebooks can also be downloaded and shared as <code>.ipynb</code> files.\u00a0\u21a9</p> </li> </ol>"},{"location":"anydyce/","title":"<tt>anydyce</tt>","text":""},{"location":"anydyce/#anydyce-package-reference","title":"<code>anydyce</code> package reference","text":""},{"location":"anydyce/#anydyce.viz.HPlotterChooser","title":"<code>HPlotterChooser</code>","text":"<p>Experimental</p> <p>This class should be considered experimental and may change or disappear in future versions.</p> <p>A controller for coordinating the display of a histogram data set and selection of one or more plotters as well as triggering updates in response to either control or data changes. All parameters for the initializer are optional.</p> <p>histogram_specs is the histogram data set which defaults to an empty tuple. The histogram data set can also be replaced vi the <code>update_hs</code> method.</p> <p>Plotter controls (including the selection tabs) are contained within an accordion interface. If controls_expanded is <code>True</code>, the accordion is initially expanded for the user. If it is <code>False</code>, it is initially collapsed.</p> <p>plot_widgets allows object creators to customize the available control widgets, including their initial values. It defaults to <code>None</code> which results in a fresh <code>PlotWidgets</code> object being created during construction.</p> <p>plotters_or_factories allows overriding which plotters are available. The default is to provide factories for all plotters currently available in <code>anydyce</code>.</p> <p>selected_name is the name of the plotter to be displayed initially. It must match the <code>HPlotter.NAME</code> property of an available plotter provided by the plotters_or_factories parameter.</p> Source code in <code>anydyce/viz.py</code> <pre><code>class HPlotterChooser:\nr\"\"\"\n    !!! warning \"Experimental\"\n\n        This class should be considered experimental and may change or disappear in\n        future versions.\n\n    A controller for coordinating the display of a histogram data set and selection of\n    one or more plotters as well as triggering updates in response to either control or\n    data changes. All parameters for the\n    [initializer][anydyce.viz.HPlotterChooser.__init__] are optional.\n\n    *histogram_specs* is the histogram data set which defaults to an empty tuple. The\n    histogram data set can also be replaced vi the\n    [``update_hs``][anydyce.viz.HPlotterChooser.update_hs] method.\n\n    Plotter controls (including the selection tabs) are contained within an accordion\n    interface. If *controls_expanded* is ``#!python True``, the accordion is initially\n    expanded for the user. If it is ``#!python False``, it is initially collapsed.\n\n    *plot_widgets* allows object creators to customize the available control widgets,\n    including their initial values. It defaults to ``#!python None`` which results in a\n    fresh [``PlotWidgets``][anydyce.viz.PlotWidgets] object being created during\n    construction.\n\n    *plotters_or_factories* allows overriding which plotters are available. The default\n    is to provide factories for all plotters currently available in ``anydyce``.\n\n    *selected_name* is the name of the plotter to be displayed initially. It must match\n    the [``HPlotter.NAME`` property][anydyce.viz.HPlotter.NAME] of an available plotter\n    provided by the *plotters_or_factories* parameter.\n    \"\"\"\n\n    @beartype\n    def __init__(\n        self,\n        histogram_specs: Iterable[\n            Union[HLikeT, Tuple[str, HLikeT], Tuple[str, HLikeT, Optional[HLikeT]]]\n        ] = (),\n        *,\n        controls_expanded: bool = False,\n        plot_widgets: Optional[PlotWidgets] = None,\n        plotters_or_factories: Iterable[Union[HPlotter, HPlotterFactoryT]] = (\n            BurstHPlotter,\n            LineHPlotter,\n            BarHPlotter,\n            ScatterHPlotter,\n            HorizontalBarHPlotter,\n        ),\n        selected_name: Optional[str] = None,\n    ):\n        plotters = tuple(\n            plotter if isinstance(plotter, HPlotter) else plotter()\n            for plotter in plotters_or_factories\n        )\n\n        if not plotters:\n            raise ValueError(\"must provide at least one plotter\")\n\n        self._plotters_by_name: Mapping[str, HPlotter] = {\n            plotter.NAME: plotter for plotter in plotters\n        }\n\n        assert self._plotters_by_name\n\n        if selected_name is None:\n            selected_name = next(iter(self._plotters_by_name))\n\n        if selected_name is not None and selected_name not in self._plotters_by_name:\n            raise ValueError(\n                f\"selected_name {selected_name!r} does not match any plotter\"\n            )\n\n        if len(self._plotters_by_name) &lt; len(plotters):\n            duplicate_names = \", \".join(\n                repr(plotter_name)\n                for plotter_name, count in Counter(\n                    plotter.NAME for plotter in plotters\n                ).items()\n                if count &gt; 1\n            )\n            warnings.warn(\n                f\"ignoring redundant plotters with duplicate names {duplicate_names}\",\n                category=RuntimeWarning,\n            )\n\n        if plot_widgets is None:\n            plot_widgets = PlotWidgets()\n\n        self._plot_widgets = plot_widgets\n        self._layouts_by_name: Mapping[str, widgets.Widget] = {}\n\n        for plotter_name, plotter in self._plotters_by_name.items():\n            self._layouts_by_name[plotter_name] = plotter.layout(plot_widgets)\n\n        self._hs: Tuple[Tuple[str, H, Optional[H]], ...] = ()\n        self._hs_culled: Tuple[Tuple[str, H, Optional[H]], ...] = ()\n        self._cutoff: Optional[float] = None\n        self._csv_download_link = \"\"\n        self.update_hs(histogram_specs)\n        self._selected_plotter: Optional[HPlotter]\n        tab_names = tuple(self._plotters_by_name.keys())\n\n        chooser_tab = widgets.Tab(\n            children=tuple(self._layouts_by_name.values()),\n            selected_index=0\n            if selected_name is None\n            else tab_names.index(selected_name),\n            titles=tab_names,\n        )\n\n        def _handle_tab(change) -&gt; None:\n            assert change[\"name\"] == \"selected_index\"\n            self._selected_plotter = next(\n                islice(self._plotters_by_name.values(), change[\"new\"], None)\n            )\n            self._trigger_update()\n\n        chooser_tab.observe(_handle_tab, names=\"selected_index\")\n\n        self._selected_plotter = next(\n            islice(self._plotters_by_name.values(), chooser_tab.selected_index, None)\n        )\n\n        self._out = widgets.VBox(\n            [\n                widgets.Accordion(\n                    children=[chooser_tab],\n                    titles=[\"Plot Controls\"],\n                    selected_index=0 if controls_expanded else None,\n                ),\n                widgets.interactive_output(self.plot, self._plot_widgets.asdict()),\n            ]\n        )\n\n    @beartype\n    def interact(self) -&gt; None:\nr\"\"\"\n        Displays the container responsible for selecting which plotter is used.\n        \"\"\"\n        display(self._out)\n\n    @beartype\n    # @debounce\n    def plot(self, **kw) -&gt; None:\nr\"\"\"\n        Callback for updating the visualization in response to configuration or data\n        changes. *settings* are the current values from all control widgets. (See\n        [``PlotWidgets``][anydyce.viz.PlotWidgets].)\n        \"\"\"\n        settings = cast(SettingsDict, kw)\n        cutoff = (\n            self._plot_widgets.cutoff.value\n            if self._plot_widgets.enable_cutoff.value\n            else None\n        )\n\n        if self._cutoff != cutoff:\n            self._cutoff = cutoff\n            self._cull_data()\n\n        with matplotlib.style.context(settings[\"plot_style\"]):\n            if self._selected_plotter is not None:\n                self._selected_plotter.plot(self._hs_culled, settings)\n                transparent = self._selected_plotter.transparent(\n                    settings[\"burst_color_bg_trnsp\"]\n                )\n            else:\n                transparent = False\n\n            buf = io.BytesIO()\n            matplotlib.pyplot.savefig(\n                buf,\n                bbox_inches=\"tight\",\n                format=settings[\"img_type\"],\n                transparent=transparent,\n            )\n            img_name = \"-\".join(label for label, _, _ in self._hs)\n            img = Image(img_name, settings[\"img_type\"], buf.getvalue())\n            display(HTML(f\"{self._csv_download_link} | {img.download_link()}\"))\n            display(img)\n            matplotlib.pyplot.clf()\n            matplotlib.pyplot.close()\n\n    @beartype\n    def update_hs(\n        self,\n        histogram_specs: Iterable[\n            Union[HLikeT, Tuple[str, HLikeT], Tuple[str, HLikeT, Optional[HLikeT]]]\n        ],\n    ) -&gt; None:\nr\"\"\"\n        Triggers an update to the histogram data. *histogram_specs* is an iterable of either\n        a single [``HLikeT``][anydyce.viz.HLikeT] object, a two-tuple of a name and a\n        primary ``HLikeT`` object, or a three-tuple of a name, a primary ``HLikeT``\n        object, and an optional secondary ``HLikeT`` object (``#!python None`` if\n        omitted).\n        \"\"\"\n        self._hs = _histogram_specs_to_h_tuples(histogram_specs, cutoff=None)\n        self._csv_download_link = _csv_download_link(self._hs)\n\n        self._plot_widgets.burst_swap.disabled = all(\n            h_outer is None or h_inner == h_outer for _, h_inner, h_outer in self._hs\n        )\n\n        self._cull_data()\n        self._trigger_update()\n\n    @beartype\n    def _cull_data(self) -&gt; None:\n        self._hs_culled = _histogram_specs_to_h_tuples(self._hs, self._cutoff)\n\n    @beartype\n    def _trigger_update(self) -&gt; None:\n        self._plot_widgets._rev_no.value += 1\n</code></pre>"},{"location":"anydyce/#anydyce.viz.HPlotterChooser.__init__","title":"<code>__init__(histogram_specs: Iterable[Union[HLikeT, Tuple[str, HLikeT], Tuple[str, HLikeT, Optional[HLikeT]]]] = (), *, controls_expanded: bool = False, plot_widgets: Optional[PlotWidgets] = None, plotters_or_factories: Iterable[Union[HPlotter, HPlotterFactoryT]] = (BurstHPlotter, LineHPlotter, BarHPlotter, ScatterHPlotter, HorizontalBarHPlotter), selected_name: Optional[str] = None)</code>","text":"Source code in <code>anydyce/viz.py</code> <pre><code>@beartype\ndef __init__(\n    self,\n    histogram_specs: Iterable[\n        Union[HLikeT, Tuple[str, HLikeT], Tuple[str, HLikeT, Optional[HLikeT]]]\n    ] = (),\n    *,\n    controls_expanded: bool = False,\n    plot_widgets: Optional[PlotWidgets] = None,\n    plotters_or_factories: Iterable[Union[HPlotter, HPlotterFactoryT]] = (\n        BurstHPlotter,\n        LineHPlotter,\n        BarHPlotter,\n        ScatterHPlotter,\n        HorizontalBarHPlotter,\n    ),\n    selected_name: Optional[str] = None,\n):\n    plotters = tuple(\n        plotter if isinstance(plotter, HPlotter) else plotter()\n        for plotter in plotters_or_factories\n    )\n\n    if not plotters:\n        raise ValueError(\"must provide at least one plotter\")\n\n    self._plotters_by_name: Mapping[str, HPlotter] = {\n        plotter.NAME: plotter for plotter in plotters\n    }\n\n    assert self._plotters_by_name\n\n    if selected_name is None:\n        selected_name = next(iter(self._plotters_by_name))\n\n    if selected_name is not None and selected_name not in self._plotters_by_name:\n        raise ValueError(\n            f\"selected_name {selected_name!r} does not match any plotter\"\n        )\n\n    if len(self._plotters_by_name) &lt; len(plotters):\n        duplicate_names = \", \".join(\n            repr(plotter_name)\n            for plotter_name, count in Counter(\n                plotter.NAME for plotter in plotters\n            ).items()\n            if count &gt; 1\n        )\n        warnings.warn(\n            f\"ignoring redundant plotters with duplicate names {duplicate_names}\",\n            category=RuntimeWarning,\n        )\n\n    if plot_widgets is None:\n        plot_widgets = PlotWidgets()\n\n    self._plot_widgets = plot_widgets\n    self._layouts_by_name: Mapping[str, widgets.Widget] = {}\n\n    for plotter_name, plotter in self._plotters_by_name.items():\n        self._layouts_by_name[plotter_name] = plotter.layout(plot_widgets)\n\n    self._hs: Tuple[Tuple[str, H, Optional[H]], ...] = ()\n    self._hs_culled: Tuple[Tuple[str, H, Optional[H]], ...] = ()\n    self._cutoff: Optional[float] = None\n    self._csv_download_link = \"\"\n    self.update_hs(histogram_specs)\n    self._selected_plotter: Optional[HPlotter]\n    tab_names = tuple(self._plotters_by_name.keys())\n\n    chooser_tab = widgets.Tab(\n        children=tuple(self._layouts_by_name.values()),\n        selected_index=0\n        if selected_name is None\n        else tab_names.index(selected_name),\n        titles=tab_names,\n    )\n\n    def _handle_tab(change) -&gt; None:\n        assert change[\"name\"] == \"selected_index\"\n        self._selected_plotter = next(\n            islice(self._plotters_by_name.values(), change[\"new\"], None)\n        )\n        self._trigger_update()\n\n    chooser_tab.observe(_handle_tab, names=\"selected_index\")\n\n    self._selected_plotter = next(\n        islice(self._plotters_by_name.values(), chooser_tab.selected_index, None)\n    )\n\n    self._out = widgets.VBox(\n        [\n            widgets.Accordion(\n                children=[chooser_tab],\n                titles=[\"Plot Controls\"],\n                selected_index=0 if controls_expanded else None,\n            ),\n            widgets.interactive_output(self.plot, self._plot_widgets.asdict()),\n        ]\n    )\n</code></pre>"},{"location":"anydyce/#anydyce.viz.HPlotterChooser.interact","title":"<code>interact() -&gt; None</code>","text":"<p>Displays the container responsible for selecting which plotter is used.</p> Source code in <code>anydyce/viz.py</code> <pre><code>@beartype\ndef interact(self) -&gt; None:\nr\"\"\"\n    Displays the container responsible for selecting which plotter is used.\n    \"\"\"\n    display(self._out)\n</code></pre>"},{"location":"anydyce/#anydyce.viz.HPlotterChooser.plot","title":"<code>plot(**kw) -&gt; None</code>","text":"<p>Callback for updating the visualization in response to configuration or data changes. settings are the current values from all control widgets. (See <code>PlotWidgets</code>.)</p> Source code in <code>anydyce/viz.py</code> <pre><code>@beartype\n# @debounce\ndef plot(self, **kw) -&gt; None:\nr\"\"\"\n    Callback for updating the visualization in response to configuration or data\n    changes. *settings* are the current values from all control widgets. (See\n    [``PlotWidgets``][anydyce.viz.PlotWidgets].)\n    \"\"\"\n    settings = cast(SettingsDict, kw)\n    cutoff = (\n        self._plot_widgets.cutoff.value\n        if self._plot_widgets.enable_cutoff.value\n        else None\n    )\n\n    if self._cutoff != cutoff:\n        self._cutoff = cutoff\n        self._cull_data()\n\n    with matplotlib.style.context(settings[\"plot_style\"]):\n        if self._selected_plotter is not None:\n            self._selected_plotter.plot(self._hs_culled, settings)\n            transparent = self._selected_plotter.transparent(\n                settings[\"burst_color_bg_trnsp\"]\n            )\n        else:\n            transparent = False\n\n        buf = io.BytesIO()\n        matplotlib.pyplot.savefig(\n            buf,\n            bbox_inches=\"tight\",\n            format=settings[\"img_type\"],\n            transparent=transparent,\n        )\n        img_name = \"-\".join(label for label, _, _ in self._hs)\n        img = Image(img_name, settings[\"img_type\"], buf.getvalue())\n        display(HTML(f\"{self._csv_download_link} | {img.download_link()}\"))\n        display(img)\n        matplotlib.pyplot.clf()\n        matplotlib.pyplot.close()\n</code></pre>"},{"location":"anydyce/#anydyce.viz.HPlotterChooser.update_hs","title":"<code>update_hs(histogram_specs: Iterable[Union[HLikeT, Tuple[str, HLikeT], Tuple[str, HLikeT, Optional[HLikeT]]]]) -&gt; None</code>","text":"<p>Triggers an update to the histogram data. histogram_specs is an iterable of either a single <code>HLikeT</code> object, a two-tuple of a name and a primary <code>HLikeT</code> object, or a three-tuple of a name, a primary <code>HLikeT</code> object, and an optional secondary <code>HLikeT</code> object (<code>None</code> if omitted).</p> Source code in <code>anydyce/viz.py</code> <pre><code>@beartype\ndef update_hs(\n    self,\n    histogram_specs: Iterable[\n        Union[HLikeT, Tuple[str, HLikeT], Tuple[str, HLikeT, Optional[HLikeT]]]\n    ],\n) -&gt; None:\nr\"\"\"\n    Triggers an update to the histogram data. *histogram_specs* is an iterable of either\n    a single [``HLikeT``][anydyce.viz.HLikeT] object, a two-tuple of a name and a\n    primary ``HLikeT`` object, or a three-tuple of a name, a primary ``HLikeT``\n    object, and an optional secondary ``HLikeT`` object (``#!python None`` if\n    omitted).\n    \"\"\"\n    self._hs = _histogram_specs_to_h_tuples(histogram_specs, cutoff=None)\n    self._csv_download_link = _csv_download_link(self._hs)\n\n    self._plot_widgets.burst_swap.disabled = all(\n        h_outer is None or h_inner == h_outer for _, h_inner, h_outer in self._hs\n    )\n\n    self._cull_data()\n    self._trigger_update()\n</code></pre>"},{"location":"anydyce/#anydyce.viz.jupyter_visualize","title":"<code>jupyter_visualize(histogram_specs: Iterable[Union[HLikeT, Tuple[str, HLikeT], Tuple[str, HLikeT, Optional[HLikeT]]]], *, controls_expanded: bool = False, initial_alpha: float = DEFAULT_ALPHA, initial_burst_cmap_inner: str = DEFAULT_CMAP_BURST_INNER, initial_burst_cmap_link: bool = True, initial_burst_cmap_outer: str = DEFAULT_CMAP_BURST_OUTER, initial_burst_color_bg: str = DEFAULT_COLOR_BG, initial_burst_color_bg_trnsp: bool = False, initial_burst_color_text: str = DEFAULT_COLOR_TEXT, initial_burst_swap: bool = False, initial_burst_zero_fill_normalize: bool = False, initial_enable_cutoff: bool = True, initial_graph_type: TraditionalPlotType = TraditionalPlotType.NORMAL, initial_img_type: ImageType = ImageType.PNG, initial_markers: str = DEFAULT_MARKERS, initial_plot_style: str = DEFAULT_PLOT_STYLE, initial_show_shadow: bool = False, selected_name: Optional[str] = None)</code>","text":"<p>Experimental</p> <p>This function should be considered experimental and may change or disappear in future versions.</p> <p>Takes a list of one or more histogram_specs and produces an interactive visualization reminiscent of AnyDice, but with some extra goodies.</p> <p>Each item in histogram_specs can be a <code>dyce.H</code> object, a 2-tuple, or a 3-tuple. 2-tuples are in the format <code>(str, H)</code>, where <code>str</code> is a name or description that will be used to identify the accompanying <code>H</code> object where it appears in the visualization. 3-tuples are in the format <code>(str, H, H)</code>. The second <code>H</code> object is used for the interior ring in \u201cburst\u201d break-out graphs, but otherwise ignored.</p> <p>The \u201cPowered by the Apocalypse (PbtA)\u201d example in the introduction notebook should give an idea of the effect. (See Interactive quick start.)</p> <p>Parameters have the same meanings as with <code>HPlotterChooser</code> and <code>PlotWidgets</code>.</p> Source code in <code>anydyce/viz.py</code> <pre><code>@experimental\n@beartype\ndef jupyter_visualize(\n    histogram_specs: Iterable[\n        Union[HLikeT, Tuple[str, HLikeT], Tuple[str, HLikeT, Optional[HLikeT]]]\n    ],\n    *,\n    controls_expanded: bool = False,\n    initial_alpha: float = DEFAULT_ALPHA,\n    initial_burst_cmap_inner: str = DEFAULT_CMAP_BURST_INNER,\n    initial_burst_cmap_link: bool = True,\n    initial_burst_cmap_outer: str = DEFAULT_CMAP_BURST_OUTER,\n    initial_burst_color_bg: str = DEFAULT_COLOR_BG,\n    initial_burst_color_bg_trnsp: bool = False,\n    initial_burst_color_text: str = DEFAULT_COLOR_TEXT,\n    initial_burst_swap: bool = False,\n    initial_burst_zero_fill_normalize: bool = False,\n    initial_enable_cutoff: bool = True,\n    initial_graph_type: TraditionalPlotType = TraditionalPlotType.NORMAL,\n    initial_img_type: ImageType = ImageType.PNG,\n    initial_markers: str = DEFAULT_MARKERS,\n    initial_plot_style: str = DEFAULT_PLOT_STYLE,\n    initial_show_shadow: bool = False,\n    selected_name: Optional[str] = None,\n):\nr\"\"\"\n    !!! warning \"Experimental\"\n\n        This function should be considered experimental and may change or disappear in\n        future versions.\n\n    Takes a list of one or more *histogram_specs* and produces an interactive\n    visualization reminiscent of [AnyDice](https://anydice.com/), but with some extra\n    goodies.\n\n    Each item in *histogram_specs* can be a ``#!python dyce.H`` object, a 2-tuple, or a\n    3-tuple. 2-tuples are in the format ``#!python (str, H)``, where ``#!python str`` is\n    a name or description that will be used to identify the accompanying ``#!python H``\n    object where it appears in the visualization. 3-tuples are in the format ``#!python\n    (str, H, H)``. The second ``#!python H`` object is used for the interior ring in\n    \u201cburst\u201d break-out graphs, but otherwise ignored.\n\n    The \u201cPowered by the _Apocalypse_ (PbtA)\u201d example in the introduction notebook should\n    give an idea of the effect. (See [Interactive quick\n    start](index.md#interactive-quick-start).)\n\n    Parameters have the same meanings as with\n    [``HPlotterChooser``][anydyce.viz.HPlotterChooser] and\n    [``PlotWidgets``][anydyce.viz.PlotWidgets].\n    \"\"\"\n    plotter_chooser = HPlotterChooser(\n        histogram_specs,\n        controls_expanded=controls_expanded,\n        plot_widgets=PlotWidgets(\n            initial_alpha=initial_alpha,\n            initial_burst_cmap_inner=initial_burst_cmap_inner,\n            initial_burst_cmap_link=initial_burst_cmap_link,\n            initial_burst_cmap_outer=initial_burst_cmap_outer,\n            initial_burst_color_bg=initial_burst_color_bg,\n            initial_burst_color_bg_trnsp=initial_burst_color_bg_trnsp,\n            initial_burst_color_text=initial_burst_color_text,\n            initial_burst_swap=initial_burst_swap,\n            initial_burst_zero_fill_normalize=initial_burst_zero_fill_normalize,\n            initial_enable_cutoff=initial_enable_cutoff,\n            initial_graph_type=initial_graph_type,\n            initial_img_type=initial_img_type,\n            initial_markers=initial_markers,\n            initial_plot_style=initial_plot_style,\n            initial_show_shadow=initial_show_shadow,\n        ),\n        selected_name=selected_name,\n    )\n\n    plotter_chooser.interact()\n</code></pre>"},{"location":"anydyce.viz/","title":"<tt>anydyce.viz</tt>","text":""},{"location":"anydyce.viz/#anydyceviz-package-reference","title":"<code>anydyce.viz</code> package reference","text":"<p>Experimental</p> <p>This package is an attempt to explore conveniences for integration with Matplotlib. It is an explicit departure from RFC 1925, \u00a7 2.2 and should be considered experimental. Be warned that future release may introduce incompatibilities or remove this package altogether. Feedback, suggestions, and contributions are welcome and appreciated.</p>"},{"location":"anydyce.viz/#anydyce.viz.HLikeT","title":"<code>HLikeT = Union[H, HableT]</code>  <code>module-attribute</code>","text":""},{"location":"anydyce.viz/#anydyce.viz.ImageType","title":"<code>ImageType</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> Source code in <code>anydyce/viz.py</code> <pre><code>class ImageType(str, Enum):\n    PNG = \"PNG\"\n    SVG = \"SVG\"\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.ImageType.PNG","title":"<code>PNG = 'PNG'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"anydyce.viz/#anydyce.viz.ImageType.SVG","title":"<code>SVG = 'SVG'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"anydyce.viz/#anydyce.viz.TraditionalPlotType","title":"<code>TraditionalPlotType</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> Source code in <code>anydyce/viz.py</code> <pre><code>class TraditionalPlotType(str, Enum):\n    NORMAL = \"Normal\"\n    AT_MOST = \"At Most\"\n    AT_LEAST = \"At Least\"\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.TraditionalPlotType.AT_LEAST","title":"<code>AT_LEAST = 'At Least'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"anydyce.viz/#anydyce.viz.TraditionalPlotType.AT_MOST","title":"<code>AT_MOST = 'At Most'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"anydyce.viz/#anydyce.viz.TraditionalPlotType.NORMAL","title":"<code>NORMAL = 'Normal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"anydyce.viz/#anydyce.viz.HPlotter","title":"<code>HPlotter</code>","text":"<p>Experimental</p> <p>This class should be considered experimental and may change or disappear in future versions.</p> <p>A plotter responsible for laying out control widgets and visualizing data provided by primary and optional secondary histograms. (See the plot method.)</p> Source code in <code>anydyce/viz.py</code> <pre><code>class HPlotter:\nr\"\"\"\n    !!! warning \"Experimental\"\n\n        This class should be considered experimental and may change or disappear in\n        future versions.\n\n    A plotter responsible for laying out control widgets and visualizing data provided\n    by primary and optional secondary histograms. (See the\n    [*plot* method][anydyce.viz.HPlotter.plot].)\n    \"\"\"\n\n    @abstractproperty\n    def NAME(self) -&gt; str:\nr\"\"\"\n        The display name of the plotter.\n        \"\"\"\n        raise NotImplementedError\n\n    @beartype\n    def layout(self, plot_widgets: PlotWidgets) -&gt; widgets.Widget:\nr\"\"\"\n        Takes a set of widgets (*plot_widgets*) and returns a container (layout) widget\n        selecting those needed by the plotter.\n        \"\"\"\n        return widgets.VBox(\n            [\n                plot_widgets.enable_cutoff,\n                plot_widgets.cutoff,\n                plot_widgets.img_type,\n                plot_widgets.scale,\n            ]\n        )\n\n    @abstractmethod\n    def plot(\n        self,\n        hs: Sequence[Tuple[str, H, Optional[H]]],\n        settings: SettingsDict,\n    ):\nr\"\"\"\n        Creates and displays a visualization of the provided histograms. *fig* is the\n        [``#!python\n        matplotlib.figure.Figure``](https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure)\n        in which the visualization should be constructed. *hs* is a sequence of\n        three-tuples, a name, a primary histogram, and an optional secondary histogram\n        (``#!python None`` if omitted). Plotters should implement this function to\n        display at least the primary histogram and visually associate it with the name.\n        \"\"\"\n        raise NotImplementedError\n\n    @beartype\n    def transparent(self, requested: bool) -&gt; bool:\nr\"\"\"\n        Returns whether this plotter produces plots which support transparency if\n        *requested*. The default implementation always returns ``#!python False``.\n        \"\"\"\n        return False\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.HPlotter.NAME","title":"<code>NAME() -&gt; str</code>","text":"<p>The display name of the plotter.</p> Source code in <code>anydyce/viz.py</code> <pre><code>@abstractproperty\ndef NAME(self) -&gt; str:\nr\"\"\"\n    The display name of the plotter.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.HPlotter.layout","title":"<code>layout(plot_widgets: PlotWidgets) -&gt; widgets.Widget</code>","text":"<p>Takes a set of widgets (plot_widgets) and returns a container (layout) widget selecting those needed by the plotter.</p> Source code in <code>anydyce/viz.py</code> <pre><code>@beartype\ndef layout(self, plot_widgets: PlotWidgets) -&gt; widgets.Widget:\nr\"\"\"\n    Takes a set of widgets (*plot_widgets*) and returns a container (layout) widget\n    selecting those needed by the plotter.\n    \"\"\"\n    return widgets.VBox(\n        [\n            plot_widgets.enable_cutoff,\n            plot_widgets.cutoff,\n            plot_widgets.img_type,\n            plot_widgets.scale,\n        ]\n    )\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.HPlotter.plot","title":"<code>plot(hs: Sequence[Tuple[str, H, Optional[H]]], settings: SettingsDict)</code>  <code>abstractmethod</code>","text":"<p>Creates and displays a visualization of the provided histograms. fig is the <code>matplotlib.figure.Figure</code> in which the visualization should be constructed. hs is a sequence of three-tuples, a name, a primary histogram, and an optional secondary histogram (<code>None</code> if omitted). Plotters should implement this function to display at least the primary histogram and visually associate it with the name.</p> Source code in <code>anydyce/viz.py</code> <pre><code>@abstractmethod\ndef plot(\n    self,\n    hs: Sequence[Tuple[str, H, Optional[H]]],\n    settings: SettingsDict,\n):\nr\"\"\"\n    Creates and displays a visualization of the provided histograms. *fig* is the\n    [``#!python\n    matplotlib.figure.Figure``](https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure)\n    in which the visualization should be constructed. *hs* is a sequence of\n    three-tuples, a name, a primary histogram, and an optional secondary histogram\n    (``#!python None`` if omitted). Plotters should implement this function to\n    display at least the primary histogram and visually associate it with the name.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.HPlotter.transparent","title":"<code>transparent(requested: bool) -&gt; bool</code>","text":"<p>Returns whether this plotter produces plots which support transparency if requested. The default implementation always returns <code>False</code>.</p> Source code in <code>anydyce/viz.py</code> <pre><code>@beartype\ndef transparent(self, requested: bool) -&gt; bool:\nr\"\"\"\n    Returns whether this plotter produces plots which support transparency if\n    *requested*. The default implementation always returns ``#!python False``.\n    \"\"\"\n    return False\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.BarHPlotter","title":"<code>BarHPlotter</code>","text":"<p>             Bases: <code>HPlotter</code></p> <p>Experimental</p> <p>This class should be considered experimental and may change or disappear in future versions.</p> <p>A plotter for creating a single vertical bar plot visualizing all primary histograms. Secondary histograms are ignored.</p> Source code in <code>anydyce/viz.py</code> <pre><code>class BarHPlotter(HPlotter):\nr\"\"\"\n    !!! warning \"Experimental\"\n\n        This class should be considered experimental and may change or disappear in\n        future versions.\n\n    A plotter for creating a single vertical bar plot visualizing all primary\n    histograms. Secondary histograms are ignored.\n    \"\"\"\n\n    NAME = \"Bar Plot\"\n\n    @beartype\n    def layout(self, plot_widgets: PlotWidgets) -&gt; widgets.Widget:\n        cutoff_layout_widget = super().layout(plot_widgets)\n\n        return widgets.VBox(\n            [\n                widgets.HBox(\n                    [\n                        cutoff_layout_widget,\n                        plot_widgets.graph_type,\n                        widgets.VBox(\n                            [\n                                plot_widgets.alpha,\n                                plot_widgets.plot_style,\n                                plot_widgets.show_shadow,\n                            ]\n                        ),\n                    ]\n                ),\n            ]\n        )\n\n    @beartype\n    def plot(\n        self,\n        hs: Sequence[Tuple[str, H, Optional[H]]],\n        settings: SettingsDict,\n    ) -&gt; None:\n        _, ax = matplotlib.pyplot.subplots(\n            figsize=(\n                settings[\"scale\"],\n                settings[\"scale\"] / 16 * 9,\n            )\n        )\n\n        plot_bar(\n            ax,\n            tuple((label, h) for label, h, _ in hs),\n            alpha=settings[\"alpha\"],\n            graph_type=settings[\"graph_type\"],\n            shadow=settings[\"show_shadow\"],\n        )\n\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\")\n            ax.legend()\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.BarHPlotter.NAME","title":"<code>NAME = 'Bar Plot'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"anydyce.viz/#anydyce.viz.BarHPlotter.layout","title":"<code>layout(plot_widgets: PlotWidgets) -&gt; widgets.Widget</code>","text":"Source code in <code>anydyce/viz.py</code> <pre><code>@beartype\ndef layout(self, plot_widgets: PlotWidgets) -&gt; widgets.Widget:\n    cutoff_layout_widget = super().layout(plot_widgets)\n\n    return widgets.VBox(\n        [\n            widgets.HBox(\n                [\n                    cutoff_layout_widget,\n                    plot_widgets.graph_type,\n                    widgets.VBox(\n                        [\n                            plot_widgets.alpha,\n                            plot_widgets.plot_style,\n                            plot_widgets.show_shadow,\n                        ]\n                    ),\n                ]\n            ),\n        ]\n    )\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.BarHPlotter.plot","title":"<code>plot(hs: Sequence[Tuple[str, H, Optional[H]]], settings: SettingsDict) -&gt; None</code>","text":"Source code in <code>anydyce/viz.py</code> <pre><code>@beartype\ndef plot(\n    self,\n    hs: Sequence[Tuple[str, H, Optional[H]]],\n    settings: SettingsDict,\n) -&gt; None:\n    _, ax = matplotlib.pyplot.subplots(\n        figsize=(\n            settings[\"scale\"],\n            settings[\"scale\"] / 16 * 9,\n        )\n    )\n\n    plot_bar(\n        ax,\n        tuple((label, h) for label, h, _ in hs),\n        alpha=settings[\"alpha\"],\n        graph_type=settings[\"graph_type\"],\n        shadow=settings[\"show_shadow\"],\n    )\n\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"ignore\")\n        ax.legend()\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.BurstHPlotter","title":"<code>BurstHPlotter</code>","text":"<p>             Bases: <code>HPlotter</code></p> <p>Experimental</p> <p>This class should be considered experimental and may change or disappear in future versions.</p> <p>A plotter for creating one burst plot per primary histogram. If provided, associated secondary histograms are used for the outer rings.</p> Source code in <code>anydyce/viz.py</code> <pre><code>class BurstHPlotter(HPlotter):\nr\"\"\"\n    !!! warning \"Experimental\"\n\n        This class should be considered experimental and may change or disappear in\n        future versions.\n\n    A plotter for creating one burst plot per primary histogram. If provided, associated\n    secondary histograms are used for the outer rings.\n    \"\"\"\n\n    NAME = \"Burst Plots\"\n\n    @beartype\n    def layout(self, plot_widgets: PlotWidgets) -&gt; widgets.Widget:\n        cutoff_layout_widget = super().layout(plot_widgets)\n\n        return widgets.VBox(\n            [\n                widgets.HBox(\n                    [\n                        widgets.VBox(\n                            [\n                                cutoff_layout_widget,\n                            ]\n                        ),\n                        widgets.VBox(\n                            [\n                                plot_widgets.burst_swap,\n                                plot_widgets.burst_zero_fill_normalize,\n                                plot_widgets.burst_cmap_inner,\n                                plot_widgets.burst_cmap_outer,\n                                plot_widgets.burst_cmap_link,\n                            ]\n                        ),\n                        widgets.VBox(\n                            [\n                                plot_widgets.alpha,\n                                plot_widgets.burst_color_text,\n                                plot_widgets.burst_color_bg,\n                                plot_widgets.burst_color_bg_trnsp,\n                            ]\n                        ),\n                    ]\n                ),\n            ]\n        )\n\n    @beartype\n    def plot(\n        self,\n        hs: Sequence[Tuple[str, H, Optional[H]]],\n        settings: SettingsDict,\n    ) -&gt; None:\n        cols = 3\n        logical_rows = len(hs) // cols + (len(hs) % cols != 0)\n        # Height of row gaps in relation to height of figs\n        gap_size_ratio = Fraction(1, 5)\n        total_gaps = max(0, logical_rows - 1)\n        figsize = (\n            settings[\"scale\"],\n            float(\n                settings[\"scale\"] * (logical_rows + total_gaps * gap_size_ratio) / cols\n            ),\n        )\n        matplotlib.pyplot.figure(facecolor=settings[\"burst_color_bg\"], figsize=figsize)\n        actual_rows_per_fig = gap_size_ratio.denominator\n        actual_rows_per_gap = gap_size_ratio.numerator\n        total_actual_rows = (\n            logical_rows * actual_rows_per_fig + total_gaps * actual_rows_per_gap\n        )\n\n        def _zero_fill_normalize():\n            unique_outcomes: Set[RealLike] = set()\n\n            for i, (_, first_h, second_h) in enumerate(hs):\n                unique_outcomes.update(first_h)\n\n                if second_h:\n                    unique_outcomes.update(second_h)\n\n            for i, (label, first_h, second_h) in enumerate(hs):\n                yield (\n                    label,\n                    first_h.zero_fill(unique_outcomes),\n                    None if second_h is None else second_h.zero_fill(unique_outcomes),\n                )\n\n        if settings[\"burst_zero_fill_normalize\"]:\n            hs = tuple(_zero_fill_normalize())\n\n        for i, (label, h_inner, h_outer) in enumerate(hs):\n            plot_burst_kw: Dict[str, Any] = dict(\n                title=label,\n                inner_cmap=settings[\"burst_cmap_inner\"],\n                outer_cmap=settings[\"burst_cmap_outer\"]\n                if not settings[\"burst_cmap_link\"]\n                else settings[\"burst_cmap_inner\"],\n                text_color=settings[\"burst_color_text\"],\n                alpha=settings[\"alpha\"],\n            )\n\n            if h_outer is not None:\n                if settings[\"burst_swap\"]:\n                    h_inner, h_outer = h_outer, h_inner\n\n            logical_row = i // cols\n            actual_row_start = logical_row * (actual_rows_per_gap + actual_rows_per_fig)\n            ax = matplotlib.pyplot.subplot2grid(\n                (total_actual_rows, cols),\n                (actual_row_start, i % cols),\n                rowspan=actual_rows_per_fig,\n            )\n            plot_burst(\n                ax,\n                h_inner,\n                h_outer,\n                **plot_burst_kw,\n            )\n\n    @beartype\n    def transparent(self, requested: bool) -&gt; bool:\n        return requested\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.BurstHPlotter.NAME","title":"<code>NAME = 'Burst Plots'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"anydyce.viz/#anydyce.viz.BurstHPlotter.layout","title":"<code>layout(plot_widgets: PlotWidgets) -&gt; widgets.Widget</code>","text":"Source code in <code>anydyce/viz.py</code> <pre><code>@beartype\ndef layout(self, plot_widgets: PlotWidgets) -&gt; widgets.Widget:\n    cutoff_layout_widget = super().layout(plot_widgets)\n\n    return widgets.VBox(\n        [\n            widgets.HBox(\n                [\n                    widgets.VBox(\n                        [\n                            cutoff_layout_widget,\n                        ]\n                    ),\n                    widgets.VBox(\n                        [\n                            plot_widgets.burst_swap,\n                            plot_widgets.burst_zero_fill_normalize,\n                            plot_widgets.burst_cmap_inner,\n                            plot_widgets.burst_cmap_outer,\n                            plot_widgets.burst_cmap_link,\n                        ]\n                    ),\n                    widgets.VBox(\n                        [\n                            plot_widgets.alpha,\n                            plot_widgets.burst_color_text,\n                            plot_widgets.burst_color_bg,\n                            plot_widgets.burst_color_bg_trnsp,\n                        ]\n                    ),\n                ]\n            ),\n        ]\n    )\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.BurstHPlotter.plot","title":"<code>plot(hs: Sequence[Tuple[str, H, Optional[H]]], settings: SettingsDict) -&gt; None</code>","text":"Source code in <code>anydyce/viz.py</code> <pre><code>@beartype\ndef plot(\n    self,\n    hs: Sequence[Tuple[str, H, Optional[H]]],\n    settings: SettingsDict,\n) -&gt; None:\n    cols = 3\n    logical_rows = len(hs) // cols + (len(hs) % cols != 0)\n    # Height of row gaps in relation to height of figs\n    gap_size_ratio = Fraction(1, 5)\n    total_gaps = max(0, logical_rows - 1)\n    figsize = (\n        settings[\"scale\"],\n        float(\n            settings[\"scale\"] * (logical_rows + total_gaps * gap_size_ratio) / cols\n        ),\n    )\n    matplotlib.pyplot.figure(facecolor=settings[\"burst_color_bg\"], figsize=figsize)\n    actual_rows_per_fig = gap_size_ratio.denominator\n    actual_rows_per_gap = gap_size_ratio.numerator\n    total_actual_rows = (\n        logical_rows * actual_rows_per_fig + total_gaps * actual_rows_per_gap\n    )\n\n    def _zero_fill_normalize():\n        unique_outcomes: Set[RealLike] = set()\n\n        for i, (_, first_h, second_h) in enumerate(hs):\n            unique_outcomes.update(first_h)\n\n            if second_h:\n                unique_outcomes.update(second_h)\n\n        for i, (label, first_h, second_h) in enumerate(hs):\n            yield (\n                label,\n                first_h.zero_fill(unique_outcomes),\n                None if second_h is None else second_h.zero_fill(unique_outcomes),\n            )\n\n    if settings[\"burst_zero_fill_normalize\"]:\n        hs = tuple(_zero_fill_normalize())\n\n    for i, (label, h_inner, h_outer) in enumerate(hs):\n        plot_burst_kw: Dict[str, Any] = dict(\n            title=label,\n            inner_cmap=settings[\"burst_cmap_inner\"],\n            outer_cmap=settings[\"burst_cmap_outer\"]\n            if not settings[\"burst_cmap_link\"]\n            else settings[\"burst_cmap_inner\"],\n            text_color=settings[\"burst_color_text\"],\n            alpha=settings[\"alpha\"],\n        )\n\n        if h_outer is not None:\n            if settings[\"burst_swap\"]:\n                h_inner, h_outer = h_outer, h_inner\n\n        logical_row = i // cols\n        actual_row_start = logical_row * (actual_rows_per_gap + actual_rows_per_fig)\n        ax = matplotlib.pyplot.subplot2grid(\n            (total_actual_rows, cols),\n            (actual_row_start, i % cols),\n            rowspan=actual_rows_per_fig,\n        )\n        plot_burst(\n            ax,\n            h_inner,\n            h_outer,\n            **plot_burst_kw,\n        )\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.BurstHPlotter.transparent","title":"<code>transparent(requested: bool) -&gt; bool</code>","text":"Source code in <code>anydyce/viz.py</code> <pre><code>@beartype\ndef transparent(self, requested: bool) -&gt; bool:\n    return requested\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.HorizontalBarHPlotter","title":"<code>HorizontalBarHPlotter</code>","text":"<p>             Bases: <code>BarHPlotter</code></p> <p>Experimental</p> <p>This class should be considered experimental and may change or disappear in future versions.</p> <p>A plotter for creating one horizontal bar plot per primary histogram. Secondary histograms are ignored.</p> Source code in <code>anydyce/viz.py</code> <pre><code>class HorizontalBarHPlotter(BarHPlotter):\nr\"\"\"\n    !!! warning \"Experimental\"\n\n        This class should be considered experimental and may change or disappear in\n        future versions.\n\n    A plotter for creating one horizontal bar plot per primary histogram. Secondary\n    histograms are ignored.\n    \"\"\"\n\n    NAME = \"Horizontal Bar Plots\"\n\n    @beartype\n    def plot(\n        self,\n        hs: Sequence[Tuple[str, H, Optional[H]]],\n        settings: SettingsDict,\n    ) -&gt; None:\n        total_outcomes = sum(\n            1 for _ in chain.from_iterable(h.outcomes() for _, h, _ in hs)\n        )\n        total_height = total_outcomes + 1  # one extra to accommodate the axis\n        inches_per_height_unit = settings[\"scale\"] / 64\n        figsize = (\n            settings[\"scale\"],\n            total_height * inches_per_height_unit,\n        )\n        matplotlib.pyplot.figure(figsize=figsize)\n        barh_kw: Dict[str, Any] = dict(alpha=settings[\"alpha\"])\n\n        if settings[\"show_shadow\"]:\n            barh_kw.update(\n                dict(\n                    path_effects=[\n                        matplotlib.patheffects.withSimplePatchShadow(),\n                        matplotlib.patheffects.Normal(),\n                    ]\n                )\n            )\n\n        plot_style = settings[\"plot_style\"]\n\n        if (\n            plot_style in matplotlib.style.library\n            and \"axes.prop_cycle\" in matplotlib.style.library[plot_style]\n            and \"color\" in matplotlib.style.library[plot_style][\"axes.prop_cycle\"]\n        ):\n            # Our current style has a cycler with colors, so use it\n            cycler = matplotlib.style.library[plot_style][\"axes.prop_cycle\"]\n        else:\n            # Revert to the global default\n            cycler = matplotlib.rcParams[\"axes.prop_cycle\"]\n\n        color_iter = cycle(cycler.by_key().get(\"color\", (None,)))\n        row_start = 0\n        first_ax = ax = None\n\n        for i, (label, h, _) in enumerate(hs):\n            if not h:\n                continue\n\n            outcomes, values = values_xy_for_graph_type(h, settings[\"graph_type\"])\n            rowspan = len(outcomes)\n\n            if first_ax is None:\n                first_ax = ax = matplotlib.pyplot.subplot2grid(\n                    (total_height, 1), (row_start, 0), rowspan=rowspan\n                )\n            else:\n                ax = matplotlib.pyplot.subplot2grid(\n                    (total_height, 1), (row_start, 0), rowspan=rowspan, sharex=first_ax\n                )\n\n            ax.set_yticks(outcomes)\n            ax.tick_params(labelbottom=False)\n            ax.set_ylim((max(outcomes) + 0.5, min(outcomes) - 0.5))\n            ax.barh(outcomes, values, color=next(color_iter), label=label, **barh_kw)\n            ax.legend(loc=\"upper right\")\n            row_start += rowspan\n\n        if ax is not None:\n            ax.tick_params(labelbottom=True)\n            ax.xaxis.set_major_formatter(matplotlib.ticker.PercentFormatter(xmax=1))\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.HorizontalBarHPlotter.NAME","title":"<code>NAME = 'Horizontal Bar Plots'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"anydyce.viz/#anydyce.viz.HorizontalBarHPlotter.plot","title":"<code>plot(hs: Sequence[Tuple[str, H, Optional[H]]], settings: SettingsDict) -&gt; None</code>","text":"Source code in <code>anydyce/viz.py</code> <pre><code>@beartype\ndef plot(\n    self,\n    hs: Sequence[Tuple[str, H, Optional[H]]],\n    settings: SettingsDict,\n) -&gt; None:\n    total_outcomes = sum(\n        1 for _ in chain.from_iterable(h.outcomes() for _, h, _ in hs)\n    )\n    total_height = total_outcomes + 1  # one extra to accommodate the axis\n    inches_per_height_unit = settings[\"scale\"] / 64\n    figsize = (\n        settings[\"scale\"],\n        total_height * inches_per_height_unit,\n    )\n    matplotlib.pyplot.figure(figsize=figsize)\n    barh_kw: Dict[str, Any] = dict(alpha=settings[\"alpha\"])\n\n    if settings[\"show_shadow\"]:\n        barh_kw.update(\n            dict(\n                path_effects=[\n                    matplotlib.patheffects.withSimplePatchShadow(),\n                    matplotlib.patheffects.Normal(),\n                ]\n            )\n        )\n\n    plot_style = settings[\"plot_style\"]\n\n    if (\n        plot_style in matplotlib.style.library\n        and \"axes.prop_cycle\" in matplotlib.style.library[plot_style]\n        and \"color\" in matplotlib.style.library[plot_style][\"axes.prop_cycle\"]\n    ):\n        # Our current style has a cycler with colors, so use it\n        cycler = matplotlib.style.library[plot_style][\"axes.prop_cycle\"]\n    else:\n        # Revert to the global default\n        cycler = matplotlib.rcParams[\"axes.prop_cycle\"]\n\n    color_iter = cycle(cycler.by_key().get(\"color\", (None,)))\n    row_start = 0\n    first_ax = ax = None\n\n    for i, (label, h, _) in enumerate(hs):\n        if not h:\n            continue\n\n        outcomes, values = values_xy_for_graph_type(h, settings[\"graph_type\"])\n        rowspan = len(outcomes)\n\n        if first_ax is None:\n            first_ax = ax = matplotlib.pyplot.subplot2grid(\n                (total_height, 1), (row_start, 0), rowspan=rowspan\n            )\n        else:\n            ax = matplotlib.pyplot.subplot2grid(\n                (total_height, 1), (row_start, 0), rowspan=rowspan, sharex=first_ax\n            )\n\n        ax.set_yticks(outcomes)\n        ax.tick_params(labelbottom=False)\n        ax.set_ylim((max(outcomes) + 0.5, min(outcomes) - 0.5))\n        ax.barh(outcomes, values, color=next(color_iter), label=label, **barh_kw)\n        ax.legend(loc=\"upper right\")\n        row_start += rowspan\n\n    if ax is not None:\n        ax.tick_params(labelbottom=True)\n        ax.xaxis.set_major_formatter(matplotlib.ticker.PercentFormatter(xmax=1))\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.LineHPlotter","title":"<code>LineHPlotter</code>","text":"<p>             Bases: <code>HPlotter</code></p> <p>Experimental</p> <p>This class should be considered experimental and may change or disappear in future versions.</p> <p>A plotter for creating a single line plot visualizing all primary histograms. Secondary histograms are ignored.</p> Source code in <code>anydyce/viz.py</code> <pre><code>class LineHPlotter(HPlotter):\nr\"\"\"\n    !!! warning \"Experimental\"\n\n        This class should be considered experimental and may change or disappear in\n        future versions.\n\n    A plotter for creating a single line plot visualizing all primary histograms.\n    Secondary histograms are ignored.\n    \"\"\"\n\n    NAME = \"Line Plot\"\n\n    @beartype\n    def layout(self, plot_widgets: PlotWidgets) -&gt; widgets.Widget:\n        cutoff_layout_widget = super().layout(plot_widgets)\n\n        return widgets.VBox(\n            [\n                widgets.HBox(\n                    [\n                        cutoff_layout_widget,\n                        plot_widgets.graph_type,\n                        widgets.VBox(\n                            [\n                                plot_widgets.alpha,\n                                plot_widgets.plot_style,\n                                plot_widgets.show_shadow,\n                                plot_widgets.markers,\n                            ]\n                        ),\n                    ]\n                ),\n            ]\n        )\n\n    @beartype\n    def plot(\n        self,\n        hs: Sequence[Tuple[str, H, Optional[H]]],\n        settings: SettingsDict,\n    ) -&gt; None:\n        _, ax = matplotlib.pyplot.subplots(\n            figsize=(\n                settings[\"scale\"],\n                settings[\"scale\"] / 16 * 9,\n            )\n        )\n\n        plot_line(\n            ax,\n            tuple((label, h) for label, h, _ in hs),\n            alpha=settings[\"alpha\"],\n            graph_type=settings[\"graph_type\"],\n            markers=settings[\"markers\"],\n            shadow=settings[\"show_shadow\"],\n        )\n\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\")\n            ax.legend()\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.LineHPlotter.NAME","title":"<code>NAME = 'Line Plot'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"anydyce.viz/#anydyce.viz.LineHPlotter.layout","title":"<code>layout(plot_widgets: PlotWidgets) -&gt; widgets.Widget</code>","text":"Source code in <code>anydyce/viz.py</code> <pre><code>@beartype\ndef layout(self, plot_widgets: PlotWidgets) -&gt; widgets.Widget:\n    cutoff_layout_widget = super().layout(plot_widgets)\n\n    return widgets.VBox(\n        [\n            widgets.HBox(\n                [\n                    cutoff_layout_widget,\n                    plot_widgets.graph_type,\n                    widgets.VBox(\n                        [\n                            plot_widgets.alpha,\n                            plot_widgets.plot_style,\n                            plot_widgets.show_shadow,\n                            plot_widgets.markers,\n                        ]\n                    ),\n                ]\n            ),\n        ]\n    )\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.LineHPlotter.plot","title":"<code>plot(hs: Sequence[Tuple[str, H, Optional[H]]], settings: SettingsDict) -&gt; None</code>","text":"Source code in <code>anydyce/viz.py</code> <pre><code>@beartype\ndef plot(\n    self,\n    hs: Sequence[Tuple[str, H, Optional[H]]],\n    settings: SettingsDict,\n) -&gt; None:\n    _, ax = matplotlib.pyplot.subplots(\n        figsize=(\n            settings[\"scale\"],\n            settings[\"scale\"] / 16 * 9,\n        )\n    )\n\n    plot_line(\n        ax,\n        tuple((label, h) for label, h, _ in hs),\n        alpha=settings[\"alpha\"],\n        graph_type=settings[\"graph_type\"],\n        markers=settings[\"markers\"],\n        shadow=settings[\"show_shadow\"],\n    )\n\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"ignore\")\n        ax.legend()\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.ScatterHPlotter","title":"<code>ScatterHPlotter</code>","text":"<p>             Bases: <code>LineHPlotter</code></p> <p>Experimental</p> <p>This class should be considered experimental and may change or disappear in future versions.</p> <p>A plotter for creating a single scatter plot visualizing all primary histograms. Secondary histograms are ignored.</p> Source code in <code>anydyce/viz.py</code> <pre><code>class ScatterHPlotter(LineHPlotter):\nr\"\"\"\n    !!! warning \"Experimental\"\n\n        This class should be considered experimental and may change or disappear in\n        future versions.\n\n    A plotter for creating a single scatter plot visualizing all primary histograms.\n    Secondary histograms are ignored.\n    \"\"\"\n\n    NAME = \"Scatter Plot\"\n\n    @beartype\n    def plot(\n        self,\n        hs: Sequence[Tuple[str, H, Optional[H]]],\n        settings: SettingsDict,\n    ) -&gt; None:\n        _, ax = matplotlib.pyplot.subplots(\n            figsize=(\n                settings[\"scale\"],\n                settings[\"scale\"] / 16 * 9,\n            )\n        )\n\n        plot_scatter(\n            ax,\n            tuple((label, h) for label, h, _ in hs),\n            alpha=settings[\"alpha\"],\n            graph_type=settings[\"graph_type\"],\n            markers=settings[\"markers\"],\n            shadow=settings[\"show_shadow\"],\n        )\n\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\")\n            ax.legend()\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.ScatterHPlotter.NAME","title":"<code>NAME = 'Scatter Plot'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"anydyce.viz/#anydyce.viz.ScatterHPlotter.plot","title":"<code>plot(hs: Sequence[Tuple[str, H, Optional[H]]], settings: SettingsDict) -&gt; None</code>","text":"Source code in <code>anydyce/viz.py</code> <pre><code>@beartype\ndef plot(\n    self,\n    hs: Sequence[Tuple[str, H, Optional[H]]],\n    settings: SettingsDict,\n) -&gt; None:\n    _, ax = matplotlib.pyplot.subplots(\n        figsize=(\n            settings[\"scale\"],\n            settings[\"scale\"] / 16 * 9,\n        )\n    )\n\n    plot_scatter(\n        ax,\n        tuple((label, h) for label, h, _ in hs),\n        alpha=settings[\"alpha\"],\n        graph_type=settings[\"graph_type\"],\n        markers=settings[\"markers\"],\n        shadow=settings[\"show_shadow\"],\n    )\n\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"ignore\")\n        ax.legend()\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.PlotWidgets","title":"<code>PlotWidgets</code>","text":"<p>             Bases: <code>_PlotWidgetsDataclass</code></p> <p>Experimental</p> <p>This class should be considered experimental and may change or disappear in future versions.</p> <p>Class to encapsulate interactive plot control widgets. All parameters for the initializer are optional.</p> <ul> <li> <p>initial_alpha is the starting alpha value for graphs (defaults to <code>0.75</code>).</p> </li> <li> <p>initial_burst_cmap_inner is the initially selected color map for inner burst    graphs (defaults to <code>\"RdYlGn_r\"</code>).</p> </li> <li> <p>initial_burst_cmap_link is the starting value for linking the color maps for    inner and outer burst graphs (defaults to <code>True</code>).</p> </li> <li> <p>initial_burst_cmap_outer is the initially selected color map for outer burst    graphs (defaults to <code>\"RdYlBu_r\"</code>).</p> </li> <li> <p>initial_burst_color_bg is the initially selected background color for burst    graphs (defaults to <code>\"white\"</code>).</p> </li> <li> <p>initial_burst_color_bg_trnsp is the initially selected background transparency    color burst graphs (defaults to <code>False</code>).</p> </li> <li> <p>initial_burst_color_text is the initially selected text color for burst graphs    (defaults to <code>\"black\"</code>).</p> </li> <li> <p>initial_burst_swap is whether the inner and outer burst graphs should be swapped    at first (defaults to <code>False</code>).</p> </li> <li> <p>initial_burst_zero_fill_normalize is whether all burst graphs should share a    scale at first (i.e., so similar values share similar colors across burst graphs)    (defaults to <code>False</code>).</p> </li> <li> <p>initial_enable_cutoff is whether small values should be omitted from graphs at    first (defaults to <code>True</code>).</p> </li> <li> <p>initial_graph_type is the type of graph first shown (defaults to    <code>TraditionalPlotType.NORMAL</code>).</p> </li> <li> <p>initial_img_type is the initially selected image type (defaults to    <code>ImageType.PNG</code>).</p> </li> <li> <p>initial_markers are the starting set of markers for line and scatter plots    (defaults to <code>\"oX^v&gt;&lt;dP\"</code>).</p> </li> <li> <p>initial_plot_style is the starting color style for non-burst graphs (defaults to    <code>\"bmh\"</code>).</p> </li> <li> <p>initial_show_shadow is whether shadows should be shown for non-burst graphs at    first (defaults to <code>False</code>).</p> </li> </ul> Source code in <code>anydyce/viz.py</code> <pre><code>class PlotWidgets(_PlotWidgetsDataclass):\nr\"\"\"\n    !!! warning \"Experimental\"\n\n        This class should be considered experimental and may change or disappear in\n        future versions.\n\n    Class to encapsulate interactive plot control widgets. All parameters for the\n    [initializer][anydyce.viz.PlotWidgets.__init__] are optional.\n\n    - *initial_alpha* is the starting alpha value for graphs (defaults to ``#!python\n       0.75``).\n\n    - *initial_burst_cmap_inner* is the initially selected color map for inner burst\n       graphs (defaults to ``#!python \"RdYlGn_r\"``).\n\n    - *initial_burst_cmap_link* is the starting value for linking the color maps for\n       inner and outer burst graphs (defaults to ``#!python True``).\n\n    - *initial_burst_cmap_outer* is the initially selected color map for outer burst\n       graphs (defaults to ``#!python \"RdYlBu_r\"``).\n\n    - *initial_burst_color_bg* is the initially selected background color for burst\n       graphs (defaults to ``#!python \"white\"``).\n\n    - *initial_burst_color_bg_trnsp* is the initially selected background transparency\n       color burst graphs (defaults to ``#!python False``).\n\n    - *initial_burst_color_text* is the initially selected text color for burst graphs\n       (defaults to ``#!python \"black\"``).\n\n    - *initial_burst_swap* is whether the inner and outer burst graphs should be swapped\n       at first (defaults to ``#!python False``).\n\n    - *initial_burst_zero_fill_normalize* is whether all burst graphs should share a\n       scale at first (i.e., so similar values share similar colors across burst graphs)\n       (defaults to ``#!python False``).\n\n    - *initial_enable_cutoff* is whether small values should be omitted from graphs at\n       first (defaults to ``#!python True``).\n\n    - *initial_graph_type* is the type of graph first shown (defaults to\n       [``TraditionalPlotType.NORMAL``][anydyce.viz.TraditionalPlotType.NORMAL]).\n\n    - *initial_img_type* is the initially selected image type (defaults to\n       [``ImageType.PNG``][anydyce.viz.ImageType.PNG]).\n\n    - *initial_markers* are the starting set of markers for line and scatter plots\n       (defaults to ``#!python \"oX^v&gt;&lt;dP\"``).\n\n    - *initial_plot_style* is the starting color style for non-burst graphs (defaults to\n       ``#!python \"bmh\"``).\n\n    - *initial_show_shadow* is whether shadows should be shown for non-burst graphs at\n       first (defaults to ``#!python False``).\n    \"\"\"\n\n    @beartype\n    def __init__(\n        self,\n        *,\n        initial_alpha: float = DEFAULT_ALPHA,\n        initial_burst_cmap_inner: str = DEFAULT_CMAP_BURST_INNER,\n        initial_burst_cmap_link: bool = True,\n        initial_burst_cmap_outer: str = DEFAULT_CMAP_BURST_OUTER,\n        initial_burst_color_bg: str = DEFAULT_COLOR_BG,\n        initial_burst_color_bg_trnsp: bool = False,\n        initial_burst_color_text: str = DEFAULT_COLOR_TEXT,\n        initial_burst_swap: bool = False,\n        initial_burst_zero_fill_normalize: bool = False,\n        initial_enable_cutoff: bool = True,\n        initial_graph_type: TraditionalPlotType = TraditionalPlotType.NORMAL,\n        initial_img_type: ImageType = ImageType.PNG,\n        initial_markers: str = DEFAULT_MARKERS,\n        initial_plot_style: str = DEFAULT_PLOT_STYLE,\n        initial_show_shadow: bool = False,\n    ):\n        super().__init__()\n\n        if initial_plot_style not in matplotlib.style.available:\n            warnings.warn(\n                f\"unrecognized plot style {initial_plot_style!r}; reverting to 'default'\",\n                category=RuntimeWarning,\n            )\n            initial_plot_style = \"default\"\n\n        self.alpha.value = initial_alpha\n        self.burst_cmap_inner.value = initial_burst_cmap_inner\n        self.burst_cmap_link.value = initial_burst_cmap_link\n        self.burst_cmap_outer.disabled = initial_burst_cmap_link\n        self.burst_cmap_outer.value = initial_burst_cmap_outer\n        self.burst_color_bg.value = initial_burst_color_bg\n        self.burst_color_bg_trnsp.value = initial_burst_color_bg_trnsp\n        self.burst_color_text.value = initial_burst_color_text\n        self.burst_swap.value = initial_burst_swap\n        self.burst_zero_fill_normalize.value = initial_burst_zero_fill_normalize\n        self.cutoff.disabled = not initial_enable_cutoff\n        self.enable_cutoff.value = initial_enable_cutoff\n        self.graph_type.value = initial_graph_type\n        self.img_type.value = initial_img_type\n        self.markers.value = initial_markers\n        self.plot_style.value = initial_plot_style\n        self.show_shadow.value = initial_show_shadow\n\n        def _handle_burst_cmap_link(change) -&gt; None:\n            self.burst_cmap_outer.disabled = change[\"new\"]\n\n        self.burst_cmap_link.observe(_handle_burst_cmap_link, names=\"value\")\n\n        def _handle_burst_color_bg_trnsp(change) -&gt; None:\n            self.burst_color_bg.disabled = change[\"new\"]\n\n        self.burst_color_bg_trnsp.observe(_handle_burst_color_bg_trnsp, names=\"value\")\n\n        def _handle_cutoff(change) -&gt; None:\n            self.cutoff.disabled = not change[\"new\"]\n\n        self.enable_cutoff.observe(_handle_cutoff, names=\"value\")\n\n    @beartype\n    def asdict(self) -&gt; Dict[str, Any]:\n        return dict((field.name, getattr(self, field.name)) for field in fields(self))\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.PlotWidgets.__init__","title":"<code>__init__(*, initial_alpha: float = DEFAULT_ALPHA, initial_burst_cmap_inner: str = DEFAULT_CMAP_BURST_INNER, initial_burst_cmap_link: bool = True, initial_burst_cmap_outer: str = DEFAULT_CMAP_BURST_OUTER, initial_burst_color_bg: str = DEFAULT_COLOR_BG, initial_burst_color_bg_trnsp: bool = False, initial_burst_color_text: str = DEFAULT_COLOR_TEXT, initial_burst_swap: bool = False, initial_burst_zero_fill_normalize: bool = False, initial_enable_cutoff: bool = True, initial_graph_type: TraditionalPlotType = TraditionalPlotType.NORMAL, initial_img_type: ImageType = ImageType.PNG, initial_markers: str = DEFAULT_MARKERS, initial_plot_style: str = DEFAULT_PLOT_STYLE, initial_show_shadow: bool = False)</code>","text":"Source code in <code>anydyce/viz.py</code> <pre><code>@beartype\ndef __init__(\n    self,\n    *,\n    initial_alpha: float = DEFAULT_ALPHA,\n    initial_burst_cmap_inner: str = DEFAULT_CMAP_BURST_INNER,\n    initial_burst_cmap_link: bool = True,\n    initial_burst_cmap_outer: str = DEFAULT_CMAP_BURST_OUTER,\n    initial_burst_color_bg: str = DEFAULT_COLOR_BG,\n    initial_burst_color_bg_trnsp: bool = False,\n    initial_burst_color_text: str = DEFAULT_COLOR_TEXT,\n    initial_burst_swap: bool = False,\n    initial_burst_zero_fill_normalize: bool = False,\n    initial_enable_cutoff: bool = True,\n    initial_graph_type: TraditionalPlotType = TraditionalPlotType.NORMAL,\n    initial_img_type: ImageType = ImageType.PNG,\n    initial_markers: str = DEFAULT_MARKERS,\n    initial_plot_style: str = DEFAULT_PLOT_STYLE,\n    initial_show_shadow: bool = False,\n):\n    super().__init__()\n\n    if initial_plot_style not in matplotlib.style.available:\n        warnings.warn(\n            f\"unrecognized plot style {initial_plot_style!r}; reverting to 'default'\",\n            category=RuntimeWarning,\n        )\n        initial_plot_style = \"default\"\n\n    self.alpha.value = initial_alpha\n    self.burst_cmap_inner.value = initial_burst_cmap_inner\n    self.burst_cmap_link.value = initial_burst_cmap_link\n    self.burst_cmap_outer.disabled = initial_burst_cmap_link\n    self.burst_cmap_outer.value = initial_burst_cmap_outer\n    self.burst_color_bg.value = initial_burst_color_bg\n    self.burst_color_bg_trnsp.value = initial_burst_color_bg_trnsp\n    self.burst_color_text.value = initial_burst_color_text\n    self.burst_swap.value = initial_burst_swap\n    self.burst_zero_fill_normalize.value = initial_burst_zero_fill_normalize\n    self.cutoff.disabled = not initial_enable_cutoff\n    self.enable_cutoff.value = initial_enable_cutoff\n    self.graph_type.value = initial_graph_type\n    self.img_type.value = initial_img_type\n    self.markers.value = initial_markers\n    self.plot_style.value = initial_plot_style\n    self.show_shadow.value = initial_show_shadow\n\n    def _handle_burst_cmap_link(change) -&gt; None:\n        self.burst_cmap_outer.disabled = change[\"new\"]\n\n    self.burst_cmap_link.observe(_handle_burst_cmap_link, names=\"value\")\n\n    def _handle_burst_color_bg_trnsp(change) -&gt; None:\n        self.burst_color_bg.disabled = change[\"new\"]\n\n    self.burst_color_bg_trnsp.observe(_handle_burst_color_bg_trnsp, names=\"value\")\n\n    def _handle_cutoff(change) -&gt; None:\n        self.cutoff.disabled = not change[\"new\"]\n\n    self.enable_cutoff.observe(_handle_cutoff, names=\"value\")\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.PlotWidgets.asdict","title":"<code>asdict() -&gt; Dict[str, Any]</code>","text":"Source code in <code>anydyce/viz.py</code> <pre><code>@beartype\ndef asdict(self) -&gt; Dict[str, Any]:\n    return dict((field.name, getattr(self, field.name)) for field in fields(self))\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.cumulative_probability_formatter","title":"<code>cumulative_probability_formatter(outcome: RealLike, probability: Fraction, h: H) -&gt; str</code>","text":"<p>Experimental</p> <p>This function should be considered experimental and may change or disappear in future versions.</p> <p>Formatter for use with <code>plot_burst</code> to inefficiently (i.e., \\(O \\left( {n} ^ {2} \\right)\\)) calculate and format cumulative probability pairs for outcome in h.</p> Source code in <code>anydyce/viz.py</code> <pre><code>@experimental\n@beartype\ndef cumulative_probability_formatter(\n    outcome: RealLike,\n    probability: Fraction,\n    h: H,\n) -&gt; str:\nr\"\"\"\n    !!! warning \"Experimental\"\n\n        This function should be considered experimental and may change or disappear in\n        future versions.\n\n    Formatter for use with [``plot_burst``][anydyce.viz.plot_burst] to inefficiently\n    (i.e., $O \\left( {n} ^ {2} \\right)$) calculate and format cumulative probability\n    pairs for *outcome* in *h*.\n    \"\"\"\n    le_total, ge_total = Fraction(0), Fraction(1)\n\n    for h_outcome, h_probability in h.distribution():\n        le_total += h_probability\n\n        if math.isclose(h_outcome, outcome):\n            return f\"{outcome} {float(probability):.2%}; \u2265{float(le_total):.2%}; \u2264{float(ge_total):.2%}\"\n\n        ge_total -= h_probability\n\n    return f\"{outcome} {float(probability):.2%}\"\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.outcome_name_formatter","title":"<code>outcome_name_formatter(outcome: RealLike, _: RealLike, __: RealLike) -&gt; str</code>","text":"<p>Experimental</p> <p>This function should be considered experimental and may change or disappear in future versions.</p> <p>Formatter for use with <code>plot_burst</code> to format each outcome. If outcome has a name attribute (e.g., as with an <code>Enum</code>), that is used. Otherwise outcome is passed to <code>str</code> and the result is used.</p> Source code in <code>anydyce/viz.py</code> <pre><code>@experimental\n@beartype\ndef outcome_name_formatter(outcome: RealLike, _, __) -&gt; str:\nr\"\"\"\n    !!! warning \"Experimental\"\n\n        This function should be considered experimental and may change or disappear in\n        future versions.\n\n    Formatter for use with [``plot_burst``][anydyce.viz.plot_burst] to format each\n    *outcome*. If *outcome* has a *name* attribute (e.g., as with an ``#!python Enum``),\n    that is used. Otherwise *outcome* is passed to ``#!pythonn str`` and the result is\n    used.\n    \"\"\"\n    if hasattr(outcome, \"name\"):\n        return f\"{outcome.name}\"\n    else:\n        return f\"{str(outcome)}\"\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.outcome_name_probability_formatter","title":"<code>outcome_name_probability_formatter(outcome: RealLike, probability: Fraction, __: Fraction) -&gt; str</code>","text":"<p>Experimental</p> <p>This function should be considered experimental and may change or disappear in future versions.</p> <p>Formatter for use with <code>plot_burst</code> to display each outcome and probability (separated by a newline). If outcome has a name attribute (e.g., as with an <code>Enum</code>), that is used. Otherwise outcome is passed to <code>str</code> and the result is used. probability is passed to <code>float</code> and formatted to two decimal places.</p> Source code in <code>anydyce/viz.py</code> <pre><code>@experimental\n@beartype\ndef outcome_name_probability_formatter(\n    outcome: RealLike, probability: Fraction, __\n) -&gt; str:\nr\"\"\"\n    !!! warning \"Experimental\"\n\n        This function should be considered experimental and may change or disappear in\n        future versions.\n\n    Formatter for use with [``plot_burst``][anydyce.viz.plot_burst] to display each\n    outcome and probability (separated by a newline). If *outcome* has a *name*\n    attribute (e.g., as with an ``#!python Enum``), that is used. Otherwise *outcome* is\n    passed to ``#!pythonn str`` and the result is used. *probability* is passed to\n    ``#!python float`` and formatted to two decimal places.\n    \"\"\"\n    if hasattr(outcome, \"name\"):\n        return f\"{outcome.name}\\n{float(probability):.2%}\"\n    else:\n        return f\"{str(outcome)}\\n{float(probability):.2%}\"\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.limit_for_display","title":"<code>limit_for_display(h: H, cutoff: H) -&gt; H</code>","text":"<p>Experimental</p> <p>This function should be considered experimental and may change or disappear in future versions.</p> <p>Discards outcomes in h, starting with the smallest counts as long as the total discarded in proportion to <code>h.total</code> does not exceed cutoff. This can be useful in speeding up plots where there are large number of negligible probabilities.</p> <pre><code>&gt;&gt;&gt; from anydyce.viz import limit_for_display\n&gt;&gt;&gt; from dyce import H\n&gt;&gt;&gt; from fractions import Fraction\n&gt;&gt;&gt; h = H({1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6})\n&gt;&gt;&gt; h.total\n21\n&gt;&gt;&gt; limit_for_display(h, cutoff=Fraction(5, 21))\nH({3: 3, 4: 4, 5: 5, 6: 6})\n&gt;&gt;&gt; limit_for_display(h, cutoff=Fraction(6, 21))\nH({4: 4, 5: 5, 6: 6})\n</code></pre> Source code in <code>anydyce/viz.py</code> <pre><code>@experimental\n@beartype\ndef limit_for_display(h: H, cutoff) -&gt; H:\nr\"\"\"\n    !!! warning \"Experimental\"\n\n        This function should be considered experimental and may change or disappear in\n        future versions.\n\n    Discards outcomes in *h*, starting with the smallest counts as long as the total\n    discarded in proportion to ``#!python h.total`` does not exceed *cutoff*. This can\n    be useful in speeding up plots where there are large number of negligible\n    probabilities.\n\n    ``` python\n    &gt;&gt;&gt; from anydyce.viz import limit_for_display\n    &gt;&gt;&gt; from dyce import H\n    &gt;&gt;&gt; from fractions import Fraction\n    &gt;&gt;&gt; h = H({1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6})\n    &gt;&gt;&gt; h.total\n    21\n    &gt;&gt;&gt; limit_for_display(h, cutoff=Fraction(5, 21))\n    H({3: 3, 4: 4, 5: 5, 6: 6})\n    &gt;&gt;&gt; limit_for_display(h, cutoff=Fraction(6, 21))\n    H({4: 4, 5: 5, 6: 6})\n\n    ```\n    \"\"\"\n    if cutoff &lt; 0 or cutoff &gt; 1:\n        raise ValueError(f\"cutoff ({cutoff}) must be between zero and one, inclusive\")\n\n    cutoff_count = int(cutoff * h.total)\n\n    if cutoff_count == 0:\n        return h\n\n    def _cull() -&gt; Iterator[Tuple[RealLike, int]]:\n        so_far = 0\n\n        for outcome, count in sorted(h.items(), key=itemgetter(1)):\n            so_far += count\n\n            if so_far &gt; cutoff_count:\n                yield outcome, count\n\n    return H(_cull())\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.probability_formatter","title":"<code>probability_formatter(_, probability: Fraction, __: Fraction) -&gt; str</code>","text":"<p>Experimental</p> <p>This function should be considered experimental and may change or disappear in future versions.</p> <p>Formatter for use with <code>plot_burst</code> to display the probability for each outcome (but not the outcome itself). probability is passed to <code>float</code> and formatted to two decimal places.</p> Source code in <code>anydyce/viz.py</code> <pre><code>@experimental\n@beartype\ndef probability_formatter(_, probability: Fraction, __) -&gt; str:\nr\"\"\"\n    !!! warning \"Experimental\"\n\n        This function should be considered experimental and may change or disappear in\n        future versions.\n\n    Formatter for use with [``plot_burst``][anydyce.viz.plot_burst] to display the\n    probability for each outcome (but not the outcome itself). *probability* is passed\n    to ``#!python float`` and formatted to two decimal places.\n    \"\"\"\n    return f\"{float(probability):.2%}\"\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.values_xy_for_graph_type","title":"<code>values_xy_for_graph_type(h: H, graph_type: TraditionalPlotType) -&gt; Tuple[Tuple[RealLike, ...], Tuple[float, ...]]</code>","text":"Source code in <code>anydyce/viz.py</code> <pre><code>@experimental\n@beartype\ndef values_xy_for_graph_type(\n    h: H, graph_type: TraditionalPlotType\n) -&gt; Tuple[Tuple[RealLike, ...], Tuple[float, ...]]:\n    outcomes, probabilities = h.distribution_xy() if h else ((), ())\n\n    if graph_type is TraditionalPlotType.AT_LEAST:\n        probabilities = tuple(accumulate(probabilities, __sub__, initial=1.0))[:-1]\n    elif graph_type is TraditionalPlotType.AT_MOST:\n        probabilities = tuple(accumulate(probabilities, __add__, initial=0.0))[1:]\n    elif graph_type is TraditionalPlotType.NORMAL:\n        pass\n    else:\n        assert False, f\"unrecognized graph type {graph_type}\"\n\n    return outcomes, probabilities\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.plot_bar","title":"<code>plot_bar(ax: Axes, hs: Sequence[Tuple[str, H]], graph_type: TraditionalPlotType = TraditionalPlotType.NORMAL, alpha: float = DEFAULT_ALPHA, shadow: bool = False) -&gt; None</code>","text":"<p>Experimental</p> <p>This function should be considered experimental and may change or disappear in future versions.</p> <p>Plots a bar graph of hs using ax with alpha and shadow. hs is a sequence of two-tuples (pairs) of strings (labels) and <code>H</code> objects. Bars are interleaved and non-overlapping, so this is best suited to plots where hs contains a small number of histograms.</p> Source code in <code>anydyce/viz.py</code> <pre><code>@experimental\n@beartype\ndef plot_bar(\n    ax: Axes,\n    hs: Sequence[Tuple[str, H]],\n    graph_type: TraditionalPlotType = TraditionalPlotType.NORMAL,\n    alpha: float = DEFAULT_ALPHA,\n    shadow: bool = False,\n) -&gt; None:\nr\"\"\"\n    !!! warning \"Experimental\"\n\n        This function should be considered experimental and may change or disappear in\n        future versions.\n\n    Plots a bar graph of *hs* using\n    [*ax*](https://matplotlib.org/stable/api/axes_api.html#the-axes-class) with *alpha*\n    and *shadow*. *hs* is a sequence of two-tuples (pairs) of strings (labels) and ``H``\n    objects. Bars are interleaved and non-overlapping, so this is best suited to plots\n    where *hs* contains a small number of histograms.\n    \"\"\"\n    ax.yaxis.set_major_formatter(matplotlib.ticker.PercentFormatter(xmax=1))\n    width = 0.8\n    bar_kw: Dict[str, Any] = dict(alpha=alpha)\n\n    if hs:\n        bar_kw.update(dict(width=width / len(hs)))\n\n    if shadow:\n        bar_kw.update(\n            dict(\n                path_effects=[\n                    matplotlib.patheffects.withSimplePatchShadow(),\n                    matplotlib.patheffects.Normal(),\n                ]\n            )\n        )\n\n    unique_outcomes = sorted(set(chain.from_iterable(h.outcomes() for _, h in hs)))\n\n    if hs:\n        ax.set_xticks(unique_outcomes)\n        ax.set_xlim(\n            (\n                min(unique_outcomes, default=0) - 1.0,\n                max(unique_outcomes, default=0) + 1.0,\n            )\n        )\n\n    for i, (label, h) in enumerate(hs):\n        # Orient to the middle of each bar ((i + 0.5) ... ) whose width is an even share\n        # of the total width (... * width / len(hs) ...) and center the whole cluster of\n        # bars around the data point (... - width / 2)\n        adj = (i + 0.5) * width / len(hs) - width / 2\n        outcomes, values = values_xy_for_graph_type(h, graph_type)\n        ax.bar(\n            [outcome + adj for outcome in outcomes],\n            values,\n            label=label,\n            **bar_kw,\n        )\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.plot_line","title":"<code>plot_line(ax: Axes, hs: Sequence[Tuple[str, H]], graph_type: TraditionalPlotType = TraditionalPlotType.NORMAL, alpha: float = DEFAULT_ALPHA, shadow: bool = False, markers: str = 'o') -&gt; None</code>","text":"<p>Experimental</p> <p>This function should be considered experimental and may change or disappear in future versions.</p> <p>Plots a line graph of hs using ax with alpha and shadow. hs is a sequence of two-tuples (pairs) of strings (labels) and <code>dyce.H</code> objects. markers is cycled through when creating each line. For example, if markers is <code>\"o+\"</code>, the first histogram in hs will be plotted with a circle, the second will be plotted with a plus, the third will be plotted with a circle, the fourth will be plotted with a plus, and so on.</p> Source code in <code>anydyce/viz.py</code> <pre><code>@experimental\n@beartype\ndef plot_line(\n    ax: Axes,\n    hs: Sequence[Tuple[str, H]],\n    graph_type: TraditionalPlotType = TraditionalPlotType.NORMAL,\n    alpha: float = DEFAULT_ALPHA,\n    shadow: bool = False,\n    markers: str = \"o\",\n) -&gt; None:\nr\"\"\"\n    !!! warning \"Experimental\"\n\n        This function should be considered experimental and may change or disappear in\n        future versions.\n\n    Plots a line graph of *hs* using\n    [*ax*](https://matplotlib.org/stable/api/axes_api.html#the-axes-class) with *alpha*\n    and *shadow*. *hs* is a sequence of two-tuples (pairs) of strings (labels) and\n    ``#!python dyce.H`` objects. *markers* is cycled through when creating each line.\n    For example, if *markers* is ``#!python \"o+\"``, the first histogram in *hs* will be\n    plotted with a circle, the second will be plotted with a plus, the third will be\n    plotted with a circle, the fourth will be plotted with a plus, and so on.\n    \"\"\"\n    ax.yaxis.set_major_formatter(matplotlib.ticker.PercentFormatter(xmax=1))\n    plot_kw: Dict[str, Any] = dict(alpha=alpha)\n\n    if shadow:\n        plot_kw.update(\n            dict(\n                path_effects=[\n                    matplotlib.patheffects.SimpleLineShadow(),\n                    matplotlib.patheffects.Normal(),\n                ]\n            )\n        )\n\n    unique_outcomes = sorted(set(chain.from_iterable(h.outcomes() for _, h in hs)))\n\n    if hs:\n        ax.set_xticks(unique_outcomes)\n        ax.set_xlim(\n            (\n                min(unique_outcomes, default=0) - 0.5,\n                max(unique_outcomes, default=0) + 0.5,\n            )\n        )\n\n    for (label, h), marker in zip(hs, cycle(markers if markers else \" \")):\n        outcomes, values = values_xy_for_graph_type(h, graph_type)\n        ax.plot(outcomes, values, label=label, marker=marker, **plot_kw)\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.plot_scatter","title":"<code>plot_scatter(ax: Axes, hs: Sequence[Tuple[str, H]], graph_type: TraditionalPlotType = TraditionalPlotType.NORMAL, alpha: float = DEFAULT_ALPHA, shadow: bool = False, markers: str = '&lt;&gt;v^dPXo') -&gt; None</code>","text":"<p>Experimental</p> <p>This function should be considered experimental and may change or disappear in future versions.</p> <p>Plots a scatter graph of hs using ax with alpha and shadow. hs is a sequence of two-tuples (pairs) of strings (labels) and <code>dyce.H</code> objects. markers is cycled through when creating each line. For example, if markers is <code>\"o+\"</code>, the first histogram in hs will be plotted with a circle, the second will be plotted with a plus, the third will be plotted with a circle, the fourth will be plotted with a plus, and so on.</p> Source code in <code>anydyce/viz.py</code> <pre><code>@experimental\n@beartype\ndef plot_scatter(\n    ax: Axes,\n    hs: Sequence[Tuple[str, H]],\n    graph_type: TraditionalPlotType = TraditionalPlotType.NORMAL,\n    alpha: float = DEFAULT_ALPHA,\n    shadow: bool = False,\n    markers: str = \"&lt;&gt;v^dPXo\",\n) -&gt; None:\nr\"\"\"\n    !!! warning \"Experimental\"\n\n        This function should be considered experimental and may change or disappear in\n        future versions.\n\n    Plots a scatter graph of *hs* using\n    [*ax*](https://matplotlib.org/stable/api/axes_api.html#the-axes-class) with *alpha*\n    and *shadow*. *hs* is a sequence of two-tuples (pairs) of strings (labels) and\n    ``dyce.H`` objects. *markers* is cycled through when creating each line. For\n    example, if *markers* is ``#!python \"o+\"``, the first histogram in *hs* will be\n    plotted with a circle, the second will be plotted with a plus, the third will be\n    plotted with a circle, the fourth will be plotted with a plus, and so on.\n    \"\"\"\n    ax.yaxis.set_major_formatter(matplotlib.ticker.PercentFormatter(xmax=1))\n    scatter_kw: Dict[str, Any] = dict(alpha=alpha)\n\n    if shadow:\n        scatter_kw.update(\n            dict(\n                path_effects=[\n                    matplotlib.patheffects.SimpleLineShadow(),\n                    matplotlib.patheffects.Normal(),\n                ]\n            )\n        )\n\n    unique_outcomes = sorted(set(chain.from_iterable(h.outcomes() for _, h in hs)))\n\n    if hs:\n        ax.set_xticks(unique_outcomes)\n        ax.set_xlim(\n            (\n                min(unique_outcomes, default=0) - 0.5,\n                max(unique_outcomes, default=0) + 0.5,\n            )\n        )\n\n    for (label, h), marker in zip(hs, cycle(markers if markers else \" \")):\n        outcomes, values = values_xy_for_graph_type(h, graph_type)\n        ax.scatter(outcomes, values, label=label, marker=marker, **scatter_kw)\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.plot_burst","title":"<code>plot_burst(ax: Axes, h_inner: H, h_outer: Optional[H] = None, title: Optional[str] = None, inner_formatter: HFormatterT = outcome_name_formatter, inner_cmap: Union[str, matplotlib.colors.Colormap] = DEFAULT_CMAP_BURST_INNER, outer_formatter: Optional[HFormatterT] = None, outer_cmap: Union[str, matplotlib.colors.Colormap, None] = None, text_color: str = DEFAULT_COLOR_TEXT, alpha: float = DEFAULT_ALPHA) -&gt; None</code>","text":"<p>Experimental</p> <p>This function should be considered experimental and may change or disappear in future versions.</p> <p>Creates a dual, overlapping, cocentric pie chart in ax, which can be useful for visualizing relative probability distributions. Examples can be found in Additional interfaces.</p> Source code in <code>anydyce/viz.py</code> <pre><code>@experimental\n@beartype\ndef plot_burst(\n    ax: Axes,\n    h_inner: H,\n    h_outer: Optional[H] = None,\n    title: Optional[str] = None,\n    inner_formatter: HFormatterT = outcome_name_formatter,\n    inner_cmap: Union[str, matplotlib.colors.Colormap] = DEFAULT_CMAP_BURST_INNER,\n    outer_formatter: Optional[HFormatterT] = None,\n    outer_cmap: Union[str, matplotlib.colors.Colormap, None] = None,\n    text_color: str = DEFAULT_COLOR_TEXT,\n    alpha: float = DEFAULT_ALPHA,\n) -&gt; None:\nr\"\"\"\n    !!! warning \"Experimental\"\n\n        This function should be considered experimental and may change or disappear in\n        future versions.\n\n    Creates a dual, overlapping, cocentric pie chart in\n    [*ax*](https://matplotlib.org/stable/api/axes_api.html#the-axes-class), which can be\n    useful for visualizing relative probability distributions. Examples can be found in\n    [Additional interfaces](index.md#additional-interfaces).\n    \"\"\"\n    h_outer = h_inner if h_outer is None else h_outer\n\n    if outer_formatter is None:\n        if h_outer == h_inner:\n            outer_formatter = probability_formatter\n        else:\n            outer_formatter = inner_formatter\n\n    outer_cmap = inner_cmap if outer_cmap is None else outer_cmap\n\n    inner = (\n        (\n            inner_formatter(outcome, probability, h_inner)\n            if probability &gt;= _LABEL_LIM\n            else \"\",\n            probability,\n        )\n        for outcome, probability in h_inner.distribution()\n    )\n\n    inner_labels, inner_values = tuple(zip(*inner)) if h_inner else ((), ())\n    inner_colors = graph_colors(inner_cmap, inner_values, alpha)\n\n    outer = (\n        (\n            outer_formatter(outcome, probability, h_outer)\n            if probability &gt;= _LABEL_LIM\n            else \"\",\n            probability,\n        )\n        for outcome, probability in h_outer.distribution()\n    )\n\n    outer_labels, outer_values = tuple(zip(*outer)) if h_outer else ((), ())\n    outer_colors = graph_colors(outer_cmap, outer_values, alpha)\n\n    if title:\n        ax.set_title(\n            title,\n            fontdict={\"fontweight\": \"bold\", \"color\": text_color},\n            pad=24.0,\n        )\n\n    ax.pie(\n        outer_values,\n        labels=outer_labels,\n        radius=1.0,\n        labeldistance=1.15,\n        startangle=90,\n        colors=outer_colors,\n        textprops=dict(color=text_color),\n        wedgeprops=dict(width=0.8, edgecolor=text_color),\n    )\n    ax.pie(\n        inner_values,\n        labels=inner_labels,\n        radius=0.85,\n        labeldistance=0.7,\n        startangle=90,\n        colors=inner_colors,\n        textprops=dict(color=text_color),\n        wedgeprops=dict(width=0.5, edgecolor=text_color),\n    )\n    ax.set(aspect=\"equal\")\n</code></pre>"},{"location":"anydyce.viz/#anydyce.viz.plot_burst_subplot","title":"<code>plot_burst_subplot(h_inner: H, h_outer: Optional[H] = None, title: Optional[str] = None, inner_formatter: HFormatterT = outcome_name_formatter, inner_cmap: Union[str, matplotlib.colors.Colormap] = DEFAULT_CMAP_BURST_INNER, outer_formatter: Optional[HFormatterT] = None, outer_cmap: Union[str, matplotlib.colors.Colormap, None] = None, text_color: str = DEFAULT_COLOR_TEXT, alpha: float = DEFAULT_ALPHA) -&gt; Tuple[Figure, Axes]</code>","text":"<p>Experimental</p> <p>This function should be considered experimental and may change or disappear in future versions.</p> <p>Wrapper around <code>plot_burst</code> that creates a figure, axis pair, calls <code>matplotlib.pyplot.tight_layout</code>, and returns the pair.</p> Source code in <code>anydyce/viz.py</code> <pre><code>@experimental\n@beartype\ndef plot_burst_subplot(\n    h_inner: H,\n    h_outer: Optional[H] = None,\n    title: Optional[str] = None,\n    inner_formatter: HFormatterT = outcome_name_formatter,\n    inner_cmap: Union[str, matplotlib.colors.Colormap] = DEFAULT_CMAP_BURST_INNER,\n    outer_formatter: Optional[HFormatterT] = None,\n    outer_cmap: Union[str, matplotlib.colors.Colormap, None] = None,\n    text_color: str = DEFAULT_COLOR_TEXT,\n    alpha: float = DEFAULT_ALPHA,\n) -&gt; Tuple[Figure, Axes]:\nr\"\"\"\n    !!! warning \"Experimental\"\n\n        This function should be considered experimental and may change or disappear in\n        future versions.\n\n    Wrapper around [``plot_burst``][anydyce.viz.plot_burst] that creates a figure, axis\n    pair, calls\n    [``matplotlib.pyplot.tight_layout``](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.tight_layout.html),\n    and returns the pair.\n    \"\"\"\n    fig, ax = matplotlib.pyplot.subplots()\n    plot_burst(\n        ax,\n        h_inner,\n        h_outer,\n        title,\n        inner_formatter,\n        inner_cmap,\n        outer_formatter,\n        outer_cmap,\n        text_color,\n        alpha,\n    )\n\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"ignore\")\n        matplotlib.pyplot.tight_layout()\n\n    return fig, ax\n</code></pre>"},{"location":"contrib/","title":"Contributing","text":""},{"location":"contrib/#contributing-to-anydyce","title":"Contributing to <code>anydyce</code>","text":"<p>There are many ways you can contribute. You have only but to try.</p>"},{"location":"contrib/#starting-discussions-and-filing-issues","title":"Starting discussions and filing issues","text":"<p>You can file new issues as you find them. Please try to avoid duplicating issues. \u201cWriting Effective Bug Reports\u201d by Elisabeth Hendrickson (PDF) may be helpful.</p> <p>For more free-flow discussions (beefs, rants, ideas, recipes, etc.), consider starting or joining a discussion.</p>"},{"location":"contrib/#hacking-quick-start","title":"Hacking quick-start","text":"<p>An easy way to bootstrap an isolated development environment is:</p> <pre><code>% git clone --recurse-submodules https://github.com/posita/anydyce.git\n\u2026\n% cd anydyce\n% /path/to/python -m venv .venv\n\u2026\n% . .venv/bin/activate\n% pip install --upgrade --editable '.[dev]'\n\u2026\n% python -m pre_commit install\n\u2026\n</code></pre> <p>Substitute your preferred virtual environment process for <code>venv</code>. The <code>[dev]</code> variant includes additional dependencies necessary for development and testing. See the <code>[options.extras_require]</code> section in <code>setup.cfg</code>.</p> <p>Unit tests are run with pytest via Tox.</p> <pre><code>% cd \u2026/path/to/anydyce\n% . .venv/bin/activate\n% tox [TOX_ARGS... [-- PYTEST_ARGS...]]\n\u2026\n</code></pre>"},{"location":"contrib/#submission-guidelines","title":"Submission guidelines","text":"<p>If you are willing and able, consider submitting a pull request with a fix. See the docs if you\u2019re not already familiar with pull requests. <code>anydyce</code> releases from <code>master</code> (although not always immediately), so a lot of these workflows are helpful. There are only a few additional guidelines:</p> <ul> <li>If it is not already present, please add your name (and optionally your email, GitHub username, website address, or other contact information) to the <code>LICENSE</code> file.</li> </ul> <pre><code>...\n* [Matt Bogosian](mailto:matt@bogosian.net?Subject=anydyce); GitHub \u2013 [**@posita**](https://github.com/posita)\n...\n</code></pre> <ul> <li> <p>Use Black to format your changes.   Do your best to follow the source conventions as you observe them.   If it\u2019s important to you, Existing comments are wrapped at 88 characters per line to match Black\u2019s default.   (Don\u2019t spend too much effort on strict conformance, though.   I can clean things up later if they really bother me.)</p> </li> <li> <p>Provide tests where feasible and appropriate.   At the very least, existing tests should not fail.   (There are exceptions, but if there is any doubt, they probably do not apply.)   Unit tests live in <code>tests</code>.</p> </li> <li> <p>If you want feedback on a work-in-progress, consider \u201cmentioning\u201d me (@posita), and describe specifically how I can help.   Consider prefixing your pull request\u2019s title with something like, \u201c<code>NEED FEEDBACK \u2013</code>\u201d.</p> </li> <li> <p>If your pull request is still in progress, but you are not blocked on anything, consider using the draft feature.</p> </li> <li> <p>Once you are ready for a merge, resolve any conflicts, squash your commits, and provide a useful commit message.   (This and this may be helpful.)   If your pull request started out as a draft, promote it by requesting a review.   Consider prefixing the pull request\u2019s title to something like, \u201c<code>READY FOR MERGE \u2013</code>\u201d.   I will try to get to it as soon as I can.</p> </li> </ul>"},{"location":"license/","title":"License and credits","text":""},{"location":"license/#the-mit-license-mit","title":"The MIT License (MIT)","text":"<p>Copyright \u00a9 2015-2023 Matt Bogosian (@posita).</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"license/#contributors","title":"Contributors","text":"<p>The following individuals or entities have contributed to this software:</p> <ul> <li>Matt Bogosian; GitHub \u2013 @posita</li> </ul> <p>By adding your name to this list, you grant a nonexclusive, perpetual license to your contributions to this software under the same terms as its license, above. Further, you warrant that your contributions to this software are exclusively your own creations and no one else has any superior right or claim to them. Finally, you agree to indemnify and hold harmless this software\u2019s owner against any colorable claim of infringement by a third party for this software\u2019s owner\u2019s otherwise lawful use of your contribution, whether or not such use was contemplated by you at the time you made it.</p>"},{"location":"notes/","title":"Release notes","text":""},{"location":"notes/#anydyce-release-notes","title":"<code>anydyce</code> release notes","text":""},{"location":"notes/#043","title":"0.4.3","text":"<ul> <li>Restored rich display hook methods accidentally removed from <code>anydyce.viz.Image</code> in v0.4.2.</li> </ul>"},{"location":"notes/#042","title":"0.4.2","text":"<p>Bug</p> <p>Do not use! This release inadvertently removed rich display hook methods from <code>anydyce.viz.Image</code>. That broke the ability to display interactive plots. (Fixed in v0.4.3.)</p> <ul> <li>Allows true cutoff disablement (not merely a small default).</li> </ul>"},{"location":"notes/#041","title":"0.4.1","text":"<ul> <li>Adds transparency as well as PNG and SVG output and download selections.</li> <li>Fixes display inconsistencies between Jupyter Lab and Jupyter Lite.</li> </ul>"},{"location":"notes/#040","title":"0.4.0","text":"<ul> <li>Adds <code>HPlotterChooser</code> implementation and substantially refactors <code>jupyter_visualize</code> in terms thereof.</li> </ul>"},{"location":"notes/#032","title":"0.3.2","text":"<ul> <li>Works around jupyterlite/jupyterlite#838 to fix docs.</li> </ul>"},{"location":"notes/#031","title":"0.3.1","text":"<ul> <li>Fixes badges in docs.</li> <li>Migrates to <code>jupyterlite==0.1.0b13</code>.</li> <li>Un-breaks 0.3.0 in JupyterLite.</li> </ul>"},{"location":"notes/#030","title":"0.3.0","text":"<ul> <li>Migrates to <code>ipywidgets~=8.0</code>.</li> </ul>"},{"location":"notes/#020","title":"0.2.0","text":"<ul> <li>Completes update to <code>dyce~=0.6</code>.</li> <li>Migrates from <code>setuptools_scm</code> to <code>versioningit</code> for more flexible version number formatting.</li> <li>Allows deployments to PyPI from CI based on tags.</li> </ul>"},{"location":"notes/#016","title":"0.1.6","text":"<ul> <li><code>ipywidgets</code> and <code>matplotlib</code> are now required dependencies.</li> <li>Minor corrections to required Python version.</li> </ul>"},{"location":"notes/#014","title":"0.1.4","text":"<ul> <li>Prepares for breaking changes in future release of <code>dyce~=0.6</code>.</li> <li>Adds experimental <code>values_xy_for_graph_type</code> function and exposes new \u201cat least\u201d and \u201cat most\u201d graph types via <code>jupyter_visualize</code> interface.</li> </ul>"},{"location":"notes/#013","title":"0.1.3","text":"<ul> <li>Turns data limiting off by default in <code>jupyter_visualize</code>.</li> </ul>"},{"location":"notes/#012","title":"0.1.2","text":"<ul> <li>Adds <code>limit_for_display</code> and updates <code>jupyter_visualize</code>.</li> </ul>"},{"location":"notes/#011","title":"0.1.1","text":"<ul> <li>Removes use of <code>numerary.types.\u2026SCU</code> types.</li> <li>Links to an external (Gist) repository for example notebook.</li> <li>Adds comparison table to AnyDice to <code>README.md</code>.</li> </ul>"},{"location":"notes/#010","title":"0.1.0","text":"<p><code>anydyce</code> goes live! Non-experimental features should be considered stable.</p>"}]}