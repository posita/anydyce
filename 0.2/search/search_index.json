{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Copyright and other protections apply. Please see the accompanying LICENSE file for rights and restrictions governing use of this software. All rights not expressly waived or licensed are reserved. If that file is missing or appears to be modified from its original, then please contact the author before viewing or using this software in any capacity. anydyce \u2013 visualization tools for dyce anydyce exposes an interactive interface to dyce (the dice mechanic modeling library) in Jupyter similar to AnyDice . anydyce is licensed under the MIT License . See the accompanying LICENSE file for details. Non-experimental features should be considered stable. See the release notes for a summary of version-to-version changes. Source code is available on GitHub . If you find it lacking in any way, please don\u2019t hesitate to bring it to my attention . Design philosophy anydyce (currently) targets Matplotlib (both alone and within Jupyter). Support for additional visualization tools may be added in the future. It is intended as a convenience layer for those who benefit from simple interfaces with reasonable defaults and limited configurability. If you find they are too restrictive, or have any requests or ideas for improvements, let me know ! 1 If used within Jupyter, anydyce provides a high-level, interactive interface with functionality that echos AnyDice. Comparison to AnyDice Feature anydyce AnyDice Shareable session URLs \u26a0\ufe0f Via third party 2 \u2705 Yes Modeling language \ud83d\udc0d Python Proprietary Computation time limit \u2705 No limit \u274c 5 seconds Configurable plots (including \u201cburst\u201d graphs) \u2705 Yes \u274c No Install and use third party libraries \u2705 Yes \u274c No Open source (install, run, and modify locally) \u2705 Yes \u274c No Advanced language features (memoization, nested functions, etc.) \u2705 Yes \u274c No Interactive quick start Probably the easiest way to start tinkering with anydyce is with JupyterLite : The quickstart-local.sh script will create a local virtual environment to bootstrap a local Jupyter server with anydyce installed and open a web browser to the introduction notebook . Binder is another great resource that you can use to share notebooks from your Git repositories (including Gists ): JupyterLite and Binder may not save your work! JupyterLite attempts to make use of your browser\u2019s local storage for saving notebook changes. Browser environments vary, including how long local storage is persisted. Further, Binder loses all state once its instances shut down after a period of inactivity. Be careful to download any notebooks you wish to keep. When creating your own notebooks, including and running the following will bootstrap anydyce if it is not already installed: 1 2 3 4 5 6 7 8 9 10 11 12 13 # Install additional requirements if necessary import warnings with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) try : import anydyce except ( ImportError , ModuleNotFoundError ): requirements = [ \"anydyce~=0.2\" ] try : import piplite ; await piplite . install ( requirements ) except ImportError : import pip ; pip . main ([ \"install\" ] + requirements ) import anydyce Installation and use anydyce is available as a PyPI package and as source . anydyce.viz provides some rudimentary conveniences such as \u201cburst\u201d charts ( anydyce \u2019s take on donut charts). 1 2 3 4 5 6 >>> import matplotlib.pyplot >>> from dyce import H >>> from anydyce.viz import plot_burst >>> ax = matplotlib . pyplot . axes () >>> plot_burst ( ax , 2 @H ( 6 )) >>> matplotlib . pyplot . show () # doctest: +SKIP Source: plot_burst_1.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # ====================================================================================== # Copyright and other protections apply. Please see the accompanying LICENSE file for # rights and restrictions governing use of this software. All rights not expressly # waived or licensed are reserved. If that file is missing or appears to be modified # from its original, then please contact the author before viewing or using this # software in any capacity. # ====================================================================================== from __future__ import annotations from dyce import H from anydyce.viz import plot_burst def do_it ( style : str ) -> None : import matplotlib.pyplot ax = matplotlib . pyplot . axes () text_color = \"white\" if style == \"dark\" else \"black\" plot_burst ( ax , 2 @ H ( 6 ), text_color = text_color ) The outer ring can also be used to compare two histograms directly. Ever been curious how your four shiny new fudge dice stack up against your trusty ol\u2019 double six-siders? Well wonder no more! anydyce abides. 1 2 3 4 5 6 7 8 9 10 >>> df_4 = 4 @H (( - 1 , 0 , 1 )) >>> d6_2 = 2 @H ( 6 ) >>> ax = matplotlib . pyplot . axes () >>> plot_burst ( ... ax , ... df_4 , d6_2 , ... inner_color = \"turbo\" , ... alpha = 1.0 , ... ) >>> matplotlib . pyplot . show () # doctest: +SKIP Source: plot_burst_2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # ====================================================================================== # Copyright and other protections apply. Please see the accompanying LICENSE file for # rights and restrictions governing use of this software. All rights not expressly # waived or licensed are reserved. If that file is missing or appears to be modified # from its original, then please contact the author before viewing or using this # software in any capacity. # ====================================================================================== from __future__ import annotations from dyce import H from anydyce.viz import plot_burst def do_it ( style : str ) -> None : import matplotlib.pyplot df_4 = 4 @ H (( - 1 , 0 , 1 )) d6_2 = 2 @ H ( 6 ) ax = matplotlib . pyplot . axes () text_color = \"white\" if style == \"dark\" else \"black\" plot_burst ( ax , df_4 , d6_2 , inner_color = \"turbo\" , text_color = text_color , ) Labels can even be overridden for interesting, at-a-glance displays. Overrides apply counter-clockwise, starting from the 12 o\u2019clock position. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 >>> def d20formatter ( outcome , probability , h ) -> str : ... vals = { ... - 2 : \"crit. fail.\" , ... - 1 : \"fail.\" , ... 1 : \"succ.\" , ... 2 : \"crit. succ.\" , ... } ... return vals [ outcome ] >>> d20 = H ( 20 ) >>> ax = matplotlib . pyplot . axes () >>> plot_burst ( ax , h_inner = d20 , h_outer = H ({ ... - 2 : d20 . le ( 1 )[ 1 ], ... - 1 : d20 . within ( 2 , 14 )[ 0 ], ... 1 : d20 . within ( 15 , 19 )[ 0 ], ... 2 : d20 . ge ( 20 )[ 1 ], ... }), inner_color = \"RdYlBu_r\" , outer_formatter = d20formatter ) >>> matplotlib . pyplot . show () # doctest: +SKIP Source: plot_burst_3.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 # ====================================================================================== # Copyright and other protections apply. Please see the accompanying LICENSE file for # rights and restrictions governing use of this software. All rights not expressly # waived or licensed are reserved. If that file is missing or appears to be modified # from its original, then please contact the author before viewing or using this # software in any capacity. # ====================================================================================== from __future__ import annotations from fractions import Fraction from typing import Dict from dyce import H from numerary import RealLike from anydyce.viz import plot_burst def do_it ( style : str ) -> None : import matplotlib.pyplot def d20formatter ( outcome : RealLike , probability : Fraction , h : H ) -> str : vals : Dict [ RealLike , str ] = { - 2 : \"crit. fail.\" , - 1 : \"fail.\" , 1 : \"succ.\" , 2 : \"crit. succ.\" , } return vals [ outcome ] d20 = H ( 20 ) ax = matplotlib . pyplot . axes () text_color = \"white\" if style == \"dark\" else \"black\" plot_burst ( ax , h_inner = d20 , h_outer = H ( { - 2 : d20 . le ( 1 )[ 1 ], - 1 : d20 . within ( 2 , 14 )[ 0 ], 1 : d20 . within ( 15 , 19 )[ 0 ], 2 : d20 . ge ( 20 )[ 1 ], } ), inner_color = \"RdYlBu_r\" , outer_formatter = d20formatter , text_color = text_color , ) Requirements anydyce requires a relatively modern version of Python: CPython (3.8+) PyPy (CPython 3.8+ compatible) It has the following runtime dependencies: dyce for dice mechanic modeling ipywidgets for interactivity in Jupyter matplotlib for visualizing histograms and pools anydyce (and dyce ) leverage numerary for its opportunistic use of beartype . If you use beartype for type checking your code, but don\u2019t want anydyce , dyce , or numerary to use it internally, disable it with numerary \u2019s NUMERARY_BEARTYPE environment variable . See the hacking quick-start for additional development and testing dependencies. License anydyce is licensed under the MIT License . See the included LICENSE file for details. Source code is available on GitHub . Customers This could be you ! \ud83d\udc4b Do you have a project that uses dyce ? Let me know , and I\u2019ll promote it here! And don\u2019t forget to do your part in perpetuating gratuitous badge-ification! 1 2 3 4 <!-- Markdown --> As of version 1.1, HighRollin is [ ![dyce-powered ]( https://raw.githubusercontent.com/posita/dyce/latest/docs/dyce-powered.svg )][dyce-powered]! [ dyce-powered ]: https://posita.github.io/dyce/ \"dyce-powered!\" 1 2 3 4 5 6 7 8 9 .. reStructuredText - see https://docutils.sourceforge.io/docs/ref/rst/directives.html#image As of version 1.1, HighRollin is |dyce-powered|! .. |dyce-powered| image :: https://raw.githubusercontent.com/posita/dyce/latest/docs/dyce-powered.svg :align: top :target: https://posita.github.io/dyce/ :alt: dyce-powered 1 2 3 4 5 <!-- HTML --> As of version 1.1, HighRollin is < a href = \"https://posita.github.io/dyce/\" >< img src = \"https://raw.githubusercontent.com/posita/dyce/latest/docs/dyce-powered.svg\" alt = \"dyce-powered\" style = \"vertical-align: middle;\" ></ a > ! At some point this devolves into an exercise in chasing a diversity of very specific preferences. If you have a very specific need, dyce is fairly low level and should be able to integrate directly with whatever visualization context or package you prefer. That being said, I am always on the lookout for more intuitive or accessible visualizations and will eagerly explore ideas with you . \u21a9 Relies on external depedencies such as Binder or JupyterLite . (See Interactive quick start .) However, edits are not persisted. Notebooks can also be downloaded and shared as .ipynb files. \u21a9","title":"Introduction"},{"location":"#anydyce-visualization-tools-for-dyce","text":"anydyce exposes an interactive interface to dyce (the dice mechanic modeling library) in Jupyter similar to AnyDice . anydyce is licensed under the MIT License . See the accompanying LICENSE file for details. Non-experimental features should be considered stable. See the release notes for a summary of version-to-version changes. Source code is available on GitHub . If you find it lacking in any way, please don\u2019t hesitate to bring it to my attention .","title":"anydyce \u2013 visualization tools for dyce"},{"location":"#design-philosophy","text":"anydyce (currently) targets Matplotlib (both alone and within Jupyter). Support for additional visualization tools may be added in the future. It is intended as a convenience layer for those who benefit from simple interfaces with reasonable defaults and limited configurability. If you find they are too restrictive, or have any requests or ideas for improvements, let me know ! 1 If used within Jupyter, anydyce provides a high-level, interactive interface with functionality that echos AnyDice.","title":"Design philosophy"},{"location":"#comparison-to-anydice","text":"Feature anydyce AnyDice Shareable session URLs \u26a0\ufe0f Via third party 2 \u2705 Yes Modeling language \ud83d\udc0d Python Proprietary Computation time limit \u2705 No limit \u274c 5 seconds Configurable plots (including \u201cburst\u201d graphs) \u2705 Yes \u274c No Install and use third party libraries \u2705 Yes \u274c No Open source (install, run, and modify locally) \u2705 Yes \u274c No Advanced language features (memoization, nested functions, etc.) \u2705 Yes \u274c No","title":"Comparison to AnyDice"},{"location":"#interactive-quick-start","text":"Probably the easiest way to start tinkering with anydyce is with JupyterLite : The quickstart-local.sh script will create a local virtual environment to bootstrap a local Jupyter server with anydyce installed and open a web browser to the introduction notebook . Binder is another great resource that you can use to share notebooks from your Git repositories (including Gists ): JupyterLite and Binder may not save your work! JupyterLite attempts to make use of your browser\u2019s local storage for saving notebook changes. Browser environments vary, including how long local storage is persisted. Further, Binder loses all state once its instances shut down after a period of inactivity. Be careful to download any notebooks you wish to keep. When creating your own notebooks, including and running the following will bootstrap anydyce if it is not already installed: 1 2 3 4 5 6 7 8 9 10 11 12 13 # Install additional requirements if necessary import warnings with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) try : import anydyce except ( ImportError , ModuleNotFoundError ): requirements = [ \"anydyce~=0.2\" ] try : import piplite ; await piplite . install ( requirements ) except ImportError : import pip ; pip . main ([ \"install\" ] + requirements ) import anydyce","title":"Interactive quick start"},{"location":"#installation-and-use","text":"anydyce is available as a PyPI package and as source . anydyce.viz provides some rudimentary conveniences such as \u201cburst\u201d charts ( anydyce \u2019s take on donut charts). 1 2 3 4 5 6 >>> import matplotlib.pyplot >>> from dyce import H >>> from anydyce.viz import plot_burst >>> ax = matplotlib . pyplot . axes () >>> plot_burst ( ax , 2 @H ( 6 )) >>> matplotlib . pyplot . show () # doctest: +SKIP Source: plot_burst_1.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # ====================================================================================== # Copyright and other protections apply. Please see the accompanying LICENSE file for # rights and restrictions governing use of this software. All rights not expressly # waived or licensed are reserved. If that file is missing or appears to be modified # from its original, then please contact the author before viewing or using this # software in any capacity. # ====================================================================================== from __future__ import annotations from dyce import H from anydyce.viz import plot_burst def do_it ( style : str ) -> None : import matplotlib.pyplot ax = matplotlib . pyplot . axes () text_color = \"white\" if style == \"dark\" else \"black\" plot_burst ( ax , 2 @ H ( 6 ), text_color = text_color ) The outer ring can also be used to compare two histograms directly. Ever been curious how your four shiny new fudge dice stack up against your trusty ol\u2019 double six-siders? Well wonder no more! anydyce abides. 1 2 3 4 5 6 7 8 9 10 >>> df_4 = 4 @H (( - 1 , 0 , 1 )) >>> d6_2 = 2 @H ( 6 ) >>> ax = matplotlib . pyplot . axes () >>> plot_burst ( ... ax , ... df_4 , d6_2 , ... inner_color = \"turbo\" , ... alpha = 1.0 , ... ) >>> matplotlib . pyplot . show () # doctest: +SKIP Source: plot_burst_2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # ====================================================================================== # Copyright and other protections apply. Please see the accompanying LICENSE file for # rights and restrictions governing use of this software. All rights not expressly # waived or licensed are reserved. If that file is missing or appears to be modified # from its original, then please contact the author before viewing or using this # software in any capacity. # ====================================================================================== from __future__ import annotations from dyce import H from anydyce.viz import plot_burst def do_it ( style : str ) -> None : import matplotlib.pyplot df_4 = 4 @ H (( - 1 , 0 , 1 )) d6_2 = 2 @ H ( 6 ) ax = matplotlib . pyplot . axes () text_color = \"white\" if style == \"dark\" else \"black\" plot_burst ( ax , df_4 , d6_2 , inner_color = \"turbo\" , text_color = text_color , ) Labels can even be overridden for interesting, at-a-glance displays. Overrides apply counter-clockwise, starting from the 12 o\u2019clock position. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 >>> def d20formatter ( outcome , probability , h ) -> str : ... vals = { ... - 2 : \"crit. fail.\" , ... - 1 : \"fail.\" , ... 1 : \"succ.\" , ... 2 : \"crit. succ.\" , ... } ... return vals [ outcome ] >>> d20 = H ( 20 ) >>> ax = matplotlib . pyplot . axes () >>> plot_burst ( ax , h_inner = d20 , h_outer = H ({ ... - 2 : d20 . le ( 1 )[ 1 ], ... - 1 : d20 . within ( 2 , 14 )[ 0 ], ... 1 : d20 . within ( 15 , 19 )[ 0 ], ... 2 : d20 . ge ( 20 )[ 1 ], ... }), inner_color = \"RdYlBu_r\" , outer_formatter = d20formatter ) >>> matplotlib . pyplot . show () # doctest: +SKIP Source: plot_burst_3.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 # ====================================================================================== # Copyright and other protections apply. Please see the accompanying LICENSE file for # rights and restrictions governing use of this software. All rights not expressly # waived or licensed are reserved. If that file is missing or appears to be modified # from its original, then please contact the author before viewing or using this # software in any capacity. # ====================================================================================== from __future__ import annotations from fractions import Fraction from typing import Dict from dyce import H from numerary import RealLike from anydyce.viz import plot_burst def do_it ( style : str ) -> None : import matplotlib.pyplot def d20formatter ( outcome : RealLike , probability : Fraction , h : H ) -> str : vals : Dict [ RealLike , str ] = { - 2 : \"crit. fail.\" , - 1 : \"fail.\" , 1 : \"succ.\" , 2 : \"crit. succ.\" , } return vals [ outcome ] d20 = H ( 20 ) ax = matplotlib . pyplot . axes () text_color = \"white\" if style == \"dark\" else \"black\" plot_burst ( ax , h_inner = d20 , h_outer = H ( { - 2 : d20 . le ( 1 )[ 1 ], - 1 : d20 . within ( 2 , 14 )[ 0 ], 1 : d20 . within ( 15 , 19 )[ 0 ], 2 : d20 . ge ( 20 )[ 1 ], } ), inner_color = \"RdYlBu_r\" , outer_formatter = d20formatter , text_color = text_color , )","title":"Installation and use"},{"location":"#requirements","text":"anydyce requires a relatively modern version of Python: CPython (3.8+) PyPy (CPython 3.8+ compatible) It has the following runtime dependencies: dyce for dice mechanic modeling ipywidgets for interactivity in Jupyter matplotlib for visualizing histograms and pools anydyce (and dyce ) leverage numerary for its opportunistic use of beartype . If you use beartype for type checking your code, but don\u2019t want anydyce , dyce , or numerary to use it internally, disable it with numerary \u2019s NUMERARY_BEARTYPE environment variable . See the hacking quick-start for additional development and testing dependencies.","title":"Requirements"},{"location":"#license","text":"anydyce is licensed under the MIT License . See the included LICENSE file for details. Source code is available on GitHub .","title":"License"},{"location":"#customers","text":"This could be you ! \ud83d\udc4b Do you have a project that uses dyce ? Let me know , and I\u2019ll promote it here! And don\u2019t forget to do your part in perpetuating gratuitous badge-ification! 1 2 3 4 <!-- Markdown --> As of version 1.1, HighRollin is [ ![dyce-powered ]( https://raw.githubusercontent.com/posita/dyce/latest/docs/dyce-powered.svg )][dyce-powered]! [ dyce-powered ]: https://posita.github.io/dyce/ \"dyce-powered!\" 1 2 3 4 5 6 7 8 9 .. reStructuredText - see https://docutils.sourceforge.io/docs/ref/rst/directives.html#image As of version 1.1, HighRollin is |dyce-powered|! .. |dyce-powered| image :: https://raw.githubusercontent.com/posita/dyce/latest/docs/dyce-powered.svg :align: top :target: https://posita.github.io/dyce/ :alt: dyce-powered 1 2 3 4 5 <!-- HTML --> As of version 1.1, HighRollin is < a href = \"https://posita.github.io/dyce/\" >< img src = \"https://raw.githubusercontent.com/posita/dyce/latest/docs/dyce-powered.svg\" alt = \"dyce-powered\" style = \"vertical-align: middle;\" ></ a > ! At some point this devolves into an exercise in chasing a diversity of very specific preferences. If you have a very specific need, dyce is fairly low level and should be able to integrate directly with whatever visualization context or package you prefer. That being said, I am always on the lookout for more intuitive or accessible visualizations and will eagerly explore ideas with you . \u21a9 Relies on external depedencies such as Binder or JupyterLite . (See Interactive quick start .) However, edits are not persisted. Notebooks can also be downloaded and shared as .ipynb files. \u21a9","title":"Customers"},{"location":"anydyce/","text":"anydyce package reference jupyter_visualize ( histogram_specs : Iterable [ Union [ HLikeT , Tuple [ str , HLikeT ], Tuple [ str , HLikeT , HLikeT ]]], default_breakout_type : Union [ int , BreakoutType ] = BreakoutType . NONE , default_markers = '<>v^dPXo' , default_main_plot_type : str = 'line' , main_plot_funcs_by_type = _DEFAULT_MAIN_PLOT_FUNCS_BY_NAME ) Experimental This function should be considered experimental and may change or disappear in future versions. Takes a list of one or more histogram_specs and produces an interactive visualization reminiscent of AnyDice , but with some extra goodies. Each item in histogram_specs can be a dyce . H object, a 2-tuple, or a 3-tuple. 2-tuples are in the format ( str , H ) , where str is a name or description that will be used to identify the accompanying H object where it appears in the visualization. 3-tuples are in the format ( str , H , H ) . The second H object is used for the interior ring in \u201cburst\u201d break-out graphs, but otherwise ignored. The \u201cPowered by the Apocalypse (PbtA)\u201d example in the introduction notebook should give an idea of the effect. (See Interactive quick start .) The default_breakout_type parameter indicates which break-out graphs to display initially and defaults to BreakoutType.NONE . This only affects the initial display. Break-out graphs can be hidden or changed with the interactive controls. Source code in anydyce/viz.py 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 @experimental @beartype def jupyter_visualize ( histogram_specs : Iterable [ Union [ HLikeT , Tuple [ str , HLikeT ], Tuple [ str , HLikeT , HLikeT ]] ], default_breakout_type : Union [ int , BreakoutType ] = BreakoutType . NONE , default_markers = \"<>v^dPXo\" , default_main_plot_type : str = \"line\" , main_plot_funcs_by_type = _DEFAULT_MAIN_PLOT_FUNCS_BY_NAME , ): r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Takes a list of one or more *histogram_specs* and produces an interactive visualization reminiscent of [AnyDice](https://anydice.com/), but with some extra goodies. Each item in *histogram_specs* can be a ``#!python dyce.H`` object, a 2-tuple, or a 3-tuple. 2-tuples are in the format ``#!python (str, H)``, where ``#!python str`` is a name or description that will be used to identify the accompanying ``#!python H`` object where it appears in the visualization. 3-tuples are in the format ``#!python (str, H, H)``. The second ``#!python H`` object is used for the interior ring in \u201cburst\u201d break-out graphs, but otherwise ignored. The \u201cPowered by the _Apocalypse_ (PbtA)\u201d example in the introduction notebook should give an idea of the effect. (See [Interactive quick start](index.md#interactive-quick-start).) The *default_breakout_type* parameter indicates which break-out graphs to display initially and defaults to [``BreakoutType.NONE``][anydyce.viz.BreakoutType.NONE]. This only affects the initial display. Break-out graphs can be hidden or changed with the interactive controls. \"\"\" # TODO(posita): This is a hack-on-a-stream-of-consciousness-until-it-kind-of-works # approach. It would be nice if we had some semblance of an architecture, especially # one that allowed for better customization building blocks. Right now, it's pretty # limited and fragile. assert default_main_plot_type in main_plot_funcs_by_type def _display ( scale : int , enable_cutoff : bool , cutoff : int , breakouts : BreakoutType , main_plot_type : str , graph_type : GraphType , main_plot_style : str , alpha : float , show_shadow : bool , markers : str , burst_graph_color : str , burst_text_color : str , burst_bg_color : str , burst_swap : bool , ) -> None : def _hs () -> Iterator [ Tuple [ str , H , Optional [ H ]]]: if enable_cutoff : cutoff_frac = Fraction ( cutoff ) . limit_denominator ( _CUTOFF_BASE ** _CUTOFF_EXP ) else : cutoff_frac = Fraction ( 0 ) label : str first_h_like : HLikeT second_h_like : Optional [ HLikeT ] for i , thing in enumerate ( histogram_specs ): if isinstance ( thing , ( H , HableT )): label = f \"Histogram { i + 1 } \" first_h_like = thing second_h_like = None else : label , first_h_like = thing [: 2 ] if len ( thing ) < 3 : second_h_like = None else : second_h_like = thing [ 2 ] # type: ignore [misc] assert isinstance ( label , str ) first_h = limit_for_display ( first_h_like . h () if isinstance ( first_h_like , HableT ) else first_h_like , cutoff_frac , ) assert isinstance ( first_h , H ), f \"unrecognized histogram type { first_h !r} \" if second_h_like is None : second_h = None else : second_h = limit_for_display ( second_h_like . h () if isinstance ( second_h_like , HableT ) else second_h_like , cutoff_frac , ) assert second_h is None or isinstance ( second_h , H ), f \"unrecognized histogram type { second_h !r} \" yield label , first_h , second_h hs_list = list ( _hs ()) unique_outcomes = sorted ( set ( chain . from_iterable ( h . outcomes () for _ , h , _ in hs_list )) ) def _csv_download_link () -> HTML : labels = [ label for label , _ , _ in hs_list ] raw_buffer = io . BytesIO () csv_buffer = io . TextIOWrapper ( raw_buffer , encoding = \"utf-8\" , newline = \"\" , write_through = True ) csv_writer = csv . DictWriter ( csv_buffer , fieldnames = [ \"Outcome\" ] + labels ) csv_writer . writeheader () for outcome in unique_outcomes : row = { \"Outcome\" : outcome } row . update ( { label : h [ outcome ] / h . total for label , h , _ in hs_list if outcome in h } ) csv_writer . writerow ( row ) # Inspiration: <https://medium.com/@charles2588/how-to-upload-download-files-to-from-notebook-in-my-local-machine-6a4e65a15767> csv_name = \", \" . join ( labels ) csv_name = csv_name if len ( labels ) <= 32 else ( csv_name [: 29 ] + \"...\" ) payload = base64 . standard_b64encode ( raw_buffer . getvalue ()) . decode () return HTML ( f \"\"\" <a download=\" { csv_name } .csv\" href=\"data:text/csv;base64, { payload } \" target=\"_blank\"> Download raw data as CSV </a> \"\"\" ) display ( _csv_download_link ()) matplotlib . rcParams . update ( matplotlib . rcParamsDefault ) matplotlib . pyplot . rcParams [ \"figure.figsize\" ] = ( scale , scale / 16 * 9 , ) matplotlib . style . use ( main_plot_style ) _ , ax = matplotlib . pyplot . subplots () if main_plot_type == \"scatter\" : matplotlib . pyplot . rcParams [ \"lines.markersize\" ] *= 2 main_plot_funcs_by_type [ main_plot_type ]( ax , hs_list , graph_type = graph_type , alpha = alpha , show_shadow = show_shadow , markers = markers if markers else \" \" , ) ax . set_xticks ( unique_outcomes ) ax . legend () with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) matplotlib . pyplot . tight_layout () matplotlib . pyplot . show () cutoff_widget . disabled = not enable_cutoff burst_graph_color_widget . disabled = True burst_text_color_widget . disabled = True burst_bg_color_widget . disabled = True burst_swap_widget . disabled = True if breakouts == BreakoutType . BARH : per_outcome_height = 1 per_breakout_height = 1 total_height = per_breakout_height * len ( hs_list ) + sum ( per_outcome_height for _ in chain . from_iterable ( h . outcomes () for _ , h , _ in hs_list ) ) inches_per_height_unit = scale / 64 matplotlib . pyplot . rcParams [ \"figure.figsize\" ] = ( scale , total_height * inches_per_height_unit , ) grid = ( total_height , 1 ) top = 0 ax = None src_ax = None barh_kw : Dict [ str , Any ] = dict ( alpha = alpha ) if show_shadow : barh_kw . update ( dict ( path_effects = [ matplotlib . patheffects . withSimplePatchShadow (), matplotlib . patheffects . Normal (), ] ) ) for i , ( label , h , _ ) in enumerate ( hs_list ): outcomes , values = values_xy_for_graph_type ( h , graph_type ) loc = ( top , 0 ) rowspan = per_breakout_height + per_outcome_height * len ( outcomes ) top += rowspan if src_ax is None : src_ax = ax = matplotlib . pyplot . subplot2grid ( grid , loc , rowspan = rowspan ) else : ax = matplotlib . pyplot . subplot2grid ( grid , loc , rowspan = rowspan , sharex = src_ax ) ax . set_yticks ( outcomes ) ax . tick_params ( labelbottom = False ) ax . barh ( outcomes , values , label = label , ** barh_kw ) ax . legend ( loc = \"upper right\" ) if ax is not None : ax . tick_params ( labelbottom = True ) ax . xaxis . set_major_formatter ( matplotlib . ticker . PercentFormatter ( xmax = 1 )) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) matplotlib . pyplot . tight_layout () matplotlib . pyplot . show () elif breakouts == BreakoutType . BURST : cols = 3 rows = len ( hs_list ) // cols + ( len ( hs_list ) % cols != 0 ) matplotlib . pyplot . rcParams [ \"figure.figsize\" ] = ( scale , scale / 16 * 5 * rows , ) matplotlib . pyplot . figure ( facecolor = burst_bg_color ) burst_graph_color_widget . disabled = False burst_text_color_widget . disabled = False burst_bg_color_widget . disabled = False if any ( h_outer is not None and h_inner != h_outer for _ , h_inner , h_outer in hs_list ): burst_swap_widget . disabled = False for i , ( label , h_inner , h_outer ) in enumerate ( hs_list ): plot_burst_kw : Dict [ str , Any ] = dict ( title = label , inner_color = burst_graph_color , text_color = burst_text_color , alpha = alpha , ) if h_outer is not None : if not burst_swap : h_inner , h_outer = h_outer , h_inner plot_burst_kw . update ( dict ( outer_formatter = _outcome_name_probability_formatter ) ) ax = matplotlib . pyplot . subplot2grid (( rows , cols ), ( i // cols , i % cols )) plot_burst ( ax , h_inner , h_outer , ** plot_burst_kw , ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) matplotlib . pyplot . tight_layout () matplotlib . pyplot . show () else : assert ( breakouts == BreakoutType . NONE ), f \"unrecognized breakout type { breakouts !r} \" scale_widget = ipywidgets . widgets . IntSlider ( value = 12 , min = 8 , max = 16 , step = 1 , continuous_update = False , description = \"Scale\" , ) enable_cutoff_widget = ipywidgets . widgets . Checkbox ( value = False , description = \"Hide Data\" , ) cutoff_widget = ipywidgets . widgets . FloatLogSlider ( value = _CUTOFF_BASE ** - ( _CUTOFF_EXP - 2 ), base = _CUTOFF_BASE , min =- _CUTOFF_EXP , max =- ( _CUTOFF_EXP - 3 ), step = 0.2 , continuous_update = False , readout_format = \".6f\" , description = \"Hide up to\" , ) breakouts_widget = ipywidgets . widgets . RadioButtons ( value = BreakoutType ( default_breakout_type ), options = ( ( \"None\" , BreakoutType . NONE ), ( \"Horizontal Bar\" , BreakoutType . BARH ), ( \"Burst\" , BreakoutType . BURST ), ), ) main_plot_type_widget = ipywidgets . widgets . Dropdown ( value = default_main_plot_type , options = main_plot_funcs_by_type . keys (), description = \"Main Type\" , ) graph_type_widget = ipywidgets . widgets . RadioButtons ( value = GraphType . NORMAL , options = ( ( \"Normal\" , GraphType . NORMAL ), ( \"At Least\" , GraphType . AT_LEAST ), ( \"At Most\" , GraphType . AT_MOST ), ), ) main_plot_style_widget = ipywidgets . widgets . Dropdown ( value = \"bmh\" , options = [ \"default\" ] + matplotlib . style . available , description = \"Main Colors\" , ) alpha_widget = ipywidgets . widgets . FloatSlider ( value = 0.6 , min = 0.0 , max = 1.0 , step = 0.05 , continuous_update = False , readout_format = \"0.0%\" , description = \"Opacity\" , ) show_shadow_widget = ipywidgets . widgets . Checkbox ( value = False , description = \"Shadows\" , ) markers_widget = ipywidgets . widgets . Text ( value = default_markers , description = \"Markers\" , ) burst_graph_color_widget = ipywidgets . widgets . Dropdown ( value = DEFAULT_GRAPH_COLOR , options = sorted ( matplotlib . cm . cmap_d . keys ()), disabled = True , description = \"Burst Graph\" , ) burst_text_color_widget = ipywidgets . widgets . Dropdown ( value = DEFAULT_TEXT_COLOR , options = sorted ( sorted ( matplotlib . colors . CSS4_COLORS . keys ())), disabled = True , description = \"Burst Text\" , ) burst_bg_color_widget = ipywidgets . widgets . Dropdown ( value = \"white\" , options = sorted ( sorted ( matplotlib . colors . CSS4_COLORS . keys ())), disabled = True , description = \"Burst Bkgrd\" , ) burst_swap_widget = ipywidgets . widgets . Checkbox ( value = False , description = \"Burst Swap\" , ) display ( ipywidgets . widgets . VBox ( [ ipywidgets . widgets . HBox ( [ ipywidgets . widgets . VBox ( [ scale_widget , enable_cutoff_widget , cutoff_widget , ipywidgets . widgets . Label ( \"Break-out Graphs:\" ), breakouts_widget , ] ), ipywidgets . widgets . VBox ( [ main_plot_type_widget , ipywidgets . widgets . Label ( \"Plot Type:\" ), graph_type_widget , main_plot_style_widget , alpha_widget , show_shadow_widget , markers_widget , ] ), ipywidgets . widgets . VBox ( [ burst_graph_color_widget , burst_text_color_widget , burst_bg_color_widget , burst_swap_widget , ] ), ] ), ipywidgets . widgets . interactive_output ( _display , { \"scale\" : scale_widget , \"enable_cutoff\" : enable_cutoff_widget , \"cutoff\" : cutoff_widget , \"breakouts\" : breakouts_widget , \"main_plot_type\" : main_plot_type_widget , \"graph_type\" : graph_type_widget , \"main_plot_style\" : main_plot_style_widget , \"alpha\" : alpha_widget , \"show_shadow\" : show_shadow_widget , \"markers\" : markers_widget , \"burst_graph_color\" : burst_graph_color_widget , \"burst_text_color\" : burst_text_color_widget , \"burst_bg_color\" : burst_bg_color_widget , \"burst_swap\" : burst_swap_widget , }, ), ] ) ) BreakoutType Bases: Enum Source code in anydyce/viz.py 66 67 68 69 class BreakoutType ( Enum ): NONE = 0 BARH = auto () BURST = auto () BARH = auto () class-attribute BURST = auto () class-attribute NONE = 0 class-attribute","title":"<tt>anydyce</tt>"},{"location":"anydyce/#anydyce-package-reference","text":"","title":"anydyce package reference"},{"location":"anydyce/#anydyce.viz.jupyter_visualize","text":"Experimental This function should be considered experimental and may change or disappear in future versions. Takes a list of one or more histogram_specs and produces an interactive visualization reminiscent of AnyDice , but with some extra goodies. Each item in histogram_specs can be a dyce . H object, a 2-tuple, or a 3-tuple. 2-tuples are in the format ( str , H ) , where str is a name or description that will be used to identify the accompanying H object where it appears in the visualization. 3-tuples are in the format ( str , H , H ) . The second H object is used for the interior ring in \u201cburst\u201d break-out graphs, but otherwise ignored. The \u201cPowered by the Apocalypse (PbtA)\u201d example in the introduction notebook should give an idea of the effect. (See Interactive quick start .) The default_breakout_type parameter indicates which break-out graphs to display initially and defaults to BreakoutType.NONE . This only affects the initial display. Break-out graphs can be hidden or changed with the interactive controls. Source code in anydyce/viz.pyexperimental @beartype def jupyter_visualize ( histogram_specs : Iterable [ Union [ HLikeT , Tuple [ str , HLikeT ], Tuple [ str , HLikeT , HLikeT ]] ], default_breakout_type : Union [ int , BreakoutType ] = BreakoutType . NONE , default_markers = \"<>v^dPXo\" , default_main_plot_type : str = \"line\" , main_plot_funcs_by_type = _DEFAULT_MAIN_PLOT_FUNCS_BY_NAME , ): r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Takes a list of one or more *histogram_specs* and produces an interactive visualization reminiscent of [AnyDice](https://anydice.com/), but with some extra goodies. Each item in *histogram_specs* can be a ``#!python dyce.H`` object, a 2-tuple, or a 3-tuple. 2-tuples are in the format ``#!python (str, H)``, where ``#!python str`` is a name or description that will be used to identify the accompanying ``#!python H`` object where it appears in the visualization. 3-tuples are in the format ``#!python (str, H, H)``. The second ``#!python H`` object is used for the interior ring in \u201cburst\u201d break-out graphs, but otherwise ignored. The \u201cPowered by the _Apocalypse_ (PbtA)\u201d example in the introduction notebook should give an idea of the effect. (See [Interactive quick start](index.md#interactive-quick-start).) The *default_breakout_type* parameter indicates which break-out graphs to display initially and defaults to [``BreakoutType.NONE``][anydyce.viz.BreakoutType.NONE]. This only affects the initial display. Break-out graphs can be hidden or changed with the interactive controls. \"\"\" # TODO(posita): This is a hack-on-a-stream-of-consciousness-until-it-kind-of-works # approach. It would be nice if we had some semblance of an architecture, especially # one that allowed for better customization building blocks. Right now, it's pretty # limited and fragile. assert default_main_plot_type in main_plot_funcs_by_type def _display ( scale : int , enable_cutoff : bool , cutoff : int , breakouts : BreakoutType , main_plot_type : str , graph_type : GraphType , main_plot_style : str , alpha : float , show_shadow : bool , markers : str , burst_graph_color : str , burst_text_color : str , burst_bg_color : str , burst_swap : bool , ) -> None : def _hs () -> Iterator [ Tuple [ str , H , Optional [ H ]]]: if enable_cutoff : cutoff_frac = Fraction ( cutoff ) . limit_denominator ( _CUTOFF_BASE ** _CUTOFF_EXP ) else : cutoff_frac = Fraction ( 0 ) label : str first_h_like : HLikeT second_h_like : Optional [ HLikeT ] for i , thing in enumerate ( histogram_specs ): if isinstance ( thing , ( H , HableT )): label = f \"Histogram { i + 1 } \" first_h_like = thing second_h_like = None else : label , first_h_like = thing [: 2 ] if len ( thing ) < 3 : second_h_like = None else : second_h_like = thing [ 2 ] # type: ignore [misc] assert isinstance ( label , str ) first_h = limit_for_display ( first_h_like . h () if isinstance ( first_h_like , HableT ) else first_h_like , cutoff_frac , ) assert isinstance ( first_h , H ), f \"unrecognized histogram type { first_h !r} \" if second_h_like is None : second_h = None else : second_h = limit_for_display ( second_h_like . h () if isinstance ( second_h_like , HableT ) else second_h_like , cutoff_frac , ) assert second_h is None or isinstance ( second_h , H ), f \"unrecognized histogram type { second_h !r} \" yield label , first_h , second_h hs_list = list ( _hs ()) unique_outcomes = sorted ( set ( chain . from_iterable ( h . outcomes () for _ , h , _ in hs_list )) ) def _csv_download_link () -> HTML : labels = [ label for label , _ , _ in hs_list ] raw_buffer = io . BytesIO () csv_buffer = io . TextIOWrapper ( raw_buffer , encoding = \"utf-8\" , newline = \"\" , write_through = True ) csv_writer = csv . DictWriter ( csv_buffer , fieldnames = [ \"Outcome\" ] + labels ) csv_writer . writeheader () for outcome in unique_outcomes : row = { \"Outcome\" : outcome } row . update ( { label : h [ outcome ] / h . total for label , h , _ in hs_list if outcome in h } ) csv_writer . writerow ( row ) # Inspiration: <https://medium.com/@charles2588/how-to-upload-download-files-to-from-notebook-in-my-local-machine-6a4e65a15767> csv_name = \", \" . join ( labels ) csv_name = csv_name if len ( labels ) <= 32 else ( csv_name [: 29 ] + \"...\" ) payload = base64 . standard_b64encode ( raw_buffer . getvalue ()) . decode () return HTML ( f \"\"\" <a download=\" { csv_name } .csv\" href=\"data:text/csv;base64, { payload } \" target=\"_blank\"> Download raw data as CSV </a> \"\"\" ) display ( _csv_download_link ()) matplotlib . rcParams . update ( matplotlib . rcParamsDefault ) matplotlib . pyplot . rcParams [ \"figure.figsize\" ] = ( scale , scale / 16 * 9 , ) matplotlib . style . use ( main_plot_style ) _ , ax = matplotlib . pyplot . subplots () if main_plot_type == \"scatter\" : matplotlib . pyplot . rcParams [ \"lines.markersize\" ] *= 2 main_plot_funcs_by_type [ main_plot_type ]( ax , hs_list , graph_type = graph_type , alpha = alpha , show_shadow = show_shadow , markers = markers if markers else \" \" , ) ax . set_xticks ( unique_outcomes ) ax . legend () with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) matplotlib . pyplot . tight_layout () matplotlib . pyplot . show () cutoff_widget . disabled = not enable_cutoff burst_graph_color_widget . disabled = True burst_text_color_widget . disabled = True burst_bg_color_widget . disabled = True burst_swap_widget . disabled = True if breakouts == BreakoutType . BARH : per_outcome_height = 1 per_breakout_height = 1 total_height = per_breakout_height * len ( hs_list ) + sum ( per_outcome_height for _ in chain . from_iterable ( h . outcomes () for _ , h , _ in hs_list ) ) inches_per_height_unit = scale / 64 matplotlib . pyplot . rcParams [ \"figure.figsize\" ] = ( scale , total_height * inches_per_height_unit , ) grid = ( total_height , 1 ) top = 0 ax = None src_ax = None barh_kw : Dict [ str , Any ] = dict ( alpha = alpha ) if show_shadow : barh_kw . update ( dict ( path_effects = [ matplotlib . patheffects . withSimplePatchShadow (), matplotlib . patheffects . Normal (), ] ) ) for i , ( label , h , _ ) in enumerate ( hs_list ): outcomes , values = values_xy_for_graph_type ( h , graph_type ) loc = ( top , 0 ) rowspan = per_breakout_height + per_outcome_height * len ( outcomes ) top += rowspan if src_ax is None : src_ax = ax = matplotlib . pyplot . subplot2grid ( grid , loc , rowspan = rowspan ) else : ax = matplotlib . pyplot . subplot2grid ( grid , loc , rowspan = rowspan , sharex = src_ax ) ax . set_yticks ( outcomes ) ax . tick_params ( labelbottom = False ) ax . barh ( outcomes , values , label = label , ** barh_kw ) ax . legend ( loc = \"upper right\" ) if ax is not None : ax . tick_params ( labelbottom = True ) ax . xaxis . set_major_formatter ( matplotlib . ticker . PercentFormatter ( xmax = 1 )) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) matplotlib . pyplot . tight_layout () matplotlib . pyplot . show () elif breakouts == BreakoutType . BURST : cols = 3 rows = len ( hs_list ) // cols + ( len ( hs_list ) % cols != 0 ) matplotlib . pyplot . rcParams [ \"figure.figsize\" ] = ( scale , scale / 16 * 5 * rows , ) matplotlib . pyplot . figure ( facecolor = burst_bg_color ) burst_graph_color_widget . disabled = False burst_text_color_widget . disabled = False burst_bg_color_widget . disabled = False if any ( h_outer is not None and h_inner != h_outer for _ , h_inner , h_outer in hs_list ): burst_swap_widget . disabled = False for i , ( label , h_inner , h_outer ) in enumerate ( hs_list ): plot_burst_kw : Dict [ str , Any ] = dict ( title = label , inner_color = burst_graph_color , text_color = burst_text_color , alpha = alpha , ) if h_outer is not None : if not burst_swap : h_inner , h_outer = h_outer , h_inner plot_burst_kw . update ( dict ( outer_formatter = _outcome_name_probability_formatter ) ) ax = matplotlib . pyplot . subplot2grid (( rows , cols ), ( i // cols , i % cols )) plot_burst ( ax , h_inner , h_outer , ** plot_burst_kw , ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) matplotlib . pyplot . tight_layout () matplotlib . pyplot . show () else : assert ( breakouts == BreakoutType . NONE ), f \"unrecognized breakout type { breakouts !r} \" scale_widget = ipywidgets . widgets . IntSlider ( value = 12 , min = 8 , max = 16 , step = 1 , continuous_update = False , description = \"Scale\" , ) enable_cutoff_widget = ipywidgets . widgets . Checkbox ( value = False , description = \"Hide Data\" , ) cutoff_widget = ipywidgets . widgets . FloatLogSlider ( value = _CUTOFF_BASE ** - ( _CUTOFF_EXP - 2 ), base = _CUTOFF_BASE , min =- _CUTOFF_EXP , max =- ( _CUTOFF_EXP - 3 ), step = 0.2 , continuous_update = False , readout_format = \".6f\" , description = \"Hide up to\" , ) breakouts_widget = ipywidgets . widgets . RadioButtons ( value = BreakoutType ( default_breakout_type ), options = ( ( \"None\" , BreakoutType . NONE ), ( \"Horizontal Bar\" , BreakoutType . BARH ), ( \"Burst\" , BreakoutType . BURST ), ), ) main_plot_type_widget = ipywidgets . widgets . Dropdown ( value = default_main_plot_type , options = main_plot_funcs_by_type . keys (), description = \"Main Type\" , ) graph_type_widget = ipywidgets . widgets . RadioButtons ( value = GraphType . NORMAL , options = ( ( \"Normal\" , GraphType . NORMAL ), ( \"At Least\" , GraphType . AT_LEAST ), ( \"At Most\" , GraphType . AT_MOST ), ), ) main_plot_style_widget = ipywidgets . widgets . Dropdown ( value = \"bmh\" , options = [ \"default\" ] + matplotlib . style . available , description = \"Main Colors\" , ) alpha_widget = ipywidgets . widgets . FloatSlider ( value = 0.6 , min = 0.0 , max = 1.0 , step = 0.05 , continuous_update = False , readout_format = \"0.0%\" , description = \"Opacity\" , ) show_shadow_widget = ipywidgets . widgets . Checkbox ( value = False , description = \"Shadows\" , ) markers_widget = ipywidgets . widgets . Text ( value = default_markers , description = \"Markers\" , ) burst_graph_color_widget = ipywidgets . widgets . Dropdown ( value = DEFAULT_GRAPH_COLOR , options = sorted ( matplotlib . cm . cmap_d . keys ()), disabled = True , description = \"Burst Graph\" , ) burst_text_color_widget = ipywidgets . widgets . Dropdown ( value = DEFAULT_TEXT_COLOR , options = sorted ( sorted ( matplotlib . colors . CSS4_COLORS . keys ())), disabled = True , description = \"Burst Text\" , ) burst_bg_color_widget = ipywidgets . widgets . Dropdown ( value = \"white\" , options = sorted ( sorted ( matplotlib . colors . CSS4_COLORS . keys ())), disabled = True , description = \"Burst Bkgrd\" , ) burst_swap_widget = ipywidgets . widgets . Checkbox ( value = False , description = \"Burst Swap\" , ) display ( ipywidgets . widgets . VBox ( [ ipywidgets . widgets . HBox ( [ ipywidgets . widgets . VBox ( [ scale_widget , enable_cutoff_widget , cutoff_widget , ipywidgets . widgets . Label ( \"Break-out Graphs:\" ), breakouts_widget , ] ), ipywidgets . widgets . VBox ( [ main_plot_type_widget , ipywidgets . widgets . Label ( \"Plot Type:\" ), graph_type_widget , main_plot_style_widget , alpha_widget , show_shadow_widget , markers_widget , ] ), ipywidgets . widgets . VBox ( [ burst_graph_color_widget , burst_text_color_widget , burst_bg_color_widget , burst_swap_widget , ] ), ] ), ipywidgets . widgets . interactive_output ( _display , { \"scale\" : scale_widget , \"enable_cutoff\" : enable_cutoff_widget , \"cutoff\" : cutoff_widget , \"breakouts\" : breakouts_widget , \"main_plot_type\" : main_plot_type_widget , \"graph_type\" : graph_type_widget , \"main_plot_style\" : main_plot_style_widget , \"alpha\" : alpha_widget , \"show_shadow\" : show_shadow_widget , \"markers\" : markers_widget , \"burst_graph_color\" : burst_graph_color_widget , \"burst_text_color\" : burst_text_color_widget , \"burst_bg_color\" : burst_bg_color_widget , \"burst_swap\" : burst_swap_widget , }, ), ] ) )","title":"jupyter_visualize()"},{"location":"anydyce/#anydyce.viz.BreakoutType","text":"Bases: Enum Source code in anydyce/viz.py 66 67 68 69 class BreakoutType ( Enum ): NONE = 0 BARH = auto () BURST = auto ()","title":"BreakoutType"},{"location":"anydyce/#anydyce.viz.BreakoutType.BARH","text":"","title":"BARH"},{"location":"anydyce/#anydyce.viz.BreakoutType.BURST","text":"","title":"BURST"},{"location":"anydyce/#anydyce.viz.BreakoutType.NONE","text":"","title":"NONE"},{"location":"anydyce.viz/","text":"anydyce . viz package reference Experimental This package is an attempt to explore conveniences for integration with Matplotlib . It is an explicit departure from RFC 1925, \u00a7 2.2 and should be considered experimental. Be warned that future release may introduce incompatibilities or remove this package altogether. Feedback, suggestions, and contributions are welcome and appreciated. cumulative_probability_formatter ( outcome : RealLike , probability : Fraction , h : H ) -> str Experimental This function should be considered experimental and may change or disappear in future versions. Inefficiently (i.e., \\(O \\left( {n} ^ {2} \\right)\\) ) calculates cumulative probability pairs for outcome in h . This can be useful for passing as the outer_formatter value to plot_burst . Source code in anydyce/viz.py 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 @experimental @beartype def cumulative_probability_formatter ( outcome : RealLike , probability : Fraction , h : H , ) -> str : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Inefficiently (i.e., $O \\left( {n} ^ {2} \\right)$) calculates cumulative probability pairs for *outcome* in *h*. This can be useful for passing as the *outer_formatter* value to [``plot_burst``][anydyce.viz.plot_burst]. \"\"\" le_total , ge_total = Fraction ( 0 ), Fraction ( 1 ) for h_outcome , h_probability in h . distribution (): le_total += h_probability if math . isclose ( h_outcome , outcome ): return f \" { outcome } { float ( probability ) : .2% } ; \u2265 { float ( le_total ) : .2% } ; \u2264 { float ( ge_total ) : .2% } \" ge_total -= h_probability return f \" { outcome } { float ( probability ) : .2% } \" limit_for_display ( h : H , cutoff : Fraction = _CUTOFF_LIM ) -> H Experimental This function should be considered experimental and may change or disappear in future versions. Discards outcomes in h , starting with the smallest counts as long as the total discarded in proportion to h . total does not exceed cutoff . This can be useful in speeding up plots where there are large number of negligible probabilities. 1 2 3 4 5 6 7 8 9 10 >>> from anydyce.viz import limit_for_display >>> from dyce import H >>> from fractions import Fraction >>> h = H ({ 1 : 1 , 2 : 2 , 3 : 3 , 4 : 4 , 5 : 5 , 6 : 6 }) >>> h . total 21 >>> limit_for_display ( h , cutoff = Fraction ( 5 , 21 )) H ({ 3 : 3 , 4 : 4 , 5 : 5 , 6 : 6 }) >>> limit_for_display ( h , cutoff = Fraction ( 6 , 21 )) H ({ 4 : 4 , 5 : 5 , 6 : 6 }) Source code in anydyce/viz.py 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 @experimental @beartype def limit_for_display ( h : H , cutoff : Fraction = _CUTOFF_LIM ) -> H : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Discards outcomes in *h*, starting with the smallest counts as long as the total discarded in proportion to ``#!python h.total`` does not exceed *cutoff*. This can be useful in speeding up plots where there are large number of negligible probabilities. ``` python >>> from anydyce.viz import limit_for_display >>> from dyce import H >>> from fractions import Fraction >>> h = H({1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6}) >>> h.total 21 >>> limit_for_display(h, cutoff=Fraction(5, 21)) H({3: 3, 4: 4, 5: 5, 6: 6}) >>> limit_for_display(h, cutoff=Fraction(6, 21)) H({4: 4, 5: 5, 6: 6}) ``` \"\"\" if cutoff < 0 or cutoff > 1 : raise ValueError ( f \"cutoff ( { cutoff } ) must be between zero and one, inclusive\" ) cutoff_count = int ( cutoff * h . total ) if cutoff_count == 0 : return h def _cull () -> Iterator [ Tuple [ RealLike , int ]]: so_far = 0 for outcome , count in sorted ( h . items (), key = itemgetter ( 1 )): so_far += count if so_far > cutoff_count : yield outcome , count return H ( _cull ()) values_xy_for_graph_type ( h : H , graph_type : GraphType ) -> Tuple [ Tuple [ RealLike , ... ], Tuple [ float , ... ]] Source code in anydyce/viz.py 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 @experimental @beartype def values_xy_for_graph_type ( h : H , graph_type : GraphType ) -> Tuple [ Tuple [ RealLike , ... ], Tuple [ float , ... ]]: outcomes , probabilities = h . distribution_xy () if graph_type is GraphType . AT_LEAST : probabilities = tuple ( accumulate ( probabilities , __sub__ , initial = 1.0 ))[: - 1 ] elif graph_type is GraphType . AT_MOST : probabilities = tuple ( accumulate ( probabilities , __add__ , initial = 0.0 ))[ 1 :] else : assert graph_type is GraphType . NORMAL , f \"unrecognized graph type { graph_type } \" return outcomes , probabilities plot_bar ( ax : AxesT , hs : Sequence [ Tuple [ str , H ]], graph_type : GraphType = GraphType . NORMAL , alpha : float = DEFAULT_GRAPH_ALPHA , shadow : bool = False ) -> None Experimental This function should be considered experimental and may change or disappear in future versions. Plots a bar graph of hs using ax with alpha and shadow . hs is a sequence of two-tuples (pairs) of strings (labels) and H objects. Bars are interleaved and non-overlapping, so this is best suited to plots where hs contains a small number of histograms. Source code in anydyce/viz.py 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 @experimental @beartype def plot_bar ( ax : AxesT , hs : Sequence [ Tuple [ str , H ]], graph_type : GraphType = GraphType . NORMAL , alpha : float = DEFAULT_GRAPH_ALPHA , shadow : bool = False , ) -> None : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Plots a bar graph of *hs* using [*ax*](https://matplotlib.org/stable/api/axes_api.html#the-axes-class) with *alpha* and *shadow*. *hs* is a sequence of two-tuples (pairs) of strings (labels) and ``H`` objects. Bars are interleaved and non-overlapping, so this is best suited to plots where *hs* contains a small number of histograms. \"\"\" ax . yaxis . set_major_formatter ( matplotlib . ticker . PercentFormatter ( xmax = 1 )) width = 0.8 bar_kw : Dict [ str , Any ] = dict ( alpha = alpha , width = width / len ( hs )) if shadow : bar_kw . update ( dict ( path_effects = [ matplotlib . patheffects . withSimplePatchShadow (), matplotlib . patheffects . Normal (), ] ) ) for i , ( label , h ) in enumerate ( hs ): # Orient to the middle of each bar ((i + 0.5) ... ) whose width is an even share # of the total width (... * width / len(hs) ...) and center the whole cluster of # bars around the data point (... - width / 2) adj = ( i + 0.5 ) * width / len ( hs ) - width / 2 outcomes , values = values_xy_for_graph_type ( h , graph_type ) ax . bar ( [ outcome + adj for outcome in outcomes ], values , label = label , ** bar_kw , ) plot_line ( ax : AxesT , hs : Sequence [ Tuple [ str , H ]], graph_type : GraphType = GraphType . NORMAL , alpha : float = DEFAULT_GRAPH_ALPHA , shadow : bool = False , markers : str = 'o' ) -> None Experimental This function should be considered experimental and may change or disappear in future versions. Plots a line graph of hs using ax with alpha and shadow . hs is a sequence of two-tuples (pairs) of strings (labels) and dyce . H objects. markers is cycled through when creating each line. For example, if markers is \"o+\" , the first histogram in hs will be plotted with a circle, the second will be plotted with a plus, the third will be plotted with a circle, the fourth will be plotted with a plus, and so on. Source code in anydyce/viz.py 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 @experimental @beartype def plot_line ( ax : AxesT , hs : Sequence [ Tuple [ str , H ]], graph_type : GraphType = GraphType . NORMAL , alpha : float = DEFAULT_GRAPH_ALPHA , shadow : bool = False , markers : str = \"o\" , ) -> None : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Plots a line graph of *hs* using [*ax*](https://matplotlib.org/stable/api/axes_api.html#the-axes-class) with *alpha* and *shadow*. *hs* is a sequence of two-tuples (pairs) of strings (labels) and ``#!python dyce.H`` objects. *markers* is cycled through when creating each line. For example, if *markers* is ``#!python \"o+\"``, the first histogram in *hs* will be plotted with a circle, the second will be plotted with a plus, the third will be plotted with a circle, the fourth will be plotted with a plus, and so on. \"\"\" ax . yaxis . set_major_formatter ( matplotlib . ticker . PercentFormatter ( xmax = 1 )) plot_kw : Dict [ str , Any ] = dict ( alpha = alpha ) if shadow : plot_kw . update ( dict ( path_effects = [ matplotlib . patheffects . SimpleLineShadow (), matplotlib . patheffects . Normal (), ] ) ) for ( label , h ), marker in zip ( hs , cycle ( markers )): outcomes , values = values_xy_for_graph_type ( h , graph_type ) ax . plot ( outcomes , values , label = label , marker = marker , ** plot_kw ) plot_scatter ( ax : AxesT , hs : Sequence [ Tuple [ str , H ]], graph_type : GraphType = GraphType . NORMAL , alpha : float = DEFAULT_GRAPH_ALPHA , shadow : bool = False , markers : str = '<>v^dPXo' ) -> None Experimental This function should be considered experimental and may change or disappear in future versions. Plots a scatter graph of hs using ax with alpha and shadow . hs is a sequence of two-tuples (pairs) of strings (labels) and dyce.H objects. markers is cycled through when creating each line. For example, if markers is \"o+\" , the first histogram in hs will be plotted with a circle, the second will be plotted with a plus, the third will be plotted with a circle, the fourth will be plotted with a plus, and so on. Source code in anydyce/viz.py 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 @experimental @beartype def plot_scatter ( ax : AxesT , hs : Sequence [ Tuple [ str , H ]], graph_type : GraphType = GraphType . NORMAL , alpha : float = DEFAULT_GRAPH_ALPHA , shadow : bool = False , markers : str = \"<>v^dPXo\" , ) -> None : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Plots a scatter graph of *hs* using [*ax*](https://matplotlib.org/stable/api/axes_api.html#the-axes-class) with *alpha* and *shadow*. *hs* is a sequence of two-tuples (pairs) of strings (labels) and ``dyce.H`` objects. *markers* is cycled through when creating each line. For example, if *markers* is ``#!python \"o+\"``, the first histogram in *hs* will be plotted with a circle, the second will be plotted with a plus, the third will be plotted with a circle, the fourth will be plotted with a plus, and so on. \"\"\" ax . yaxis . set_major_formatter ( matplotlib . ticker . PercentFormatter ( xmax = 1 )) scatter_kw : Dict [ str , Any ] = dict ( alpha = alpha ) if shadow : scatter_kw . update ( dict ( path_effects = [ matplotlib . patheffects . SimpleLineShadow (), matplotlib . patheffects . Normal (), ] ) ) for ( label , h ), marker in zip ( hs , cycle ( markers )): outcomes , values = values_xy_for_graph_type ( h , graph_type ) ax . scatter ( outcomes , values , label = label , marker = marker , ** scatter_kw ) plot_burst ( ax : AxesT , h_inner : H , h_outer : Optional [ H ] = None , title : Optional [ str ] = None , inner_formatter : HFormatterT = _outcome_name_formatter , inner_color : str = DEFAULT_GRAPH_COLOR , outer_formatter : Optional [ HFormatterT ] = None , outer_color : Optional [ str ] = None , text_color : str = DEFAULT_TEXT_COLOR , alpha : float = DEFAULT_BURST_ALPHA ) -> None Experimental This function should be considered experimental and may change or disappear in future versions. Creates a dual, overlapping, cocentric pie chart in ax , which can be useful for visualizing relative probability distributions. Examples can be found in Additional interfaces . Source code in anydyce/viz.py 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 @experimental @beartype def plot_burst ( ax : AxesT , h_inner : H , h_outer : Optional [ H ] = None , title : Optional [ str ] = None , inner_formatter : HFormatterT = _outcome_name_formatter , inner_color : str = DEFAULT_GRAPH_COLOR , outer_formatter : Optional [ HFormatterT ] = None , outer_color : Optional [ str ] = None , text_color : str = DEFAULT_TEXT_COLOR , alpha : float = DEFAULT_BURST_ALPHA , ) -> None : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Creates a dual, overlapping, cocentric pie chart in [*ax*](https://matplotlib.org/stable/api/axes_api.html#the-axes-class), which can be useful for visualizing relative probability distributions. Examples can be found in [Additional interfaces](index.md#additional-interfaces). \"\"\" h_outer = h_inner if h_outer is None else h_outer if outer_formatter is None : if h_outer == h_inner : outer_formatter = _probability_formatter else : outer_formatter = inner_formatter outer_color = inner_color if outer_color is None else outer_color inner = ( ( inner_formatter ( outcome , probability , h_inner ) if probability >= _LABEL_LIM else \"\" , probability , ) for outcome , probability in ( h_inner . distribution ()) ) inner_labels , inner_values = list ( zip ( * inner )) inner_colors = graph_colors ( inner_color , inner_values , alpha ) outer = ( ( outer_formatter ( outcome , probability , h_outer ) if probability >= _LABEL_LIM else \"\" , probability , ) for outcome , probability in ( h_outer . distribution ()) ) outer_labels , outer_values = list ( zip ( * outer )) outer_colors = graph_colors ( outer_color , outer_values , alpha ) if title : ax . set_title ( title , fontdict = { \"fontweight\" : \"bold\" , \"color\" : text_color }, pad = 24.0 , ) ax . pie ( outer_values , labels = outer_labels , radius = 1.0 , labeldistance = 1.15 , startangle = 90 , colors = outer_colors , textprops = dict ( color = text_color ), wedgeprops = dict ( width = 0.8 , edgecolor = text_color ), ) ax . pie ( inner_values , labels = inner_labels , radius = 0.85 , labeldistance = 0.7 , startangle = 90 , colors = inner_colors , textprops = dict ( color = text_color ), wedgeprops = dict ( width = 0.5 , edgecolor = text_color ), ) ax . set ( aspect = \"equal\" ) plot_burst_subplot ( h_inner : H , h_outer : Optional [ H ] = None , title : Optional [ str ] = None , inner_formatter : HFormatterT = _outcome_name_formatter , inner_color : str = DEFAULT_GRAPH_COLOR , outer_formatter : Optional [ HFormatterT ] = None , outer_color : Optional [ str ] = None , text_color : str = DEFAULT_TEXT_COLOR , alpha : float = DEFAULT_BURST_ALPHA ) -> Tuple [ FigureT , AxesT ] Experimental This function should be considered experimental and may change or disappear in future versions. Wrapper around plot_burst that creates a figure, axis pair, calls matplotlib.pyplot.tight_layout , and returns the pair. Source code in anydyce/viz.py 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 @experimental @beartype def plot_burst_subplot ( h_inner : H , h_outer : Optional [ H ] = None , title : Optional [ str ] = None , inner_formatter : HFormatterT = _outcome_name_formatter , inner_color : str = DEFAULT_GRAPH_COLOR , outer_formatter : Optional [ HFormatterT ] = None , outer_color : Optional [ str ] = None , text_color : str = DEFAULT_TEXT_COLOR , alpha : float = DEFAULT_BURST_ALPHA , ) -> Tuple [ FigureT , AxesT ]: r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Wrapper around [``plot_burst``][anydyce.viz.plot_burst] that creates a figure, axis pair, calls [``matplotlib.pyplot.tight_layout``](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.tight_layout.html), and returns the pair. \"\"\" fig , ax = matplotlib . pyplot . subplots () plot_burst ( ax , h_inner , h_outer , title , inner_formatter , inner_color , outer_formatter , outer_color , text_color , alpha , ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) matplotlib . pyplot . tight_layout () return fig , ax","title":"<tt>anydyce.viz</tt>"},{"location":"anydyce.viz/#anydyceviz-package-reference","text":"Experimental This package is an attempt to explore conveniences for integration with Matplotlib . It is an explicit departure from RFC 1925, \u00a7 2.2 and should be considered experimental. Be warned that future release may introduce incompatibilities or remove this package altogether. Feedback, suggestions, and contributions are welcome and appreciated.","title":"anydyce.viz package reference"},{"location":"anydyce.viz/#anydyce.viz.cumulative_probability_formatter","text":"Experimental This function should be considered experimental and may change or disappear in future versions. Inefficiently (i.e., \\(O \\left( {n} ^ {2} \\right)\\) ) calculates cumulative probability pairs for outcome in h . This can be useful for passing as the outer_formatter value to plot_burst . Source code in anydyce/viz.py 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 @experimental @beartype def cumulative_probability_formatter ( outcome : RealLike , probability : Fraction , h : H , ) -> str : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Inefficiently (i.e., $O \\left( {n} ^ {2} \\right)$) calculates cumulative probability pairs for *outcome* in *h*. This can be useful for passing as the *outer_formatter* value to [``plot_burst``][anydyce.viz.plot_burst]. \"\"\" le_total , ge_total = Fraction ( 0 ), Fraction ( 1 ) for h_outcome , h_probability in h . distribution (): le_total += h_probability if math . isclose ( h_outcome , outcome ): return f \" { outcome } { float ( probability ) : .2% } ; \u2265 { float ( le_total ) : .2% } ; \u2264 { float ( ge_total ) : .2% } \" ge_total -= h_probability return f \" { outcome } { float ( probability ) : .2% } \"","title":"cumulative_probability_formatter()"},{"location":"anydyce.viz/#anydyce.viz.limit_for_display","text":"Experimental This function should be considered experimental and may change or disappear in future versions. Discards outcomes in h , starting with the smallest counts as long as the total discarded in proportion to h . total does not exceed cutoff . This can be useful in speeding up plots where there are large number of negligible probabilities. 1 2 3 4 5 6 7 8 9 10 >>> from anydyce.viz import limit_for_display >>> from dyce import H >>> from fractions import Fraction >>> h = H ({ 1 : 1 , 2 : 2 , 3 : 3 , 4 : 4 , 5 : 5 , 6 : 6 }) >>> h . total 21 >>> limit_for_display ( h , cutoff = Fraction ( 5 , 21 )) H ({ 3 : 3 , 4 : 4 , 5 : 5 , 6 : 6 }) >>> limit_for_display ( h , cutoff = Fraction ( 6 , 21 )) H ({ 4 : 4 , 5 : 5 , 6 : 6 }) Source code in anydyce/viz.py 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 @experimental @beartype def limit_for_display ( h : H , cutoff : Fraction = _CUTOFF_LIM ) -> H : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Discards outcomes in *h*, starting with the smallest counts as long as the total discarded in proportion to ``#!python h.total`` does not exceed *cutoff*. This can be useful in speeding up plots where there are large number of negligible probabilities. ``` python >>> from anydyce.viz import limit_for_display >>> from dyce import H >>> from fractions import Fraction >>> h = H({1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6}) >>> h.total 21 >>> limit_for_display(h, cutoff=Fraction(5, 21)) H({3: 3, 4: 4, 5: 5, 6: 6}) >>> limit_for_display(h, cutoff=Fraction(6, 21)) H({4: 4, 5: 5, 6: 6}) ``` \"\"\" if cutoff < 0 or cutoff > 1 : raise ValueError ( f \"cutoff ( { cutoff } ) must be between zero and one, inclusive\" ) cutoff_count = int ( cutoff * h . total ) if cutoff_count == 0 : return h def _cull () -> Iterator [ Tuple [ RealLike , int ]]: so_far = 0 for outcome , count in sorted ( h . items (), key = itemgetter ( 1 )): so_far += count if so_far > cutoff_count : yield outcome , count return H ( _cull ())","title":"limit_for_display()"},{"location":"anydyce.viz/#anydyce.viz.values_xy_for_graph_type","text":"Source code in anydyce/viz.py 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 @experimental @beartype def values_xy_for_graph_type ( h : H , graph_type : GraphType ) -> Tuple [ Tuple [ RealLike , ... ], Tuple [ float , ... ]]: outcomes , probabilities = h . distribution_xy () if graph_type is GraphType . AT_LEAST : probabilities = tuple ( accumulate ( probabilities , __sub__ , initial = 1.0 ))[: - 1 ] elif graph_type is GraphType . AT_MOST : probabilities = tuple ( accumulate ( probabilities , __add__ , initial = 0.0 ))[ 1 :] else : assert graph_type is GraphType . NORMAL , f \"unrecognized graph type { graph_type } \" return outcomes , probabilities","title":"values_xy_for_graph_type()"},{"location":"anydyce.viz/#anydyce.viz.plot_bar","text":"Experimental This function should be considered experimental and may change or disappear in future versions. Plots a bar graph of hs using ax with alpha and shadow . hs is a sequence of two-tuples (pairs) of strings (labels) and H objects. Bars are interleaved and non-overlapping, so this is best suited to plots where hs contains a small number of histograms. Source code in anydyce/viz.py 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 @experimental @beartype def plot_bar ( ax : AxesT , hs : Sequence [ Tuple [ str , H ]], graph_type : GraphType = GraphType . NORMAL , alpha : float = DEFAULT_GRAPH_ALPHA , shadow : bool = False , ) -> None : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Plots a bar graph of *hs* using [*ax*](https://matplotlib.org/stable/api/axes_api.html#the-axes-class) with *alpha* and *shadow*. *hs* is a sequence of two-tuples (pairs) of strings (labels) and ``H`` objects. Bars are interleaved and non-overlapping, so this is best suited to plots where *hs* contains a small number of histograms. \"\"\" ax . yaxis . set_major_formatter ( matplotlib . ticker . PercentFormatter ( xmax = 1 )) width = 0.8 bar_kw : Dict [ str , Any ] = dict ( alpha = alpha , width = width / len ( hs )) if shadow : bar_kw . update ( dict ( path_effects = [ matplotlib . patheffects . withSimplePatchShadow (), matplotlib . patheffects . Normal (), ] ) ) for i , ( label , h ) in enumerate ( hs ): # Orient to the middle of each bar ((i + 0.5) ... ) whose width is an even share # of the total width (... * width / len(hs) ...) and center the whole cluster of # bars around the data point (... - width / 2) adj = ( i + 0.5 ) * width / len ( hs ) - width / 2 outcomes , values = values_xy_for_graph_type ( h , graph_type ) ax . bar ( [ outcome + adj for outcome in outcomes ], values , label = label , ** bar_kw , )","title":"plot_bar()"},{"location":"anydyce.viz/#anydyce.viz.plot_line","text":"Experimental This function should be considered experimental and may change or disappear in future versions. Plots a line graph of hs using ax with alpha and shadow . hs is a sequence of two-tuples (pairs) of strings (labels) and dyce . H objects. markers is cycled through when creating each line. For example, if markers is \"o+\" , the first histogram in hs will be plotted with a circle, the second will be plotted with a plus, the third will be plotted with a circle, the fourth will be plotted with a plus, and so on. Source code in anydyce/viz.py 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 @experimental @beartype def plot_line ( ax : AxesT , hs : Sequence [ Tuple [ str , H ]], graph_type : GraphType = GraphType . NORMAL , alpha : float = DEFAULT_GRAPH_ALPHA , shadow : bool = False , markers : str = \"o\" , ) -> None : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Plots a line graph of *hs* using [*ax*](https://matplotlib.org/stable/api/axes_api.html#the-axes-class) with *alpha* and *shadow*. *hs* is a sequence of two-tuples (pairs) of strings (labels) and ``#!python dyce.H`` objects. *markers* is cycled through when creating each line. For example, if *markers* is ``#!python \"o+\"``, the first histogram in *hs* will be plotted with a circle, the second will be plotted with a plus, the third will be plotted with a circle, the fourth will be plotted with a plus, and so on. \"\"\" ax . yaxis . set_major_formatter ( matplotlib . ticker . PercentFormatter ( xmax = 1 )) plot_kw : Dict [ str , Any ] = dict ( alpha = alpha ) if shadow : plot_kw . update ( dict ( path_effects = [ matplotlib . patheffects . SimpleLineShadow (), matplotlib . patheffects . Normal (), ] ) ) for ( label , h ), marker in zip ( hs , cycle ( markers )): outcomes , values = values_xy_for_graph_type ( h , graph_type ) ax . plot ( outcomes , values , label = label , marker = marker , ** plot_kw )","title":"plot_line()"},{"location":"anydyce.viz/#anydyce.viz.plot_scatter","text":"Experimental This function should be considered experimental and may change or disappear in future versions. Plots a scatter graph of hs using ax with alpha and shadow . hs is a sequence of two-tuples (pairs) of strings (labels) and dyce.H objects. markers is cycled through when creating each line. For example, if markers is \"o+\" , the first histogram in hs will be plotted with a circle, the second will be plotted with a plus, the third will be plotted with a circle, the fourth will be plotted with a plus, and so on. Source code in anydyce/viz.py 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 @experimental @beartype def plot_scatter ( ax : AxesT , hs : Sequence [ Tuple [ str , H ]], graph_type : GraphType = GraphType . NORMAL , alpha : float = DEFAULT_GRAPH_ALPHA , shadow : bool = False , markers : str = \"<>v^dPXo\" , ) -> None : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Plots a scatter graph of *hs* using [*ax*](https://matplotlib.org/stable/api/axes_api.html#the-axes-class) with *alpha* and *shadow*. *hs* is a sequence of two-tuples (pairs) of strings (labels) and ``dyce.H`` objects. *markers* is cycled through when creating each line. For example, if *markers* is ``#!python \"o+\"``, the first histogram in *hs* will be plotted with a circle, the second will be plotted with a plus, the third will be plotted with a circle, the fourth will be plotted with a plus, and so on. \"\"\" ax . yaxis . set_major_formatter ( matplotlib . ticker . PercentFormatter ( xmax = 1 )) scatter_kw : Dict [ str , Any ] = dict ( alpha = alpha ) if shadow : scatter_kw . update ( dict ( path_effects = [ matplotlib . patheffects . SimpleLineShadow (), matplotlib . patheffects . Normal (), ] ) ) for ( label , h ), marker in zip ( hs , cycle ( markers )): outcomes , values = values_xy_for_graph_type ( h , graph_type ) ax . scatter ( outcomes , values , label = label , marker = marker , ** scatter_kw )","title":"plot_scatter()"},{"location":"anydyce.viz/#anydyce.viz.plot_burst","text":"Experimental This function should be considered experimental and may change or disappear in future versions. Creates a dual, overlapping, cocentric pie chart in ax , which can be useful for visualizing relative probability distributions. Examples can be found in Additional interfaces . Source code in anydyce/viz.py 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 @experimental @beartype def plot_burst ( ax : AxesT , h_inner : H , h_outer : Optional [ H ] = None , title : Optional [ str ] = None , inner_formatter : HFormatterT = _outcome_name_formatter , inner_color : str = DEFAULT_GRAPH_COLOR , outer_formatter : Optional [ HFormatterT ] = None , outer_color : Optional [ str ] = None , text_color : str = DEFAULT_TEXT_COLOR , alpha : float = DEFAULT_BURST_ALPHA , ) -> None : r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Creates a dual, overlapping, cocentric pie chart in [*ax*](https://matplotlib.org/stable/api/axes_api.html#the-axes-class), which can be useful for visualizing relative probability distributions. Examples can be found in [Additional interfaces](index.md#additional-interfaces). \"\"\" h_outer = h_inner if h_outer is None else h_outer if outer_formatter is None : if h_outer == h_inner : outer_formatter = _probability_formatter else : outer_formatter = inner_formatter outer_color = inner_color if outer_color is None else outer_color inner = ( ( inner_formatter ( outcome , probability , h_inner ) if probability >= _LABEL_LIM else \"\" , probability , ) for outcome , probability in ( h_inner . distribution ()) ) inner_labels , inner_values = list ( zip ( * inner )) inner_colors = graph_colors ( inner_color , inner_values , alpha ) outer = ( ( outer_formatter ( outcome , probability , h_outer ) if probability >= _LABEL_LIM else \"\" , probability , ) for outcome , probability in ( h_outer . distribution ()) ) outer_labels , outer_values = list ( zip ( * outer )) outer_colors = graph_colors ( outer_color , outer_values , alpha ) if title : ax . set_title ( title , fontdict = { \"fontweight\" : \"bold\" , \"color\" : text_color }, pad = 24.0 , ) ax . pie ( outer_values , labels = outer_labels , radius = 1.0 , labeldistance = 1.15 , startangle = 90 , colors = outer_colors , textprops = dict ( color = text_color ), wedgeprops = dict ( width = 0.8 , edgecolor = text_color ), ) ax . pie ( inner_values , labels = inner_labels , radius = 0.85 , labeldistance = 0.7 , startangle = 90 , colors = inner_colors , textprops = dict ( color = text_color ), wedgeprops = dict ( width = 0.5 , edgecolor = text_color ), ) ax . set ( aspect = \"equal\" )","title":"plot_burst()"},{"location":"anydyce.viz/#anydyce.viz.plot_burst_subplot","text":"Experimental This function should be considered experimental and may change or disappear in future versions. Wrapper around plot_burst that creates a figure, axis pair, calls matplotlib.pyplot.tight_layout , and returns the pair. Source code in anydyce/viz.py 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 @experimental @beartype def plot_burst_subplot ( h_inner : H , h_outer : Optional [ H ] = None , title : Optional [ str ] = None , inner_formatter : HFormatterT = _outcome_name_formatter , inner_color : str = DEFAULT_GRAPH_COLOR , outer_formatter : Optional [ HFormatterT ] = None , outer_color : Optional [ str ] = None , text_color : str = DEFAULT_TEXT_COLOR , alpha : float = DEFAULT_BURST_ALPHA , ) -> Tuple [ FigureT , AxesT ]: r \"\"\" !!! warning \"Experimental\" This function should be considered experimental and may change or disappear in future versions. Wrapper around [``plot_burst``][anydyce.viz.plot_burst] that creates a figure, axis pair, calls [``matplotlib.pyplot.tight_layout``](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.tight_layout.html), and returns the pair. \"\"\" fig , ax = matplotlib . pyplot . subplots () plot_burst ( ax , h_inner , h_outer , title , inner_formatter , inner_color , outer_formatter , outer_color , text_color , alpha , ) with warnings . catch_warnings (): warnings . simplefilter ( \"ignore\" ) matplotlib . pyplot . tight_layout () return fig , ax","title":"plot_burst_subplot()"},{"location":"contrib/","text":"Contributing to anydyce There are many ways you can contribute. You have only but to try. Starting discussions and filing issues You can file new issues as you find them. Please try to avoid duplicating issues. \u201cWriting Effective Bug Reports\u201d by Elisabeth Hendrickson (PDF) may be helpful. For more free-flow discussions (beefs, rants, ideas, recipes, etc.), consider starting or joining a discussion . Hacking quick-start An easy way to bootstrap an isolated development environment is: 1 2 3 4 5 6 7 8 9 10 % git clone --recurse-submodules https://github.com/posita/anydyce.git \u2026 % cd anydyce % /path/to/python -m venv .venv \u2026 % . .venv/bin/activate % pip install --upgrade --editable '.[dev]' \u2026 % python -m pre_commit install \u2026 Substitute your preferred virtual environment process for venv . The [dev] variant includes additional dependencies necessary for development and testing. See the [options.extras_require] section in setup.cfg . Unit tests are run with pytest via Tox . 1 2 3 4 % cd \u2026/path/to/anydyce % . .venv/bin/activate % tox [ TOX_ARGS... [ -- PYTEST_ARGS... ]] \u2026 Submission guidelines If you are willing and able, consider submitting a pull request with a fix. See the docs if you\u2019re not already familiar with pull requests. anydyce releases from master (although not always immediately), so a lot of these workflows are helpful. There are only a few additional guidelines: If it is not already present, please add your name (and optionally your email, GitHub username, website address, or other contact information) to the LICENSE file. 1 2 3 ... * [ Matt Bogosian ]( mailto:matt@bogosian.net?Subject=anydyce ); GitHub \u2013 [ **@posita** ](https://github.com/posita) ... Use Black to format your changes. Do your best to follow the source conventions as you observe them. If it\u2019s important to you, Existing comments are wrapped at 88 characters per line to match Black\u2019s default. (Don\u2019t spend too much effort on strict conformance, though. I can clean things up later if they really bother me.) Provide tests where feasible and appropriate. At the very least, existing tests should not fail. (There are exceptions, but if there is any doubt, they probably do not apply.) Unit tests live in tests . If you want feedback on a work-in-progress, consider \u201cmentioning\u201d me ( @posita ), and describe specifically how I can help. Consider prefixing your pull request\u2019s title with something like, \u201c NEED FEEDBACK \u2013 \u201d. If your pull request is still in progress, but you are not blocked on anything, consider using the draft feature . Once you are ready for a merge, resolve any conflicts, squash your commits, and provide a useful commit message. ( This and this may be helpful.) If your pull request started out as a draft, promote it by requesting a review. Consider prefixing the pull request\u2019s title to something like, \u201c READY FOR MERGE \u2013 \u201d. I will try to get to it as soon as I can.","title":"Contributing"},{"location":"contrib/#contributing-to-anydyce","text":"There are many ways you can contribute. You have only but to try.","title":"Contributing to anydyce"},{"location":"contrib/#starting-discussions-and-filing-issues","text":"You can file new issues as you find them. Please try to avoid duplicating issues. \u201cWriting Effective Bug Reports\u201d by Elisabeth Hendrickson (PDF) may be helpful. For more free-flow discussions (beefs, rants, ideas, recipes, etc.), consider starting or joining a discussion .","title":"Starting discussions and filing issues"},{"location":"contrib/#hacking-quick-start","text":"An easy way to bootstrap an isolated development environment is: 1 2 3 4 5 6 7 8 9 10 % git clone --recurse-submodules https://github.com/posita/anydyce.git \u2026 % cd anydyce % /path/to/python -m venv .venv \u2026 % . .venv/bin/activate % pip install --upgrade --editable '.[dev]' \u2026 % python -m pre_commit install \u2026 Substitute your preferred virtual environment process for venv . The [dev] variant includes additional dependencies necessary for development and testing. See the [options.extras_require] section in setup.cfg . Unit tests are run with pytest via Tox . 1 2 3 4 % cd \u2026/path/to/anydyce % . .venv/bin/activate % tox [ TOX_ARGS... [ -- PYTEST_ARGS... ]] \u2026","title":"Hacking quick-start"},{"location":"contrib/#submission-guidelines","text":"If you are willing and able, consider submitting a pull request with a fix. See the docs if you\u2019re not already familiar with pull requests. anydyce releases from master (although not always immediately), so a lot of these workflows are helpful. There are only a few additional guidelines: If it is not already present, please add your name (and optionally your email, GitHub username, website address, or other contact information) to the LICENSE file. 1 2 3 ... * [ Matt Bogosian ]( mailto:matt@bogosian.net?Subject=anydyce ); GitHub \u2013 [ **@posita** ](https://github.com/posita) ... Use Black to format your changes. Do your best to follow the source conventions as you observe them. If it\u2019s important to you, Existing comments are wrapped at 88 characters per line to match Black\u2019s default. (Don\u2019t spend too much effort on strict conformance, though. I can clean things up later if they really bother me.) Provide tests where feasible and appropriate. At the very least, existing tests should not fail. (There are exceptions, but if there is any doubt, they probably do not apply.) Unit tests live in tests . If you want feedback on a work-in-progress, consider \u201cmentioning\u201d me ( @posita ), and describe specifically how I can help. Consider prefixing your pull request\u2019s title with something like, \u201c NEED FEEDBACK \u2013 \u201d. If your pull request is still in progress, but you are not blocked on anything, consider using the draft feature . Once you are ready for a merge, resolve any conflicts, squash your commits, and provide a useful commit message. ( This and this may be helpful.) If your pull request started out as a draft, promote it by requesting a review. Consider prefixing the pull request\u2019s title to something like, \u201c READY FOR MERGE \u2013 \u201d. I will try to get to it as soon as I can.","title":"Submission guidelines"},{"location":"license/","text":"License and credits The MIT License (MIT) Copyright \u00a9 2015-2022 Matt Bogosian ( @posita ). Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contributors The following individuals or entities have contributed to this software: Matt Bogosian ; GitHub \u2013 @posita By adding your name to this list, you grant a nonexclusive, perpetual license to your contributions to this software under the same terms as its license, above. Further, you warrant that your contributions to this software are exclusively your own creations and no one else has any superior right or claim to them. Finally, you agree to indemnify and hold harmless this software\u2019s owner against any colorable claim of infringement by a third party for this software\u2019s owner\u2019s otherwise lawful use of your contribution, whether or not such use was contemplated by you at the time you made it.","title":"License"},{"location":"license/#license-and-credits","text":"","title":"License and credits"},{"location":"license/#the-mit-license-mit","text":"Copyright \u00a9 2015-2022 Matt Bogosian ( @posita ). Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"The MIT License (MIT)"},{"location":"license/#contributors","text":"The following individuals or entities have contributed to this software: Matt Bogosian ; GitHub \u2013 @posita By adding your name to this list, you grant a nonexclusive, perpetual license to your contributions to this software under the same terms as its license, above. Further, you warrant that your contributions to this software are exclusively your own creations and no one else has any superior right or claim to them. Finally, you agree to indemnify and hold harmless this software\u2019s owner against any colorable claim of infringement by a third party for this software\u2019s owner\u2019s otherwise lawful use of your contribution, whether or not such use was contemplated by you at the time you made it.","title":"Contributors"},{"location":"notes/","text":"anydyce release notes 0.2.0 Completes update to dyce~=0.6 . Migrates from setuptools_scm to versioningit for more flexible version number formatting. Allows deployments to PyPI from CI based on tags. 0.1.6 ipywidgets and matplotlib are now required dependencies. Minor corrections to required Python version. 0.1.4 Prepares for breaking changes in future release of dyce~=0.6 . Adds experimental values_xy_for_graph_type function and exposes new \u201cat least\u201d and \u201cat most\u201d graph types via jupyter_visualize interface. 0.1.3 Turns data limiting off by default in jupyter_visualize . 0.1.2 Adds limit_for_display and updates jupyter_visualize . 0.1.1 Removes use of numerary . types . \u2026 SCU types. Links to an external (Gist) repository for example notebook. Adds comparison table to AnyDice to README.md . 0.1.0 anydyce goes live! Non-experimental features should be considered stable.","title":"Release notes"},{"location":"notes/#anydyce-release-notes","text":"","title":"anydyce release notes"},{"location":"notes/#020","text":"Completes update to dyce~=0.6 . Migrates from setuptools_scm to versioningit for more flexible version number formatting. Allows deployments to PyPI from CI based on tags.","title":"0.2.0"},{"location":"notes/#016","text":"ipywidgets and matplotlib are now required dependencies. Minor corrections to required Python version.","title":"0.1.6"},{"location":"notes/#014","text":"Prepares for breaking changes in future release of dyce~=0.6 . Adds experimental values_xy_for_graph_type function and exposes new \u201cat least\u201d and \u201cat most\u201d graph types via jupyter_visualize interface.","title":"0.1.4"},{"location":"notes/#013","text":"Turns data limiting off by default in jupyter_visualize .","title":"0.1.3"},{"location":"notes/#012","text":"Adds limit_for_display and updates jupyter_visualize .","title":"0.1.2"},{"location":"notes/#011","text":"Removes use of numerary . types . \u2026 SCU types. Links to an external (Gist) repository for example notebook. Adds comparison table to AnyDice to README.md .","title":"0.1.1"},{"location":"notes/#010","text":"anydyce goes live! Non-experimental features should be considered stable.","title":"0.1.0"}]}